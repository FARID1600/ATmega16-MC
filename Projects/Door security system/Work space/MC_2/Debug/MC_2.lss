
MC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000028b2  00002946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800076  00800076  0000295c  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001401  00000000  00000000  00005284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006685  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000067c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006935  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000857e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009469  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a218  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a378  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a605  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000add3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__vector_3>
      10:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__vector_8>
      24:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <main>
      8a:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_writeByte>:
 * 																	 	  FUNCTIONS
 *
****************************************************************************************************************************************************/

uint8 EEPROM_writeByte( uint16 u16addr, uint8 u8data )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_writeByte+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_writeByte+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the start bit */
	TWI_start();
     b58:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <TWI_start>
	/* Check if the operation is completed successfully */
    if ( TWI_getStatus() != TWI_START )
     b5c:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     b60:	88 30       	cpi	r24, 0x08	; 8
     b62:	11 f0       	breq	.+4      	; 0xb68 <EEPROM_writeByte+0x22>
        return ERROR;
     b64:	1c 82       	std	Y+4, r1	; 0x04
     b66:	28 c0       	rjmp	.+80     	; 0xbb8 <EEPROM_writeByte+0x72>
    /* Send the device address */
    TWI_writeByte( (uint8) ( 0xA0 | ( ( u16addr & 0x0700 ) >> 7 ) ) );
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	9a 81       	ldd	r25, Y+2	; 0x02
     b6c:	80 70       	andi	r24, 0x00	; 0
     b6e:	97 70       	andi	r25, 0x07	; 7
     b70:	88 0f       	add	r24, r24
     b72:	89 2f       	mov	r24, r25
     b74:	88 1f       	adc	r24, r24
     b76:	99 0b       	sbc	r25, r25
     b78:	91 95       	neg	r25
     b7a:	80 6a       	ori	r24, 0xA0	; 160
     b7c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_writeByte>
    if ( TWI_getStatus() != TWI_MT_SLA_W_ACK )
     b80:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     b84:	88 31       	cpi	r24, 0x18	; 24
     b86:	11 f0       	breq	.+4      	; 0xb8c <EEPROM_writeByte+0x46>
        return ERROR;
     b88:	1c 82       	std	Y+4, r1	; 0x04
     b8a:	16 c0       	rjmp	.+44     	; 0xbb8 <EEPROM_writeByte+0x72>
    /* Send the required memory location address */
    TWI_writeByte( ( uint8 ) u16addr );
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_writeByte>
    if ( TWI_getStatus() != TWI_MT_DATA_ACK )
     b92:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     b96:	88 32       	cpi	r24, 0x28	; 40
     b98:	11 f0       	breq	.+4      	; 0xb9e <EEPROM_writeByte+0x58>
        return ERROR;
     b9a:	1c 82       	std	Y+4, r1	; 0x04
     b9c:	0d c0       	rjmp	.+26     	; 0xbb8 <EEPROM_writeByte+0x72>
    /* Send the required data */
    TWI_writeByte( u8data );
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_writeByte>
    if ( TWI_getStatus() != TWI_MT_DATA_ACK )
     ba4:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     ba8:	88 32       	cpi	r24, 0x28	; 40
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x6a>
        return ERROR;
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <EEPROM_writeByte+0x72>
    /* Send the Stop Bit */
    TWI_stop();
     bb0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <TWI_stop>
	return SUCCESS;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 83       	std	Y+4, r24	; 0x04
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <EEPROM_readByte>:

uint8 EEPROM_readByte( uint16 u16addr, uint8 *u8data )
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <EEPROM_readByte+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <EEPROM_readByte+0x8>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	7c 83       	std	Y+4, r23	; 0x04
     bdc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the start bit */
	TWI_start();
     bde:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <TWI_start>
    if ( TWI_getStatus() != TWI_START )
     be2:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     be6:	88 30       	cpi	r24, 0x08	; 8
     be8:	11 f0       	breq	.+4      	; 0xbee <EEPROM_readByte+0x26>
        return ERROR;
     bea:	1d 82       	std	Y+5, r1	; 0x05
     bec:	44 c0       	rjmp	.+136    	; 0xc76 <EEPROM_readByte+0xae>
    /* Send the device address */
    TWI_writeByte( (uint8) ( 0xA0 | ( ( u16addr & 0x0700 ) >> 7 ) ) );
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	9a 81       	ldd	r25, Y+2	; 0x02
     bf2:	80 70       	andi	r24, 0x00	; 0
     bf4:	97 70       	andi	r25, 0x07	; 7
     bf6:	88 0f       	add	r24, r24
     bf8:	89 2f       	mov	r24, r25
     bfa:	88 1f       	adc	r24, r24
     bfc:	99 0b       	sbc	r25, r25
     bfe:	91 95       	neg	r25
     c00:	80 6a       	ori	r24, 0xA0	; 160
     c02:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_writeByte>
    if ( TWI_getStatus() != TWI_MT_SLA_W_ACK )
     c06:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     c0a:	88 31       	cpi	r24, 0x18	; 24
     c0c:	11 f0       	breq	.+4      	; 0xc12 <EEPROM_readByte+0x4a>
        return ERROR;
     c0e:	1d 82       	std	Y+5, r1	; 0x05
     c10:	32 c0       	rjmp	.+100    	; 0xc76 <EEPROM_readByte+0xae>
    /* Send the required memory location address */
    TWI_writeByte( ( uint8 ) u16addr );
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_writeByte>
    if ( TWI_getStatus() != TWI_MT_DATA_ACK )
     c18:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     c1c:	88 32       	cpi	r24, 0x28	; 40
     c1e:	11 f0       	breq	.+4      	; 0xc24 <EEPROM_readByte+0x5c>
        return ERROR;
     c20:	1d 82       	std	Y+5, r1	; 0x05
     c22:	29 c0       	rjmp	.+82     	; 0xc76 <EEPROM_readByte+0xae>
	/* Send a repeated start bit */
	TWI_start();
     c24:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <TWI_start>
    if ( TWI_getStatus() != TWI_REP_START )
     c28:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     c2c:	80 31       	cpi	r24, 0x10	; 16
     c2e:	11 f0       	breq	.+4      	; 0xc34 <EEPROM_readByte+0x6c>
        return ERROR;
     c30:	1d 82       	std	Y+5, r1	; 0x05
     c32:	21 c0       	rjmp	.+66     	; 0xc76 <EEPROM_readByte+0xae>
    /* Send the device address and the read signal */
    TWI_writeByte( (uint8) ( 0xA0 | ( ( u16addr & 0x0700 ) >> 7 )  | READ_SIGNAL ) );
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	80 70       	andi	r24, 0x00	; 0
     c3a:	97 70       	andi	r25, 0x07	; 7
     c3c:	88 0f       	add	r24, r24
     c3e:	89 2f       	mov	r24, r25
     c40:	88 1f       	adc	r24, r24
     c42:	99 0b       	sbc	r25, r25
     c44:	91 95       	neg	r25
     c46:	81 6a       	ori	r24, 0xA1	; 161
     c48:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <TWI_writeByte>
    if ( TWI_getStatus() != TWI_MT_SLA_R_ACK )
     c4c:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     c50:	80 34       	cpi	r24, 0x40	; 64
     c52:	11 f0       	breq	.+4      	; 0xc58 <EEPROM_readByte+0x90>
        return ERROR;
     c54:	1d 82       	std	Y+5, r1	; 0x05
     c56:	0f c0       	rjmp	.+30     	; 0xc76 <EEPROM_readByte+0xae>
    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     c58:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <TWI_readByteWithNACK>
     c5c:	eb 81       	ldd	r30, Y+3	; 0x03
     c5e:	fc 81       	ldd	r31, Y+4	; 0x04
     c60:	80 83       	st	Z, r24
    if ( TWI_getStatus() != TWI_MR_DATA_NACK )
     c62:	0e 94 08 10 	call	0x2010	; 0x2010 <TWI_getStatus>
     c66:	88 35       	cpi	r24, 0x58	; 88
     c68:	11 f0       	breq	.+4      	; 0xc6e <EEPROM_readByte+0xa6>
        return ERROR;
     c6a:	1d 82       	std	Y+5, r1	; 0x05
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <EEPROM_readByte+0xae>
    /* Send the Stop Bit */
    TWI_stop();
     c6e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <TWI_stop>
	return SUCCESS;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <Check_Pass>:

/*
 * Description: Get the user's pass and the pass saved in the EEPROM, then use Check_5Digits function.
 */
uint8 Check_Pass( uint8 *pass1, uint8 *pass2 )
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	63 97       	sbiw	r28, 0x13	; 19
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
     c9c:	99 8b       	std	Y+17, r25	; 0x11
     c9e:	88 8b       	std	Y+16, r24	; 0x10
     ca0:	7b 8b       	std	Y+19, r23	; 0x13
     ca2:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 test_result;
	Receive_PassFromMC1( pass1 );
     ca4:	88 89       	ldd	r24, Y+16	; 0x10
     ca6:	99 89       	ldd	r25, Y+17	; 0x11
     ca8:	0e 94 a7 0a 	call	0x154e	; 0x154e <Receive_PassFromMC1>
	Read_PassFromMem ( pass2 );
     cac:	8a 89       	ldd	r24, Y+18	; 0x12
     cae:	9b 89       	ldd	r25, Y+19	; 0x13
     cb0:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <Read_PassFromMem>
	/* Compare the 2 passwords. */
	test_result = Check_5Digits( pass1, pass2 );
     cb4:	88 89       	ldd	r24, Y+16	; 0x10
     cb6:	99 89       	ldd	r25, Y+17	; 0x11
     cb8:	2a 89       	ldd	r18, Y+18	; 0x12
     cba:	3b 89       	ldd	r19, Y+19	; 0x13
     cbc:	b9 01       	movw	r22, r18
     cbe:	0e 94 81 07 	call	0xf02	; 0xf02 <Check_5Digits>
     cc2:	8f 87       	std	Y+15, r24	; 0x0f
	/* Send the compare result. */
	UART_sendByte( test_result );
     cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc6:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_sendByte>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a0 e2       	ldi	r26, 0x20	; 32
     cd0:	b1 e4       	ldi	r27, 0x41	; 65
     cd2:	8b 87       	std	Y+11, r24	; 0x0b
     cd4:	9c 87       	std	Y+12, r25	; 0x0c
     cd6:	ad 87       	std	Y+13, r26	; 0x0d
     cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cda:	6b 85       	ldd	r22, Y+11	; 0x0b
     cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cde:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	4a ef       	ldi	r20, 0xFA	; 250
     ce8:	54 e4       	ldi	r21, 0x44	; 68
     cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	8f 83       	std	Y+7, r24	; 0x07
     cf4:	98 87       	std	Y+8, r25	; 0x08
     cf6:	a9 87       	std	Y+9, r26	; 0x09
     cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e8       	ldi	r20, 0x80	; 128
     d08:	5f e3       	ldi	r21, 0x3F	; 63
     d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d0e:	88 23       	and	r24, r24
     d10:	2c f4       	brge	.+10     	; 0xd1c <Check_Pass+0x94>
		__ticks = 1;
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	9e 83       	std	Y+6, r25	; 0x06
     d18:	8d 83       	std	Y+5, r24	; 0x05
     d1a:	3f c0       	rjmp	.+126    	; 0xd9a <Check_Pass+0x112>
	else if (__tmp > 65535)
     d1c:	6f 81       	ldd	r22, Y+7	; 0x07
     d1e:	78 85       	ldd	r23, Y+8	; 0x08
     d20:	89 85       	ldd	r24, Y+9	; 0x09
     d22:	9a 85       	ldd	r25, Y+10	; 0x0a
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	3f ef       	ldi	r19, 0xFF	; 255
     d28:	4f e7       	ldi	r20, 0x7F	; 127
     d2a:	57 e4       	ldi	r21, 0x47	; 71
     d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d30:	18 16       	cp	r1, r24
     d32:	4c f5       	brge	.+82     	; 0xd86 <Check_Pass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d34:	6b 85       	ldd	r22, Y+11	; 0x0b
     d36:	7c 85       	ldd	r23, Y+12	; 0x0c
     d38:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e2       	ldi	r20, 0x20	; 32
     d42:	51 e4       	ldi	r21, 0x41	; 65
     d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	0f c0       	rjmp	.+30     	; 0xd7c <Check_Pass+0xf4>
     d5e:	88 ec       	ldi	r24, 0xC8	; 200
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <Check_Pass+0xe2>
     d6e:	9c 83       	std	Y+4, r25	; 0x04
     d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d72:	8d 81       	ldd	r24, Y+5	; 0x05
     d74:	9e 81       	ldd	r25, Y+6	; 0x06
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	9e 83       	std	Y+6, r25	; 0x06
     d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	9e 81       	ldd	r25, Y+6	; 0x06
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	69 f7       	brne	.-38     	; 0xd5e <Check_Pass+0xd6>
     d84:	14 c0       	rjmp	.+40     	; 0xdae <Check_Pass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	9e 83       	std	Y+6, r25	; 0x06
     d98:	8d 83       	std	Y+5, r24	; 0x05
     d9a:	8d 81       	ldd	r24, Y+5	; 0x05
     d9c:	9e 81       	ldd	r25, Y+6	; 0x06
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <Check_Pass+0x11e>
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	return test_result;
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     db0:	63 96       	adiw	r28, 0x13	; 19
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <Comp_Passwords>:

/*
 * Description: Get 2 passwords from the user, then use Check_5Digits function.
 */
void Comp_Passwords( uint8 *pass1, uint8 *pass2 )
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	63 97       	sbiw	r28, 0x13	; 19
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	99 8b       	std	Y+17, r25	; 0x11
     dd8:	88 8b       	std	Y+16, r24	; 0x10
     dda:	7b 8b       	std	Y+19, r23	; 0x13
     ddc:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 pass_match;
	/* don't skip the while loop that checks the password, until the 5 digits match. */
	do
	{
		/* Save the first password in a string. */
		Receive_PassFromMC1( pass1 );
     dde:	88 89       	ldd	r24, Y+16	; 0x10
     de0:	99 89       	ldd	r25, Y+17	; 0x11
     de2:	0e 94 a7 0a 	call	0x154e	; 0x154e <Receive_PassFromMC1>
		/* Save the second password in another string. */
		Receive_PassFromMC1( pass2 );
     de6:	8a 89       	ldd	r24, Y+18	; 0x12
     de8:	9b 89       	ldd	r25, Y+19	; 0x13
     dea:	0e 94 a7 0a 	call	0x154e	; 0x154e <Receive_PassFromMC1>
		/* Add the comparing result in the variable. */
		pass_match = Check_5Digits( pass1, pass2 );
     dee:	88 89       	ldd	r24, Y+16	; 0x10
     df0:	99 89       	ldd	r25, Y+17	; 0x11
     df2:	2a 89       	ldd	r18, Y+18	; 0x12
     df4:	3b 89       	ldd	r19, Y+19	; 0x13
     df6:	b9 01       	movw	r22, r18
     df8:	0e 94 81 07 	call	0xf02	; 0xf02 <Check_5Digits>
     dfc:	8f 87       	std	Y+15, r24	; 0x0f
		/* Tell the first MC whether the passwords match or not. */
		UART_sendByte( pass_match );
     dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     e00:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_sendByte>
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	a0 e2       	ldi	r26, 0x20	; 32
     e0a:	b1 e4       	ldi	r27, 0x41	; 65
     e0c:	8b 87       	std	Y+11, r24	; 0x0b
     e0e:	9c 87       	std	Y+12, r25	; 0x0c
     e10:	ad 87       	std	Y+13, r26	; 0x0d
     e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e14:	6b 85       	ldd	r22, Y+11	; 0x0b
     e16:	7c 85       	ldd	r23, Y+12	; 0x0c
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	4a ef       	ldi	r20, 0xFA	; 250
     e22:	54 e4       	ldi	r21, 0x44	; 68
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	8f 83       	std	Y+7, r24	; 0x07
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	a9 87       	std	Y+9, r26	; 0x09
     e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e34:	6f 81       	ldd	r22, Y+7	; 0x07
     e36:	78 85       	ldd	r23, Y+8	; 0x08
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e8       	ldi	r20, 0x80	; 128
     e42:	5f e3       	ldi	r21, 0x3F	; 63
     e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e48:	88 23       	and	r24, r24
     e4a:	2c f4       	brge	.+10     	; 0xe56 <Comp_Passwords+0x94>
		__ticks = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	9e 83       	std	Y+6, r25	; 0x06
     e52:	8d 83       	std	Y+5, r24	; 0x05
     e54:	3f c0       	rjmp	.+126    	; 0xed4 <Comp_Passwords+0x112>
	else if (__tmp > 65535)
     e56:	6f 81       	ldd	r22, Y+7	; 0x07
     e58:	78 85       	ldd	r23, Y+8	; 0x08
     e5a:	89 85       	ldd	r24, Y+9	; 0x09
     e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	3f ef       	ldi	r19, 0xFF	; 255
     e62:	4f e7       	ldi	r20, 0x7F	; 127
     e64:	57 e4       	ldi	r21, 0x47	; 71
     e66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	4c f5       	brge	.+82     	; 0xec0 <Comp_Passwords+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e70:	7c 85       	ldd	r23, Y+12	; 0x0c
     e72:	8d 85       	ldd	r24, Y+13	; 0x0d
     e74:	9e 85       	ldd	r25, Y+14	; 0x0e
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e2       	ldi	r20, 0x20	; 32
     e7c:	51 e4       	ldi	r21, 0x41	; 65
     e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <Comp_Passwords+0xf4>
     e98:	88 ec       	ldi	r24, 0xC8	; 200
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9c 83       	std	Y+4, r25	; 0x04
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <Comp_Passwords+0xe2>
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	69 f7       	brne	.-38     	; 0xe98 <Comp_Passwords+0xd6>
     ebe:	14 c0       	rjmp	.+40     	; 0xee8 <Comp_Passwords+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec0:	6f 81       	ldd	r22, Y+7	; 0x07
     ec2:	78 85       	ldd	r23, Y+8	; 0x08
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	9e 83       	std	Y+6, r25	; 0x06
     ed2:	8d 83       	std	Y+5, r24	; 0x05
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	9e 81       	ldd	r25, Y+6	; 0x06
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	f1 f7       	brne	.-4      	; 0xee0 <Comp_Passwords+0x11e>
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}
	while( pass_match != MATCH_COMPLETE );
     ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	09 f0       	breq	.+2      	; 0xef0 <Comp_Passwords+0x12e>
     eee:	77 cf       	rjmp	.-274    	; 0xdde <Comp_Passwords+0x1c>
}
     ef0:	63 96       	adiw	r28, 0x13	; 19
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Check_5Digits>:

/*
 * Description: Compare each digit in any 2 passwords, passed as arguments.
 */
uint8 Check_5Digits( uint8 *pass1, uint8 *pass2 )
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	27 97       	sbiw	r28, 0x07	; 7
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	7e 83       	std	Y+6, r23	; 0x06
     f1c:	6d 83       	std	Y+5, r22	; 0x05
	uint8 match_iterator = 0, match_detector = 0;
     f1e:	1a 82       	std	Y+2, r1	; 0x02
     f20:	19 82       	std	Y+1, r1	; 0x01
	/* A for loop that calculates the number of matching digits in the password */
	for( match_iterator = 0; match_iterator < 5 ; match_iterator++ )
     f22:	1a 82       	std	Y+2, r1	; 0x02
     f24:	1a c0       	rjmp	.+52     	; 0xf5a <Check_5Digits+0x58>
	{
		if( pass1[match_iterator] == pass2[match_iterator] )
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	fc 01       	movw	r30, r24
     f32:	e2 0f       	add	r30, r18
     f34:	f3 1f       	adc	r31, r19
     f36:	40 81       	ld	r20, Z
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	fc 01       	movw	r30, r24
     f44:	e2 0f       	add	r30, r18
     f46:	f3 1f       	adc	r31, r19
     f48:	80 81       	ld	r24, Z
     f4a:	48 17       	cp	r20, r24
     f4c:	19 f4       	brne	.+6      	; 0xf54 <Check_5Digits+0x52>
		{
			match_detector++;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	89 83       	std	Y+1, r24	; 0x01
 */
uint8 Check_5Digits( uint8 *pass1, uint8 *pass2 )
{
	uint8 match_iterator = 0, match_detector = 0;
	/* A for loop that calculates the number of matching digits in the password */
	for( match_iterator = 0; match_iterator < 5 ; match_iterator++ )
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	85 30       	cpi	r24, 0x05	; 5
     f5e:	18 f3       	brcs	.-58     	; 0xf26 <Check_5Digits+0x24>
		if( pass1[match_iterator] == pass2[match_iterator] )
		{
			match_detector++;
		}
	}
	if ( match_detector == 5 )
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	85 30       	cpi	r24, 0x05	; 5
     f64:	19 f4       	brne	.+6      	; 0xf6c <Check_5Digits+0x6a>
		return MATCH_COMPLETE;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	8f 83       	std	Y+7, r24	; 0x07
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <Check_5Digits+0x6c>
	else
		return MISS_MATCH;
     f6c:	1f 82       	std	Y+7, r1	; 0x07
     f6e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     f70:	27 96       	adiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <Save_PassToMem>:

/*
 * Description: Save pass received from MC1 in the EEPROM.
 */
void Save_PassToMem( uint8 *pass )
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	c8 54       	subi	r28, 0x48	; 72
     f90:	d0 40       	sbci	r29, 0x00	; 0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	fe 01       	movw	r30, r28
     f9e:	e9 5b       	subi	r30, 0xB9	; 185
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
	EEPROM_writeByte( 0x0300, pass[0] );		//change address
     fa6:	fe 01       	movw	r30, r28
     fa8:	e9 5b       	subi	r30, 0xB9	; 185
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	01 90       	ld	r0, Z+
     fae:	f0 81       	ld	r31, Z
     fb0:	e0 2d       	mov	r30, r0
     fb2:	20 81       	ld	r18, Z
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	62 2f       	mov	r22, r18
     fba:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
     fbe:	fe 01       	movw	r30, r28
     fc0:	ed 5b       	subi	r30, 0xBD	; 189
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a0 e2       	ldi	r26, 0x20	; 32
     fca:	b1 e4       	ldi	r27, 0x41	; 65
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	8e 01       	movw	r16, r28
     fd6:	01 5c       	subi	r16, 0xC1	; 193
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	ed 5b       	subi	r30, 0xBD	; 189
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a ef       	ldi	r20, 0xFA	; 250
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1002:	fe 01       	movw	r30, r28
    1004:	ff 96       	adiw	r30, 0x3f	; 63
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <Save_PassToMem+0xa6>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9e af       	std	Y+62, r25	; 0x3e
    1024:	8d af       	std	Y+61, r24	; 0x3d
    1026:	46 c0       	rjmp	.+140    	; 0x10b4 <Save_PassToMem+0x132>
	else if (__tmp > 65535)
    1028:	fe 01       	movw	r30, r28
    102a:	ff 96       	adiw	r30, 0x3f	; 63
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	64 f5       	brge	.+88     	; 0x109c <Save_PassToMem+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	fe 01       	movw	r30, r28
    1046:	ed 5b       	subi	r30, 0xBD	; 189
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	9e af       	std	Y+62, r25	; 0x3e
    1070:	8d af       	std	Y+61, r24	; 0x3d
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <Save_PassToMem+0x110>
    1074:	88 ec       	ldi	r24, 0xC8	; 200
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9c af       	std	Y+60, r25	; 0x3c
    107a:	8b af       	std	Y+59, r24	; 0x3b
    107c:	8b ad       	ldd	r24, Y+59	; 0x3b
    107e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <Save_PassToMem+0xfe>
    1084:	9c af       	std	Y+60, r25	; 0x3c
    1086:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	8d ad       	ldd	r24, Y+61	; 0x3d
    108a:	9e ad       	ldd	r25, Y+62	; 0x3e
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9e af       	std	Y+62, r25	; 0x3e
    1090:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	8d ad       	ldd	r24, Y+61	; 0x3d
    1094:	9e ad       	ldd	r25, Y+62	; 0x3e
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	69 f7       	brne	.-38     	; 0x1074 <Save_PassToMem+0xf2>
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <Save_PassToMem+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	fe 01       	movw	r30, r28
    109e:	ff 96       	adiw	r30, 0x3f	; 63
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	9e af       	std	Y+62, r25	; 0x3e
    10b2:	8d af       	std	Y+61, r24	; 0x3d
    10b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10b8:	9a af       	std	Y+58, r25	; 0x3a
    10ba:	89 af       	std	Y+57, r24	; 0x39
    10bc:	89 ad       	ldd	r24, Y+57	; 0x39
    10be:	9a ad       	ldd	r25, Y+58	; 0x3a
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <Save_PassToMem+0x13e>
    10c4:	9a af       	std	Y+58, r25	; 0x3a
    10c6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	EEPROM_writeByte( 0x0310, pass[1] );
    10c8:	fe 01       	movw	r30, r28
    10ca:	e9 5b       	subi	r30, 0xB9	; 185
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	80 81       	ld	r24, Z
    10d0:	91 81       	ldd	r25, Z+1	; 0x01
    10d2:	fc 01       	movw	r30, r24
    10d4:	31 96       	adiw	r30, 0x01	; 1
    10d6:	20 81       	ld	r18, Z
    10d8:	80 e1       	ldi	r24, 0x10	; 16
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	62 2f       	mov	r22, r18
    10de:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 e2       	ldi	r26, 0x20	; 32
    10e8:	b1 e4       	ldi	r27, 0x41	; 65
    10ea:	8d ab       	std	Y+53, r24	; 0x35
    10ec:	9e ab       	std	Y+54, r25	; 0x36
    10ee:	af ab       	std	Y+55, r26	; 0x37
    10f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f2:	6d a9       	ldd	r22, Y+53	; 0x35
    10f4:	7e a9       	ldd	r23, Y+54	; 0x36
    10f6:	8f a9       	ldd	r24, Y+55	; 0x37
    10f8:	98 ad       	ldd	r25, Y+56	; 0x38
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4a ef       	ldi	r20, 0xFA	; 250
    1100:	54 e4       	ldi	r21, 0x44	; 68
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	89 ab       	std	Y+49, r24	; 0x31
    110c:	9a ab       	std	Y+50, r25	; 0x32
    110e:	ab ab       	std	Y+51, r26	; 0x33
    1110:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1112:	69 a9       	ldd	r22, Y+49	; 0x31
    1114:	7a a9       	ldd	r23, Y+50	; 0x32
    1116:	8b a9       	ldd	r24, Y+51	; 0x33
    1118:	9c a9       	ldd	r25, Y+52	; 0x34
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <Save_PassToMem+0x1b2>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	98 ab       	std	Y+48, r25	; 0x30
    1130:	8f a7       	std	Y+47, r24	; 0x2f
    1132:	3f c0       	rjmp	.+126    	; 0x11b2 <Save_PassToMem+0x230>
	else if (__tmp > 65535)
    1134:	69 a9       	ldd	r22, Y+49	; 0x31
    1136:	7a a9       	ldd	r23, Y+50	; 0x32
    1138:	8b a9       	ldd	r24, Y+51	; 0x33
    113a:	9c a9       	ldd	r25, Y+52	; 0x34
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	3f ef       	ldi	r19, 0xFF	; 255
    1140:	4f e7       	ldi	r20, 0x7F	; 127
    1142:	57 e4       	ldi	r21, 0x47	; 71
    1144:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1148:	18 16       	cp	r1, r24
    114a:	4c f5       	brge	.+82     	; 0x119e <Save_PassToMem+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114c:	6d a9       	ldd	r22, Y+53	; 0x35
    114e:	7e a9       	ldd	r23, Y+54	; 0x36
    1150:	8f a9       	ldd	r24, Y+55	; 0x37
    1152:	98 ad       	ldd	r25, Y+56	; 0x38
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e2       	ldi	r20, 0x20	; 32
    115a:	51 e4       	ldi	r21, 0x41	; 65
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	98 ab       	std	Y+48, r25	; 0x30
    1172:	8f a7       	std	Y+47, r24	; 0x2f
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <Save_PassToMem+0x212>
    1176:	88 ec       	ldi	r24, 0xC8	; 200
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	9e a7       	std	Y+46, r25	; 0x2e
    117c:	8d a7       	std	Y+45, r24	; 0x2d
    117e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1180:	9e a5       	ldd	r25, Y+46	; 0x2e
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <Save_PassToMem+0x200>
    1186:	9e a7       	std	Y+46, r25	; 0x2e
    1188:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118a:	8f a5       	ldd	r24, Y+47	; 0x2f
    118c:	98 a9       	ldd	r25, Y+48	; 0x30
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	98 ab       	std	Y+48, r25	; 0x30
    1192:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1194:	8f a5       	ldd	r24, Y+47	; 0x2f
    1196:	98 a9       	ldd	r25, Y+48	; 0x30
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	69 f7       	brne	.-38     	; 0x1176 <Save_PassToMem+0x1f4>
    119c:	14 c0       	rjmp	.+40     	; 0x11c6 <Save_PassToMem+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119e:	69 a9       	ldd	r22, Y+49	; 0x31
    11a0:	7a a9       	ldd	r23, Y+50	; 0x32
    11a2:	8b a9       	ldd	r24, Y+51	; 0x33
    11a4:	9c a9       	ldd	r25, Y+52	; 0x34
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	98 ab       	std	Y+48, r25	; 0x30
    11b0:	8f a7       	std	Y+47, r24	; 0x2f
    11b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b4:	98 a9       	ldd	r25, Y+48	; 0x30
    11b6:	9c a7       	std	Y+44, r25	; 0x2c
    11b8:	8b a7       	std	Y+43, r24	; 0x2b
    11ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    11bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <Save_PassToMem+0x23c>
    11c2:	9c a7       	std	Y+44, r25	; 0x2c
    11c4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_writeByte( 0x0320, pass[2] );
    11c6:	fe 01       	movw	r30, r28
    11c8:	e9 5b       	subi	r30, 0xB9	; 185
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	fc 01       	movw	r30, r24
    11d2:	32 96       	adiw	r30, 0x02	; 2
    11d4:	20 81       	ld	r18, Z
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	93 e0       	ldi	r25, 0x03	; 3
    11da:	62 2f       	mov	r22, r18
    11dc:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a0 e2       	ldi	r26, 0x20	; 32
    11e6:	b1 e4       	ldi	r27, 0x41	; 65
    11e8:	8f a3       	std	Y+39, r24	; 0x27
    11ea:	98 a7       	std	Y+40, r25	; 0x28
    11ec:	a9 a7       	std	Y+41, r26	; 0x29
    11ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f0:	6f a1       	ldd	r22, Y+39	; 0x27
    11f2:	78 a5       	ldd	r23, Y+40	; 0x28
    11f4:	89 a5       	ldd	r24, Y+41	; 0x29
    11f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	4a ef       	ldi	r20, 0xFA	; 250
    11fe:	54 e4       	ldi	r21, 0x44	; 68
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	8b a3       	std	Y+35, r24	; 0x23
    120a:	9c a3       	std	Y+36, r25	; 0x24
    120c:	ad a3       	std	Y+37, r26	; 0x25
    120e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1210:	6b a1       	ldd	r22, Y+35	; 0x23
    1212:	7c a1       	ldd	r23, Y+36	; 0x24
    1214:	8d a1       	ldd	r24, Y+37	; 0x25
    1216:	9e a1       	ldd	r25, Y+38	; 0x26
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1224:	88 23       	and	r24, r24
    1226:	2c f4       	brge	.+10     	; 0x1232 <Save_PassToMem+0x2b0>
		__ticks = 1;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9a a3       	std	Y+34, r25	; 0x22
    122e:	89 a3       	std	Y+33, r24	; 0x21
    1230:	3f c0       	rjmp	.+126    	; 0x12b0 <Save_PassToMem+0x32e>
	else if (__tmp > 65535)
    1232:	6b a1       	ldd	r22, Y+35	; 0x23
    1234:	7c a1       	ldd	r23, Y+36	; 0x24
    1236:	8d a1       	ldd	r24, Y+37	; 0x25
    1238:	9e a1       	ldd	r25, Y+38	; 0x26
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	3f ef       	ldi	r19, 0xFF	; 255
    123e:	4f e7       	ldi	r20, 0x7F	; 127
    1240:	57 e4       	ldi	r21, 0x47	; 71
    1242:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1246:	18 16       	cp	r1, r24
    1248:	4c f5       	brge	.+82     	; 0x129c <Save_PassToMem+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124a:	6f a1       	ldd	r22, Y+39	; 0x27
    124c:	78 a5       	ldd	r23, Y+40	; 0x28
    124e:	89 a5       	ldd	r24, Y+41	; 0x29
    1250:	9a a5       	ldd	r25, Y+42	; 0x2a
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	9a a3       	std	Y+34, r25	; 0x22
    1270:	89 a3       	std	Y+33, r24	; 0x21
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <Save_PassToMem+0x310>
    1274:	88 ec       	ldi	r24, 0xC8	; 200
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	98 a3       	std	Y+32, r25	; 0x20
    127a:	8f 8f       	std	Y+31, r24	; 0x1f
    127c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    127e:	98 a1       	ldd	r25, Y+32	; 0x20
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <Save_PassToMem+0x2fe>
    1284:	98 a3       	std	Y+32, r25	; 0x20
    1286:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1288:	89 a1       	ldd	r24, Y+33	; 0x21
    128a:	9a a1       	ldd	r25, Y+34	; 0x22
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	9a a3       	std	Y+34, r25	; 0x22
    1290:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1292:	89 a1       	ldd	r24, Y+33	; 0x21
    1294:	9a a1       	ldd	r25, Y+34	; 0x22
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	69 f7       	brne	.-38     	; 0x1274 <Save_PassToMem+0x2f2>
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <Save_PassToMem+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129c:	6b a1       	ldd	r22, Y+35	; 0x23
    129e:	7c a1       	ldd	r23, Y+36	; 0x24
    12a0:	8d a1       	ldd	r24, Y+37	; 0x25
    12a2:	9e a1       	ldd	r25, Y+38	; 0x26
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9a a3       	std	Y+34, r25	; 0x22
    12ae:	89 a3       	std	Y+33, r24	; 0x21
    12b0:	89 a1       	ldd	r24, Y+33	; 0x21
    12b2:	9a a1       	ldd	r25, Y+34	; 0x22
    12b4:	9e 8f       	std	Y+30, r25	; 0x1e
    12b6:	8d 8f       	std	Y+29, r24	; 0x1d
    12b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <Save_PassToMem+0x33a>
    12c0:	9e 8f       	std	Y+30, r25	; 0x1e
    12c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_writeByte( 0x0330, pass[3] );
    12c4:	fe 01       	movw	r30, r28
    12c6:	e9 5b       	subi	r30, 0xB9	; 185
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	fc 01       	movw	r30, r24
    12d0:	33 96       	adiw	r30, 0x03	; 3
    12d2:	20 81       	ld	r18, Z
    12d4:	80 e3       	ldi	r24, 0x30	; 48
    12d6:	93 e0       	ldi	r25, 0x03	; 3
    12d8:	62 2f       	mov	r22, r18
    12da:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e2       	ldi	r26, 0x20	; 32
    12e4:	b1 e4       	ldi	r27, 0x41	; 65
    12e6:	89 8f       	std	Y+25, r24	; 0x19
    12e8:	9a 8f       	std	Y+26, r25	; 0x1a
    12ea:	ab 8f       	std	Y+27, r26	; 0x1b
    12ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	69 8d       	ldd	r22, Y+25	; 0x19
    12f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a ef       	ldi	r20, 0xFA	; 250
    12fc:	54 e4       	ldi	r21, 0x44	; 68
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8d 8b       	std	Y+21, r24	; 0x15
    1308:	9e 8b       	std	Y+22, r25	; 0x16
    130a:	af 8b       	std	Y+23, r26	; 0x17
    130c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    130e:	6d 89       	ldd	r22, Y+21	; 0x15
    1310:	7e 89       	ldd	r23, Y+22	; 0x16
    1312:	8f 89       	ldd	r24, Y+23	; 0x17
    1314:	98 8d       	ldd	r25, Y+24	; 0x18
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1322:	88 23       	and	r24, r24
    1324:	2c f4       	brge	.+10     	; 0x1330 <Save_PassToMem+0x3ae>
		__ticks = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9c 8b       	std	Y+20, r25	; 0x14
    132c:	8b 8b       	std	Y+19, r24	; 0x13
    132e:	3f c0       	rjmp	.+126    	; 0x13ae <Save_PassToMem+0x42c>
	else if (__tmp > 65535)
    1330:	6d 89       	ldd	r22, Y+21	; 0x15
    1332:	7e 89       	ldd	r23, Y+22	; 0x16
    1334:	8f 89       	ldd	r24, Y+23	; 0x17
    1336:	98 8d       	ldd	r25, Y+24	; 0x18
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	4f e7       	ldi	r20, 0x7F	; 127
    133e:	57 e4       	ldi	r21, 0x47	; 71
    1340:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1344:	18 16       	cp	r1, r24
    1346:	4c f5       	brge	.+82     	; 0x139a <Save_PassToMem+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	69 8d       	ldd	r22, Y+25	; 0x19
    134a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9c 8b       	std	Y+20, r25	; 0x14
    136e:	8b 8b       	std	Y+19, r24	; 0x13
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <Save_PassToMem+0x40e>
    1372:	88 ec       	ldi	r24, 0xC8	; 200
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9a 8b       	std	Y+18, r25	; 0x12
    1378:	89 8b       	std	Y+17, r24	; 0x11
    137a:	89 89       	ldd	r24, Y+17	; 0x11
    137c:	9a 89       	ldd	r25, Y+18	; 0x12
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <Save_PassToMem+0x3fc>
    1382:	9a 8b       	std	Y+18, r25	; 0x12
    1384:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	9c 8b       	std	Y+20, r25	; 0x14
    138e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1390:	8b 89       	ldd	r24, Y+19	; 0x13
    1392:	9c 89       	ldd	r25, Y+20	; 0x14
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	69 f7       	brne	.-38     	; 0x1372 <Save_PassToMem+0x3f0>
    1398:	14 c0       	rjmp	.+40     	; 0x13c2 <Save_PassToMem+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139a:	6d 89       	ldd	r22, Y+21	; 0x15
    139c:	7e 89       	ldd	r23, Y+22	; 0x16
    139e:	8f 89       	ldd	r24, Y+23	; 0x17
    13a0:	98 8d       	ldd	r25, Y+24	; 0x18
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9c 8b       	std	Y+20, r25	; 0x14
    13ac:	8b 8b       	std	Y+19, r24	; 0x13
    13ae:	8b 89       	ldd	r24, Y+19	; 0x13
    13b0:	9c 89       	ldd	r25, Y+20	; 0x14
    13b2:	98 8b       	std	Y+16, r25	; 0x10
    13b4:	8f 87       	std	Y+15, r24	; 0x0f
    13b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b8:	98 89       	ldd	r25, Y+16	; 0x10
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <Save_PassToMem+0x438>
    13be:	98 8b       	std	Y+16, r25	; 0x10
    13c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_writeByte( 0x0340, pass[4] );
    13c2:	fe 01       	movw	r30, r28
    13c4:	e9 5b       	subi	r30, 0xB9	; 185
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	fc 01       	movw	r30, r24
    13ce:	34 96       	adiw	r30, 0x04	; 4
    13d0:	20 81       	ld	r18, Z
    13d2:	80 e4       	ldi	r24, 0x40	; 64
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	62 2f       	mov	r22, r18
    13d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_writeByte>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e2       	ldi	r26, 0x20	; 32
    13e2:	b1 e4       	ldi	r27, 0x41	; 65
    13e4:	8b 87       	std	Y+11, r24	; 0x0b
    13e6:	9c 87       	std	Y+12, r25	; 0x0c
    13e8:	ad 87       	std	Y+13, r26	; 0x0d
    13ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	4a ef       	ldi	r20, 0xFA	; 250
    13fa:	54 e4       	ldi	r21, 0x44	; 68
    13fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	8f 83       	std	Y+7, r24	; 0x07
    1406:	98 87       	std	Y+8, r25	; 0x08
    1408:	a9 87       	std	Y+9, r26	; 0x09
    140a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140c:	6f 81       	ldd	r22, Y+7	; 0x07
    140e:	78 85       	ldd	r23, Y+8	; 0x08
    1410:	89 85       	ldd	r24, Y+9	; 0x09
    1412:	9a 85       	ldd	r25, Y+10	; 0x0a
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	5f e3       	ldi	r21, 0x3F	; 63
    141c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1420:	88 23       	and	r24, r24
    1422:	2c f4       	brge	.+10     	; 0x142e <Save_PassToMem+0x4ac>
		__ticks = 1;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	3f c0       	rjmp	.+126    	; 0x14ac <Save_PassToMem+0x52a>
	else if (__tmp > 65535)
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	3f ef       	ldi	r19, 0xFF	; 255
    143a:	4f e7       	ldi	r20, 0x7F	; 127
    143c:	57 e4       	ldi	r21, 0x47	; 71
    143e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1442:	18 16       	cp	r1, r24
    1444:	4c f5       	brge	.+82     	; 0x1498 <Save_PassToMem+0x516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1446:	6b 85       	ldd	r22, Y+11	; 0x0b
    1448:	7c 85       	ldd	r23, Y+12	; 0x0c
    144a:	8d 85       	ldd	r24, Y+13	; 0x0d
    144c:	9e 85       	ldd	r25, Y+14	; 0x0e
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e2       	ldi	r20, 0x20	; 32
    1454:	51 e4       	ldi	r21, 0x41	; 65
    1456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145a:	dc 01       	movw	r26, r24
    145c:	cb 01       	movw	r24, r22
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	0f c0       	rjmp	.+30     	; 0x148e <Save_PassToMem+0x50c>
    1470:	88 ec       	ldi	r24, 0xC8	; 200
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 83       	std	Y+4, r25	; 0x04
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <Save_PassToMem+0x4fa>
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	69 f7       	brne	.-38     	; 0x1470 <Save_PassToMem+0x4ee>
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <Save_PassToMem+0x53e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1498:	6f 81       	ldd	r22, Y+7	; 0x07
    149a:	78 85       	ldd	r23, Y+8	; 0x08
    149c:	89 85       	ldd	r24, Y+9	; 0x09
    149e:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	9a 81       	ldd	r25, Y+2	; 0x02
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <Save_PassToMem+0x536>
    14bc:	9a 83       	std	Y+2, r25	; 0x02
    14be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    14c0:	c8 5b       	subi	r28, 0xB8	; 184
    14c2:	df 4f       	sbci	r29, 0xFF	; 255
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	1f 91       	pop	r17
    14d4:	0f 91       	pop	r16
    14d6:	08 95       	ret

000014d8 <Read_PassFromMem>:

/*
 * Description: Read the pass saved in the EEPROM to check whether the user's pass is correct or incorrect.
 */
void Read_PassFromMem ( uint8 *pass )
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <Read_PassFromMem+0x6>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_readByte( 0x0300, &pass[0] );
    14e6:	29 81       	ldd	r18, Y+1	; 0x01
    14e8:	3a 81       	ldd	r19, Y+2	; 0x02
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	b9 01       	movw	r22, r18
    14f0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_readByte>
	EEPROM_readByte( 0x0310, &pass[1] );
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	9c 01       	movw	r18, r24
    14fa:	2f 5f       	subi	r18, 0xFF	; 255
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	80 e1       	ldi	r24, 0x10	; 16
    1500:	93 e0       	ldi	r25, 0x03	; 3
    1502:	b9 01       	movw	r22, r18
    1504:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_readByte>
	EEPROM_readByte( 0x0320, &pass[2] );
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	9c 01       	movw	r18, r24
    150e:	2e 5f       	subi	r18, 0xFE	; 254
    1510:	3f 4f       	sbci	r19, 0xFF	; 255
    1512:	80 e2       	ldi	r24, 0x20	; 32
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	b9 01       	movw	r22, r18
    1518:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_readByte>
	EEPROM_readByte( 0x0330, &pass[3] );
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	9a 81       	ldd	r25, Y+2	; 0x02
    1520:	9c 01       	movw	r18, r24
    1522:	2d 5f       	subi	r18, 0xFD	; 253
    1524:	3f 4f       	sbci	r19, 0xFF	; 255
    1526:	80 e3       	ldi	r24, 0x30	; 48
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	b9 01       	movw	r22, r18
    152c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_readByte>
	EEPROM_readByte( 0x0340, &pass[4] );
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	9c 01       	movw	r18, r24
    1536:	2c 5f       	subi	r18, 0xFC	; 252
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	80 e4       	ldi	r24, 0x40	; 64
    153c:	93 e0       	ldi	r25, 0x03	; 3
    153e:	b9 01       	movw	r22, r18
    1540:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <EEPROM_readByte>
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <Receive_PassFromMC1>:

/*
 * Description: Receive pass from MC1 to check or save.
 */
void Receive_PassFromMC1( uint8 *pass )
{
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <Receive_PassFromMC1+0xa>
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
	pass[0] = UART_receiveByte();
    1560:	0e 94 84 13 	call	0x2708	; 0x2708 <UART_receiveByte>
    1564:	e9 81       	ldd	r30, Y+1	; 0x01
    1566:	fa 81       	ldd	r31, Y+2	; 0x02
    1568:	80 83       	st	Z, r24
	pass[1] = UART_receiveByte();
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	8c 01       	movw	r16, r24
    1570:	0f 5f       	subi	r16, 0xFF	; 255
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	0e 94 84 13 	call	0x2708	; 0x2708 <UART_receiveByte>
    1578:	f8 01       	movw	r30, r16
    157a:	80 83       	st	Z, r24
	pass[2] = UART_receiveByte();
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	8c 01       	movw	r16, r24
    1582:	0e 5f       	subi	r16, 0xFE	; 254
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	0e 94 84 13 	call	0x2708	; 0x2708 <UART_receiveByte>
    158a:	f8 01       	movw	r30, r16
    158c:	80 83       	st	Z, r24
	pass[3] = UART_receiveByte();
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	8c 01       	movw	r16, r24
    1594:	0d 5f       	subi	r16, 0xFD	; 253
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	0e 94 84 13 	call	0x2708	; 0x2708 <UART_receiveByte>
    159c:	f8 01       	movw	r30, r16
    159e:	80 83       	st	Z, r24
	pass[4] = UART_receiveByte();
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	8c 01       	movw	r16, r24
    15a6:	0c 5f       	subi	r16, 0xFC	; 252
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	0e 94 84 13 	call	0x2708	; 0x2708 <UART_receiveByte>
    15ae:	f8 01       	movw	r30, r16
    15b0:	80 83       	st	Z, r24
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <main>:

/* Used to count time using the timer. */
uint16 rx_timer_counts = 0;

int main(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	a9 97       	sbiw	r28, 0x29	; 41
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
	 * (1) Configure the bit rate.
	 * (2) Configure the parity mode.
	 * (3) Configure the number of stop bits.
	 * (4) Configure the number of bits mode.
	 */
	UART_ConfigType uart_receive_config = {9600, DISABLED, ONE_BIT, EIGHT_BITS};
    15d4:	9e 01       	movw	r18, r28
    15d6:	2c 5f       	subi	r18, 0xFC	; 252
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	39 a3       	std	Y+33, r19	; 0x21
    15dc:	28 a3       	std	Y+32, r18	; 0x20
    15de:	8f e6       	ldi	r24, 0x6F	; 111
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9b a3       	std	Y+35, r25	; 0x23
    15e4:	8a a3       	std	Y+34, r24	; 0x22
    15e6:	97 e0       	ldi	r25, 0x07	; 7
    15e8:	9c a3       	std	Y+36, r25	; 0x24
    15ea:	ea a1       	ldd	r30, Y+34	; 0x22
    15ec:	fb a1       	ldd	r31, Y+35	; 0x23
    15ee:	00 80       	ld	r0, Z
    15f0:	2a a1       	ldd	r18, Y+34	; 0x22
    15f2:	3b a1       	ldd	r19, Y+35	; 0x23
    15f4:	2f 5f       	subi	r18, 0xFF	; 255
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	3b a3       	std	Y+35, r19	; 0x23
    15fa:	2a a3       	std	Y+34, r18	; 0x22
    15fc:	e8 a1       	ldd	r30, Y+32	; 0x20
    15fe:	f9 a1       	ldd	r31, Y+33	; 0x21
    1600:	00 82       	st	Z, r0
    1602:	28 a1       	ldd	r18, Y+32	; 0x20
    1604:	39 a1       	ldd	r19, Y+33	; 0x21
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	39 a3       	std	Y+33, r19	; 0x21
    160c:	28 a3       	std	Y+32, r18	; 0x20
    160e:	3c a1       	ldd	r19, Y+36	; 0x24
    1610:	31 50       	subi	r19, 0x01	; 1
    1612:	3c a3       	std	Y+36, r19	; 0x24
    1614:	8c a1       	ldd	r24, Y+36	; 0x24
    1616:	88 23       	and	r24, r24
    1618:	41 f7       	brne	.-48     	; 0x15ea <main+0x2a>
	 * (2) Configure the pre-scaler.
	 * (3) Configure the initial value.
	 * (4) Add the timer_ID.
	 * (5) Configure the comparing value, if compare mode.
	 */
	Timer_Config rx_config = {COMP, PS_1024, 0, TIMER1, 8000 };		/* Each interrupt is equivalent to a second */
    161a:	fe 01       	movw	r30, r28
    161c:	3b 96       	adiw	r30, 0x0b	; 11
    161e:	fe a3       	std	Y+38, r31	; 0x26
    1620:	ed a3       	std	Y+37, r30	; 0x25
    1622:	28 e6       	ldi	r18, 0x68	; 104
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	38 a7       	std	Y+40, r19	; 0x28
    1628:	2f a3       	std	Y+39, r18	; 0x27
    162a:	37 e0       	ldi	r19, 0x07	; 7
    162c:	39 a7       	std	Y+41, r19	; 0x29
    162e:	ef a1       	ldd	r30, Y+39	; 0x27
    1630:	f8 a5       	ldd	r31, Y+40	; 0x28
    1632:	00 80       	ld	r0, Z
    1634:	2f a1       	ldd	r18, Y+39	; 0x27
    1636:	38 a5       	ldd	r19, Y+40	; 0x28
    1638:	2f 5f       	subi	r18, 0xFF	; 255
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	38 a7       	std	Y+40, r19	; 0x28
    163e:	2f a3       	std	Y+39, r18	; 0x27
    1640:	ed a1       	ldd	r30, Y+37	; 0x25
    1642:	fe a1       	ldd	r31, Y+38	; 0x26
    1644:	00 82       	st	Z, r0
    1646:	2d a1       	ldd	r18, Y+37	; 0x25
    1648:	3e a1       	ldd	r19, Y+38	; 0x26
    164a:	2f 5f       	subi	r18, 0xFF	; 255
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	3e a3       	std	Y+38, r19	; 0x26
    1650:	2d a3       	std	Y+37, r18	; 0x25
    1652:	39 a5       	ldd	r19, Y+41	; 0x29
    1654:	31 50       	subi	r19, 0x01	; 1
    1656:	39 a7       	std	Y+41, r19	; 0x29
    1658:	89 a5       	ldd	r24, Y+41	; 0x29
    165a:	88 23       	and	r24, r24
    165c:	41 f7       	brne	.-48     	; 0x162e <main+0x6e>
	/*
	 * Configure the I2C:
	 * (1) Configure the bit rate.
	 * (2) Configure the address.
	 */
	TWI_CongigType twi_config = {BRATE_400K, 0x01};
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	8a 8b       	std	Y+18, r24	; 0x12
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8b 8b       	std	Y+19, r24	; 0x13
	TWI_init( &twi_config );
    1666:	ce 01       	movw	r24, r28
    1668:	42 96       	adiw	r24, 0x12	; 18
    166a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <TWI_init>
	/* Array to receive password from MC1. */
	uint8 received_pass[5];
	/* Array to connect password to EEPROM. */
	uint8 comp_pass[5];
	/* A variable to find whether the user chose '+' or '-'. */
	uint8 user_choice = 0;
    166e:	1b 82       	std	Y+3, r1	; 0x03
	/* A variable which identifies whether the 2 passwords are matching or not. */
	uint8 pass_match = 0;
    1670:	1a 82       	std	Y+2, r1	; 0x02
	/* A variable to enable the buzzer at a certain condition */
	uint8 buzz = 0;
    1672:	19 82       	std	Y+1, r1	; 0x01
	/* Configure the buzzer pin as output pin */
	GPIO_setupPinDirection( PORTD_ID, PIN7_ID, PIN_OUTPUT);
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	67 e0       	ldi	r22, 0x07	; 7
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_setupPinDirection>
	/* Turn the buzzer off */
	GPIO_writePin( PORTD_ID, PIN7_ID, LOGIC_LOW );
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	67 e0       	ldi	r22, 0x07	; 7
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_writePin>
	/* Enable the global interrupts */
	SREG |= ( 1 << 7 );
    1688:	af e5       	ldi	r26, 0x5F	; 95
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ef e5       	ldi	r30, 0x5F	; 95
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	8c 93       	st	X, r24
	/* Initialize the required modules. */
	UART_init( &uart_receive_config );
    1696:	ce 01       	movw	r24, r28
    1698:	04 96       	adiw	r24, 0x04	; 4
    169a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <UART_init>
	DcMotor_Init();
    169e:	0e 94 17 10 	call	0x202e	; 0x202e <DcMotor_Init>
	/* Compare the 2 passwords received from the user */
	Comp_Passwords( received_pass, comp_pass);
    16a2:	ce 01       	movw	r24, r28
    16a4:	44 96       	adiw	r24, 0x14	; 20
    16a6:	9e 01       	movw	r18, r28
    16a8:	27 5e       	subi	r18, 0xE7	; 231
    16aa:	3f 4f       	sbci	r19, 0xFF	; 255
    16ac:	b9 01       	movw	r22, r18
    16ae:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <Comp_Passwords>
	/* If the while loop is skipped, then the passwords match. So, save the password to the EEPROM. */
	Save_PassToMem( received_pass );
    16b2:	ce 01       	movw	r24, r28
    16b4:	44 96       	adiw	r24, 0x14	; 20
    16b6:	0e 94 c1 07 	call	0xf82	; 0xf82 <Save_PassToMem>
	while( 1 )
	{
		/* Variable to get notified by the user choice */
		user_choice = UART_receiveByte();
    16ba:	0e 94 84 13 	call	0x2708	; 0x2708 <UART_receiveByte>
    16be:	8b 83       	std	Y+3, r24	; 0x03
		switch( user_choice )
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	e8 2f       	mov	r30, r24
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	ff 8f       	std	Y+31, r31	; 0x1f
    16c8:	ee 8f       	std	Y+30, r30	; 0x1e
    16ca:	2e 8d       	ldd	r18, Y+30	; 0x1e
    16cc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    16ce:	2b 32       	cpi	r18, 0x2B	; 43
    16d0:	31 05       	cpc	r19, r1
    16d2:	39 f0       	breq	.+14     	; 0x16e2 <main+0x122>
    16d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    16d8:	8d 32       	cpi	r24, 0x2D	; 45
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <main+0x120>
    16de:	4e c0       	rjmp	.+156    	; 0x177c <main+0x1bc>
    16e0:	ec cf       	rjmp	.-40     	; 0x16ba <main+0xfa>
		{
		case '+':
			pass_match = Check_Pass( received_pass, comp_pass );
    16e2:	ce 01       	movw	r24, r28
    16e4:	44 96       	adiw	r24, 0x14	; 20
    16e6:	9e 01       	movw	r18, r28
    16e8:	27 5e       	subi	r18, 0xE7	; 231
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	b9 01       	movw	r22, r18
    16ee:	0e 94 44 06 	call	0xc88	; 0xc88 <Check_Pass>
    16f2:	8a 83       	std	Y+2, r24	; 0x02
			if( pass_match == MATCH_COMPLETE )
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	d1 f4       	brne	.+52     	; 0x172e <main+0x16e>
			{
				/* Because the user may enter an incorrect pass for 1 or 2 times before getting it right. */
				buzz = 0;
    16fa:	19 82       	std	Y+1, r1	; 0x01
				/* Rotate the motor in the clock wise direction */
				DcMotor_Rotate( CW );
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	0e 94 2f 10 	call	0x205e	; 0x205e <DcMotor_Rotate>
				/* Send the call back function to the timer */
				TIMER_setCallBack( Motor_RxCallBack, TIMER1, COMP );
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	9c e0       	ldi	r25, 0x0C	; 12
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	0e 94 75 11 	call	0x22ea	; 0x22ea <TIMER_setCallBack>
				/* Start the timer */
				Timer_Init( &rx_config );
    170e:	ce 01       	movw	r24, r28
    1710:	0b 96       	adiw	r24, 0x0b	; 11
    1712:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Timer_Init>
				/* Wait x seconds */
				while( rx_timer_counts != 33 )
    1716:	80 91 76 00 	lds	r24, 0x0076
    171a:	90 91 77 00 	lds	r25, 0x0077
    171e:	81 32       	cpi	r24, 0x21	; 33
    1720:	91 05       	cpc	r25, r1
    1722:	c9 f7       	brne	.-14     	; 0x1716 <main+0x156>
				{

				}
				rx_timer_counts = 0;
    1724:	10 92 77 00 	sts	0x0077, r1
    1728:	10 92 76 00 	sts	0x0076, r1
    172c:	c6 cf       	rjmp	.-116    	; 0x16ba <main+0xfa>
			}
			else if( pass_match == MISS_MATCH )
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 23       	and	r24, r24
    1732:	19 f6       	brne	.-122    	; 0x16ba <main+0xfa>
			{
				buzz++;
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	8f 5f       	subi	r24, 0xFF	; 255
    1738:	89 83       	std	Y+1, r24	; 0x01
				if( buzz == 3 )
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	09 f0       	breq	.+2      	; 0x1742 <main+0x182>
    1740:	bc cf       	rjmp	.-136    	; 0x16ba <main+0xfa>
				{
					buzz = 2;
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	89 83       	std	Y+1, r24	; 0x01
					GPIO_writePin( PORTD_ID, PIN7_ID, LOGIC_HIGH );
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	67 e0       	ldi	r22, 0x07	; 7
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_writePin>
					/* Send the call back function to the timer */
					TIMER_setCallBack( Buzzer_RxCallBack, TIMER1, COMP );
    1750:	83 e3       	ldi	r24, 0x33	; 51
    1752:	9c e0       	ldi	r25, 0x0C	; 12
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	0e 94 75 11 	call	0x22ea	; 0x22ea <TIMER_setCallBack>
					/* Start the timer */
					Timer_Init( &rx_config );
    175c:	ce 01       	movw	r24, r28
    175e:	0b 96       	adiw	r24, 0x0b	; 11
    1760:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Timer_Init>
					/* Wait x seconds */
					while( rx_timer_counts != 60 )
    1764:	80 91 76 00 	lds	r24, 0x0076
    1768:	90 91 77 00 	lds	r25, 0x0077
    176c:	8c 33       	cpi	r24, 0x3C	; 60
    176e:	91 05       	cpc	r25, r1
    1770:	c9 f7       	brne	.-14     	; 0x1764 <main+0x1a4>
					{

					}
					rx_timer_counts = 0;
    1772:	10 92 77 00 	sts	0x0077, r1
    1776:	10 92 76 00 	sts	0x0076, r1
    177a:	9f cf       	rjmp	.-194    	; 0x16ba <main+0xfa>
				}
			}
			break;
		case '-':
			pass_match = Check_Pass( received_pass, comp_pass );
    177c:	ce 01       	movw	r24, r28
    177e:	44 96       	adiw	r24, 0x14	; 20
    1780:	9e 01       	movw	r18, r28
    1782:	27 5e       	subi	r18, 0xE7	; 231
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	b9 01       	movw	r22, r18
    1788:	0e 94 44 06 	call	0xc88	; 0xc88 <Check_Pass>
    178c:	8a 83       	std	Y+2, r24	; 0x02
			if( pass_match == MATCH_COMPLETE )
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	71 f4       	brne	.+28     	; 0x17b0 <main+0x1f0>
			{
				/* Because the user may enter an incorrect pass for 1 or 2 times before getting it right. */
				buzz = 0;
    1794:	19 82       	std	Y+1, r1	; 0x01
				Comp_Passwords( received_pass, comp_pass);
    1796:	ce 01       	movw	r24, r28
    1798:	44 96       	adiw	r24, 0x14	; 20
    179a:	9e 01       	movw	r18, r28
    179c:	27 5e       	subi	r18, 0xE7	; 231
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	b9 01       	movw	r22, r18
    17a2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <Comp_Passwords>
				Save_PassToMem( received_pass );
    17a6:	ce 01       	movw	r24, r28
    17a8:	44 96       	adiw	r24, 0x14	; 20
    17aa:	0e 94 c1 07 	call	0xf82	; 0xf82 <Save_PassToMem>
    17ae:	85 cf       	rjmp	.-246    	; 0x16ba <main+0xfa>
			}
			else if( pass_match == MISS_MATCH )
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	88 23       	and	r24, r24
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <main+0x1f8>
    17b6:	81 cf       	rjmp	.-254    	; 0x16ba <main+0xfa>
			{
				buzz++;
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	89 83       	std	Y+1, r24	; 0x01
				if( buzz == 3 )
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <main+0x206>
    17c4:	7a cf       	rjmp	.-268    	; 0x16ba <main+0xfa>
				{
					/* to buzz again if the user entered a wrong pass after the buzzer stops. */
					buzz = 2;
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	89 83       	std	Y+1, r24	; 0x01
					GPIO_writePin( PORTD_ID, PIN7_ID, LOGIC_HIGH );
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	67 e0       	ldi	r22, 0x07	; 7
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_writePin>
					/* Send the call back function to the timer */
					TIMER_setCallBack( Buzzer_RxCallBack, TIMER1, COMP );
    17d4:	83 e3       	ldi	r24, 0x33	; 51
    17d6:	9c e0       	ldi	r25, 0x0C	; 12
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 75 11 	call	0x22ea	; 0x22ea <TIMER_setCallBack>
					/* Start the timer */
					Timer_Init( &rx_config );
    17e0:	ce 01       	movw	r24, r28
    17e2:	0b 96       	adiw	r24, 0x0b	; 11
    17e4:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <Timer_Init>
					/* Wait x seconds */
					while( rx_timer_counts != 60 )
    17e8:	80 91 76 00 	lds	r24, 0x0076
    17ec:	90 91 77 00 	lds	r25, 0x0077
    17f0:	8c 33       	cpi	r24, 0x3C	; 60
    17f2:	91 05       	cpc	r25, r1
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <main+0x228>
					{

					}
					rx_timer_counts = 0;
    17f6:	10 92 77 00 	sts	0x0077, r1
    17fa:	10 92 76 00 	sts	0x0076, r1
    17fe:	5d cf       	rjmp	.-326    	; 0x16ba <main+0xfa>

00001800 <Motor_RxCallBack>:
		}
	}
}

void Motor_RxCallBack( void )
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	rx_timer_counts++;
    1808:	80 91 76 00 	lds	r24, 0x0076
    180c:	90 91 77 00 	lds	r25, 0x0077
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	90 93 77 00 	sts	0x0077, r25
    1816:	80 93 76 00 	sts	0x0076, r24
	/* Wait x1 seconds */
	if( rx_timer_counts == 15 )
    181a:	80 91 76 00 	lds	r24, 0x0076
    181e:	90 91 77 00 	lds	r25, 0x0077
    1822:	8f 30       	cpi	r24, 0x0F	; 15
    1824:	91 05       	cpc	r25, r1
    1826:	21 f4       	brne	.+8      	; 0x1830 <Motor_RxCallBack+0x30>
		DcMotor_Rotate( STOP );
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	0e 94 2f 10 	call	0x205e	; 0x205e <DcMotor_Rotate>
    182e:	18 c0       	rjmp	.+48     	; 0x1860 <Motor_RxCallBack+0x60>
	/* Wait x2+x1 seconds */
	else if( rx_timer_counts == 18 )
    1830:	80 91 76 00 	lds	r24, 0x0076
    1834:	90 91 77 00 	lds	r25, 0x0077
    1838:	82 31       	cpi	r24, 0x12	; 18
    183a:	91 05       	cpc	r25, r1
    183c:	21 f4       	brne	.+8      	; 0x1846 <Motor_RxCallBack+0x46>
		DcMotor_Rotate( ACW );
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	0e 94 2f 10 	call	0x205e	; 0x205e <DcMotor_Rotate>
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <Motor_RxCallBack+0x60>
	/* Wait x3+x2+x1 seconds */
	else if ( rx_timer_counts == 33)
    1846:	80 91 76 00 	lds	r24, 0x0076
    184a:	90 91 77 00 	lds	r25, 0x0077
    184e:	81 32       	cpi	r24, 0x21	; 33
    1850:	91 05       	cpc	r25, r1
    1852:	31 f4       	brne	.+12     	; 0x1860 <Motor_RxCallBack+0x60>
	{
		/* Shut-down the motor and the timer */
		DcMotor_Rotate( STOP );
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0e 94 2f 10 	call	0x205e	; 0x205e <DcMotor_Rotate>
		TIMER_intDeInit(TIMER1);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	0e 94 be 12 	call	0x257c	; 0x257c <TIMER_intDeInit>
	}
}
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <Buzzer_RxCallBack>:

void Buzzer_RxCallBack( void )
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
	rx_timer_counts++;
    186e:	80 91 76 00 	lds	r24, 0x0076
    1872:	90 91 77 00 	lds	r25, 0x0077
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	90 93 77 00 	sts	0x0077, r25
    187c:	80 93 76 00 	sts	0x0076, r24
	if ( rx_timer_counts == 33 )
    1880:	80 91 76 00 	lds	r24, 0x0076
    1884:	90 91 77 00 	lds	r25, 0x0077
    1888:	81 32       	cpi	r24, 0x21	; 33
    188a:	91 05       	cpc	r25, r1
    188c:	41 f4       	brne	.+16     	; 0x189e <Buzzer_RxCallBack+0x38>
	{
		/* Shut-down the buzzer and the timer */
		GPIO_writePin( PORTD_ID, PIN7_ID, LOGIC_LOW );
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	67 e0       	ldi	r22, 0x07	; 7
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GPIO_writePin>
		TIMER_intDeInit(TIMER1);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	0e 94 be 12 	call	0x257c	; 0x257c <TIMER_intDeInit>
	}
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <GPIO_setupPinDirection>:

/*
 * Description: Set the pin as input or output.
 */
void GPIO_setupPinDirection( uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction /* Input or Output*/ )
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <GPIO_setupPinDirection+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_setupPinDirection+0x8>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	6a 83       	std	Y+2, r22	; 0x02
    18b6:	4b 83       	std	Y+3, r20	; 0x03
	if( ( port_num >= NUM_OF_PORTS ) || ( pin_num >= NUM_OF_PINS_PER_PORT ) )
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <GPIO_setupPinDirection+0x1c>
    18be:	d5 c0       	rjmp	.+426    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <GPIO_setupPinDirection+0x24>
    18c6:	d1 c0       	rjmp	.+418    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
	{

	}
	else
	{
		switch(port_num)
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3d 83       	std	Y+5, r19	; 0x05
    18d0:	2c 83       	std	Y+4, r18	; 0x04
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	9d 81       	ldd	r25, Y+5	; 0x05
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	09 f4       	brne	.+2      	; 0x18de <GPIO_setupPinDirection+0x3a>
    18dc:	43 c0       	rjmp	.+134    	; 0x1964 <GPIO_setupPinDirection+0xc0>
    18de:	2c 81       	ldd	r18, Y+4	; 0x04
    18e0:	3d 81       	ldd	r19, Y+5	; 0x05
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <GPIO_setupPinDirection+0x4e>
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	71 f0       	breq	.+28     	; 0x190c <GPIO_setupPinDirection+0x68>
    18f0:	bc c0       	rjmp	.+376    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
    18f2:	2c 81       	ldd	r18, Y+4	; 0x04
    18f4:	3d 81       	ldd	r19, Y+5	; 0x05
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <GPIO_setupPinDirection+0x5a>
    18fc:	5f c0       	rjmp	.+190    	; 0x19bc <GPIO_setupPinDirection+0x118>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	83 30       	cpi	r24, 0x03	; 3
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <GPIO_setupPinDirection+0x66>
    1908:	85 c0       	rjmp	.+266    	; 0x1a14 <GPIO_setupPinDirection+0x170>
    190a:	af c0       	rjmp	.+350    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if( direction == PIN_OUTPUT )
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	a1 f4       	brne	.+40     	; 0x193a <GPIO_setupPinDirection+0x96>
				SET_BIT( DDRA, pin_num );
    1912:	aa e3       	ldi	r26, 0x3A	; 58
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ea e3       	ldi	r30, 0x3A	; 58
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <GPIO_setupPinDirection+0x8c>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <GPIO_setupPinDirection+0x88>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	98 c0       	rjmp	.+304    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRA, pin_num );
    193a:	aa e3       	ldi	r26, 0x3A	; 58
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	ea e3       	ldi	r30, 0x3A	; 58
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <GPIO_setupPinDirection+0xb4>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <GPIO_setupPinDirection+0xb0>
    195c:	80 95       	com	r24
    195e:	84 23       	and	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	83 c0       	rjmp	.+262    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if( direction == PIN_OUTPUT )
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	a1 f4       	brne	.+40     	; 0x1992 <GPIO_setupPinDirection+0xee>
				SET_BIT( DDRB, pin_num );
    196a:	a7 e3       	ldi	r26, 0x37	; 55
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e7 e3       	ldi	r30, 0x37	; 55
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <GPIO_setupPinDirection+0xe4>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <GPIO_setupPinDirection+0xe0>
    198c:	84 2b       	or	r24, r20
    198e:	8c 93       	st	X, r24
    1990:	6c c0       	rjmp	.+216    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRB, pin_num );
    1992:	a7 e3       	ldi	r26, 0x37	; 55
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e7 e3       	ldi	r30, 0x37	; 55
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <GPIO_setupPinDirection+0x10c>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <GPIO_setupPinDirection+0x108>
    19b4:	80 95       	com	r24
    19b6:	84 23       	and	r24, r20
    19b8:	8c 93       	st	X, r24
    19ba:	57 c0       	rjmp	.+174    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if( direction == PIN_OUTPUT )
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	a1 f4       	brne	.+40     	; 0x19ea <GPIO_setupPinDirection+0x146>
				SET_BIT( DDRC, pin_num );
    19c2:	a4 e3       	ldi	r26, 0x34	; 52
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e4 e3       	ldi	r30, 0x34	; 52
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 2e       	mov	r0, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GPIO_setupPinDirection+0x13c>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	0a 94       	dec	r0
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <GPIO_setupPinDirection+0x138>
    19e4:	84 2b       	or	r24, r20
    19e6:	8c 93       	st	X, r24
    19e8:	40 c0       	rjmp	.+128    	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRC, pin_num );
    19ea:	a4 e3       	ldi	r26, 0x34	; 52
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e4 e3       	ldi	r30, 0x34	; 52
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	48 2f       	mov	r20, r24
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	02 2e       	mov	r0, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <GPIO_setupPinDirection+0x164>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <GPIO_setupPinDirection+0x160>
    1a0c:	80 95       	com	r24
    1a0e:	84 23       	and	r24, r20
    1a10:	8c 93       	st	X, r24
    1a12:	2b c0       	rjmp	.+86     	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if( direction == PIN_OUTPUT )
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	a1 f4       	brne	.+40     	; 0x1a42 <GPIO_setupPinDirection+0x19e>
				SET_BIT( DDRD, pin_num );
    1a1a:	a1 e3       	ldi	r26, 0x31	; 49
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e1 e3       	ldi	r30, 0x31	; 49
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	48 2f       	mov	r20, r24
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 2e       	mov	r0, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GPIO_setupPinDirection+0x194>
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	0a 94       	dec	r0
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <GPIO_setupPinDirection+0x190>
    1a3c:	84 2b       	or	r24, r20
    1a3e:	8c 93       	st	X, r24
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRD, pin_num );
    1a42:	a1 e3       	ldi	r26, 0x31	; 49
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e1 e3       	ldi	r30, 0x31	; 49
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_setupPinDirection+0x1bc>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_setupPinDirection+0x1b8>
    1a64:	80 95       	com	r24
    1a66:	84 23       	and	r24, r20
    1a68:	8c 93       	st	X, r24
			break;
		}
	}
}
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <GPIO_writePin>:

/*
 * Description: Write a value to a specific pin.
 */
void GPIO_writePin( uint8 port_num, uint8 pin_num, uint8 value )
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <GPIO_writePin+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_writePin+0x8>
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	6a 83       	std	Y+2, r22	; 0x02
    1a8c:	4b 83       	std	Y+3, r20	; 0x03
	if( ( port_num >= NUM_OF_PORTS ) || ( pin_num >= NUM_OF_PINS_PER_PORT ) )
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	08 f0       	brcs	.+2      	; 0x1a96 <GPIO_writePin+0x1c>
    1a94:	d5 c0       	rjmp	.+426    	; 0x1c40 <GPIO_writePin+0x1c6>
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	88 30       	cpi	r24, 0x08	; 8
    1a9a:	08 f0       	brcs	.+2      	; 0x1a9e <GPIO_writePin+0x24>
    1a9c:	d1 c0       	rjmp	.+418    	; 0x1c40 <GPIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	3d 83       	std	Y+5, r19	; 0x05
    1aa6:	2c 83       	std	Y+4, r18	; 0x04
    1aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	91 05       	cpc	r25, r1
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <GPIO_writePin+0x3a>
    1ab2:	43 c0       	rjmp	.+134    	; 0x1b3a <GPIO_writePin+0xc0>
    1ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab8:	22 30       	cpi	r18, 0x02	; 2
    1aba:	31 05       	cpc	r19, r1
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <GPIO_writePin+0x4e>
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <GPIO_writePin+0x68>
    1ac6:	bc c0       	rjmp	.+376    	; 0x1c40 <GPIO_writePin+0x1c6>
    1ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aca:	3d 81       	ldd	r19, Y+5	; 0x05
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <GPIO_writePin+0x5a>
    1ad2:	5f c0       	rjmp	.+190    	; 0x1b92 <GPIO_writePin+0x118>
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	83 30       	cpi	r24, 0x03	; 3
    1ada:	91 05       	cpc	r25, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <GPIO_writePin+0x66>
    1ade:	85 c0       	rjmp	.+266    	; 0x1bea <GPIO_writePin+0x170>
    1ae0:	af c0       	rjmp	.+350    	; 0x1c40 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if( value == LOGIC_HIGH )
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	a1 f4       	brne	.+40     	; 0x1b10 <GPIO_writePin+0x96>
				SET_BIT( PORTA, pin_num );
    1ae8:	ab e3       	ldi	r26, 0x3B	; 59
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	eb e3       	ldi	r30, 0x3B	; 59
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <GPIO_writePin+0x8c>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <GPIO_writePin+0x88>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	98 c0       	rjmp	.+304    	; 0x1c40 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTA, pin_num );
    1b10:	ab e3       	ldi	r26, 0x3B	; 59
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	eb e3       	ldi	r30, 0x3B	; 59
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GPIO_writePin+0xb4>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <GPIO_writePin+0xb0>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	83 c0       	rjmp	.+262    	; 0x1c40 <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if( value == LOGIC_HIGH )
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	a1 f4       	brne	.+40     	; 0x1b68 <GPIO_writePin+0xee>
				SET_BIT( PORTB, pin_num );
    1b40:	a8 e3       	ldi	r26, 0x38	; 56
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e8 e3       	ldi	r30, 0x38	; 56
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <GPIO_writePin+0xe4>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <GPIO_writePin+0xe0>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	6c c0       	rjmp	.+216    	; 0x1c40 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTB, pin_num );
    1b68:	a8 e3       	ldi	r26, 0x38	; 56
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e8 e3       	ldi	r30, 0x38	; 56
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <GPIO_writePin+0x10c>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <GPIO_writePin+0x108>
    1b8a:	80 95       	com	r24
    1b8c:	84 23       	and	r24, r20
    1b8e:	8c 93       	st	X, r24
    1b90:	57 c0       	rjmp	.+174    	; 0x1c40 <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if( value == LOGIC_HIGH )
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	a1 f4       	brne	.+40     	; 0x1bc0 <GPIO_writePin+0x146>
				SET_BIT( PORTC, pin_num );
    1b98:	a5 e3       	ldi	r26, 0x35	; 53
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e5 e3       	ldi	r30, 0x35	; 53
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 2e       	mov	r0, r18
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <GPIO_writePin+0x13c>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	0a 94       	dec	r0
    1bb8:	e2 f7       	brpl	.-8      	; 0x1bb2 <GPIO_writePin+0x138>
    1bba:	84 2b       	or	r24, r20
    1bbc:	8c 93       	st	X, r24
    1bbe:	40 c0       	rjmp	.+128    	; 0x1c40 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTC, pin_num );
    1bc0:	a5 e3       	ldi	r26, 0x35	; 53
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e5 e3       	ldi	r30, 0x35	; 53
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <GPIO_writePin+0x164>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <GPIO_writePin+0x160>
    1be2:	80 95       	com	r24
    1be4:	84 23       	and	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	2b c0       	rjmp	.+86     	; 0x1c40 <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if( value == LOGIC_HIGH )
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	a1 f4       	brne	.+40     	; 0x1c18 <GPIO_writePin+0x19e>
				SET_BIT( PORTD, pin_num );
    1bf0:	a2 e3       	ldi	r26, 0x32	; 50
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e2 e3       	ldi	r30, 0x32	; 50
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <GPIO_writePin+0x194>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <GPIO_writePin+0x190>
    1c12:	84 2b       	or	r24, r20
    1c14:	8c 93       	st	X, r24
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTD, pin_num );
    1c18:	a2 e3       	ldi	r26, 0x32	; 50
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e2 e3       	ldi	r30, 0x32	; 50
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <GPIO_writePin+0x1bc>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <GPIO_writePin+0x1b8>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <GPIO_readPin>:

/*
 * Description: Read a specific pin.
 */
uint8 GPIO_readPin( uint8 port_num, uint8 pin_num )
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_readPin+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <GPIO_readPin+0x8>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
    1c60:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c62:	19 82       	std	Y+1, r1	; 0x01
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	84 30       	cpi	r24, 0x04	; 4
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <GPIO_readPin+0x1c>
    1c6a:	84 c0       	rjmp	.+264    	; 0x1d74 <GPIO_readPin+0x124>
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	88 30       	cpi	r24, 0x08	; 8
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <GPIO_readPin+0x24>
    1c72:	80 c0       	rjmp	.+256    	; 0x1d74 <GPIO_readPin+0x124>
	{

	}
	else
	{
		switch(port_num)
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	3d 83       	std	Y+5, r19	; 0x05
    1c7c:	2c 83       	std	Y+4, r18	; 0x04
    1c7e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c80:	5d 81       	ldd	r21, Y+5	; 0x05
    1c82:	41 30       	cpi	r20, 0x01	; 1
    1c84:	51 05       	cpc	r21, r1
    1c86:	79 f1       	breq	.+94     	; 0x1ce6 <GPIO_readPin+0x96>
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	91 05       	cpc	r25, r1
    1c90:	34 f4       	brge	.+12     	; 0x1c9e <GPIO_readPin+0x4e>
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	21 15       	cp	r18, r1
    1c98:	31 05       	cpc	r19, r1
    1c9a:	69 f0       	breq	.+26     	; 0x1cb6 <GPIO_readPin+0x66>
    1c9c:	6b c0       	rjmp	.+214    	; 0x1d74 <GPIO_readPin+0x124>
    1c9e:	4c 81       	ldd	r20, Y+4	; 0x04
    1ca0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ca2:	42 30       	cpi	r20, 0x02	; 2
    1ca4:	51 05       	cpc	r21, r1
    1ca6:	b9 f1       	breq	.+110    	; 0x1d16 <GPIO_readPin+0xc6>
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	91 05       	cpc	r25, r1
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <GPIO_readPin+0x64>
    1cb2:	49 c0       	rjmp	.+146    	; 0x1d46 <GPIO_readPin+0xf6>
    1cb4:	5f c0       	rjmp	.+190    	; 0x1d74 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if ( BIT_IS_SET( PINA, pin_num ) )
    1cb6:	e9 e3       	ldi	r30, 0x39	; 57
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a9 01       	movw	r20, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <GPIO_readPin+0x7e>
    1cca:	55 95       	asr	r21
    1ccc:	47 95       	ror	r20
    1cce:	8a 95       	dec	r24
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <GPIO_readPin+0x7a>
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	81 70       	andi	r24, 0x01	; 1
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	88 23       	and	r24, r24
    1cda:	19 f0       	breq	.+6      	; 0x1ce2 <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	49 c0       	rjmp	.+146    	; 0x1d74 <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1ce2:	19 82       	std	Y+1, r1	; 0x01
    1ce4:	47 c0       	rjmp	.+142    	; 0x1d74 <GPIO_readPin+0x124>
			break;
		case PORTB_ID:
			if ( BIT_IS_SET( PINB, pin_num ) )
    1ce6:	e6 e3       	ldi	r30, 0x36	; 54
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <GPIO_readPin+0xae>
    1cfa:	55 95       	asr	r21
    1cfc:	47 95       	ror	r20
    1cfe:	8a 95       	dec	r24
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <GPIO_readPin+0xaa>
    1d02:	ca 01       	movw	r24, r20
    1d04:	81 70       	andi	r24, 0x01	; 1
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	88 23       	and	r24, r24
    1d0a:	19 f0       	breq	.+6      	; 0x1d12 <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	31 c0       	rjmp	.+98     	; 0x1d74 <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1d12:	19 82       	std	Y+1, r1	; 0x01
    1d14:	2f c0       	rjmp	.+94     	; 0x1d74 <GPIO_readPin+0x124>
			break;
		case PORTC_ID:
			if ( BIT_IS_SET( PINC, pin_num ) )
    1d16:	e3 e3       	ldi	r30, 0x33	; 51
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a9 01       	movw	r20, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <GPIO_readPin+0xde>
    1d2a:	55 95       	asr	r21
    1d2c:	47 95       	ror	r20
    1d2e:	8a 95       	dec	r24
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <GPIO_readPin+0xda>
    1d32:	ca 01       	movw	r24, r20
    1d34:	81 70       	andi	r24, 0x01	; 1
    1d36:	90 70       	andi	r25, 0x00	; 0
    1d38:	88 23       	and	r24, r24
    1d3a:	19 f0       	breq	.+6      	; 0x1d42 <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	19 c0       	rjmp	.+50     	; 0x1d74 <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1d42:	19 82       	std	Y+1, r1	; 0x01
    1d44:	17 c0       	rjmp	.+46     	; 0x1d74 <GPIO_readPin+0x124>
			break;
		case PORTD_ID:
			if ( BIT_IS_SET( PIND, pin_num ) )
    1d46:	e0 e3       	ldi	r30, 0x30	; 48
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	88 2f       	mov	r24, r24
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	a9 01       	movw	r20, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <GPIO_readPin+0x10e>
    1d5a:	55 95       	asr	r21
    1d5c:	47 95       	ror	r20
    1d5e:	8a 95       	dec	r24
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <GPIO_readPin+0x10a>
    1d62:	ca 01       	movw	r24, r20
    1d64:	81 70       	andi	r24, 0x01	; 1
    1d66:	90 70       	andi	r25, 0x00	; 0
    1d68:	88 23       	and	r24, r24
    1d6a:	19 f0       	breq	.+6      	; 0x1d72 <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1d72:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return pin_value;
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <GPIO_setupPortDirection>:

/*
 * Description: Set the port as input or output.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <GPIO_setupPortDirection+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <GPIO_setupPortDirection+0x8>
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	6a 83       	std	Y+2, r22	; 0x02
	if( port_num >= NUM_OF_PORTS )
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	84 30       	cpi	r24, 0x04	; 4
    1d9a:	90 f5       	brcc	.+100    	; 0x1e00 <GPIO_setupPortDirection+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3c 83       	std	Y+4, r19	; 0x04
    1da4:	2b 83       	std	Y+3, r18	; 0x03
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	d1 f0       	breq	.+52     	; 0x1de4 <GPIO_setupPortDirection+0x5e>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <GPIO_setupPortDirection+0x3e>
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	61 f0       	breq	.+24     	; 0x1dda <GPIO_setupPortDirection+0x54>
    1dc2:	1e c0       	rjmp	.+60     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
    1dc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	81 f0       	breq	.+32     	; 0x1dee <GPIO_setupPortDirection+0x68>
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd2:	83 30       	cpi	r24, 0x03	; 3
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	81 f0       	breq	.+32     	; 0x1df8 <GPIO_setupPortDirection+0x72>
    1dd8:	13 c0       	rjmp	.+38     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dda:	ea e3       	ldi	r30, 0x3A	; 58
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	80 83       	st	Z, r24
    1de2:	0e c0       	rjmp	.+28     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1de4:	e7 e3       	ldi	r30, 0x37	; 55
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	80 83       	st	Z, r24
    1dec:	09 c0       	rjmp	.+18     	; 0x1e00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dee:	e4 e3       	ldi	r30, 0x34	; 52
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 83       	st	Z, r24
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1df8:	e1 e3       	ldi	r30, 0x31	; 49
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <GPIO_writePort>:

/*
 * Description: Write a value to a specific port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <GPIO_writePort+0x6>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <GPIO_writePort+0x8>
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	6a 83       	std	Y+2, r22	; 0x02
	if( port_num >= NUM_OF_PORTS )
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	84 30       	cpi	r24, 0x04	; 4
    1e22:	90 f5       	brcc	.+100    	; 0x1e88 <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch (port_num)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	3c 83       	std	Y+4, r19	; 0x04
    1e2c:	2b 83       	std	Y+3, r18	; 0x03
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	91 05       	cpc	r25, r1
    1e36:	d1 f0       	breq	.+52     	; 0x1e6c <GPIO_writePort+0x5e>
    1e38:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <GPIO_writePort+0x3e>
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	61 f0       	breq	.+24     	; 0x1e62 <GPIO_writePort+0x54>
    1e4a:	1e c0       	rjmp	.+60     	; 0x1e88 <GPIO_writePort+0x7a>
    1e4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <GPIO_writePort+0x68>
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	81 f0       	breq	.+32     	; 0x1e80 <GPIO_writePort+0x72>
    1e60:	13 c0       	rjmp	.+38     	; 0x1e88 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e62:	eb e3       	ldi	r30, 0x3B	; 59
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	80 83       	st	Z, r24
    1e6a:	0e c0       	rjmp	.+28     	; 0x1e88 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e6c:	e8 e3       	ldi	r30, 0x38	; 56
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	80 83       	st	Z, r24
    1e74:	09 c0       	rjmp	.+18     	; 0x1e88 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e76:	e5 e3       	ldi	r30, 0x35	; 53
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	80 83       	st	Z, r24
    1e7e:	04 c0       	rjmp	.+8      	; 0x1e88 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e80:	e2 e3       	ldi	r30, 0x32	; 50
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <GPIO_readPort>:

/*
 * Description: Read a specific port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <GPIO_readPort+0x6>
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <GPIO_readPort+0x8>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
	if( port_num >= NUM_OF_PORTS )
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	90 f5       	brcc	.+100    	; 0x1f10 <GPIO_readPort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3c 83       	std	Y+4, r19	; 0x04
    1eb4:	2b 83       	std	Y+3, r18	; 0x03
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	d1 f0       	breq	.+52     	; 0x1ef4 <GPIO_readPort+0x5e>
    1ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <GPIO_readPort+0x3e>
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	61 f0       	breq	.+24     	; 0x1eea <GPIO_readPort+0x54>
    1ed2:	1e c0       	rjmp	.+60     	; 0x1f10 <GPIO_readPort+0x7a>
    1ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	31 05       	cpc	r19, r1
    1edc:	81 f0       	breq	.+32     	; 0x1efe <GPIO_readPort+0x68>
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	83 30       	cpi	r24, 0x03	; 3
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	81 f0       	breq	.+32     	; 0x1f08 <GPIO_readPort+0x72>
    1ee8:	13 c0       	rjmp	.+38     	; 0x1f10 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA;
    1eea:	e9 e3       	ldi	r30, 0x39	; 57
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	0e c0       	rjmp	.+28     	; 0x1f10 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB;
    1ef4:	e6 e3       	ldi	r30, 0x36	; 54
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	09 c0       	rjmp	.+18     	; 0x1f10 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC;
    1efe:	e3 e3       	ldi	r30, 0x33	; 51
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND;
    1f08:	e0 e3       	ldi	r30, 0x30	; 48
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <TWI_init>:
 * 																	 	  FUNCTIONS
 *
*****************************************************************************************************************************************************/

void TWI_init( const TWI_CongigType *Config_Ptr )
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <TWI_init+0x6>
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the bit rate -> SCL_freq = ( F_CPU / ( 16 + 2*TWBR*( 4^TWPS ) ) ). */
	TWBR = ( Config_Ptr -> bit_rate );
    1f2e:	a0 e2       	ldi	r26, 0x20	; 32
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e9 81       	ldd	r30, Y+1	; 0x01
    1f34:	fa 81       	ldd	r31, Y+2	; 0x02
    1f36:	80 81       	ld	r24, Z
    1f38:	8c 93       	st	X, r24
	TWSR = 0x00;
    1f3a:	e1 e2       	ldi	r30, 0x21	; 33
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	10 82       	st	Z, r1
	/* Enable the TWI. */
	TWCR = ( 1 << TWEN );
    1f40:	e6 e5       	ldi	r30, 0x56	; 86
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	84 e0       	ldi	r24, 0x04	; 4
    1f46:	80 83       	st	Z, r24
	/* Set the address if the master is gonna act like a slave (receives). */
	TWAR = ( ( Config_Ptr -> mc_address ) << 1 );
    1f48:	a2 e2       	ldi	r26, 0x22	; 34
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	88 0f       	add	r24, r24
    1f54:	8c 93       	st	X, r24
	//TWIE = 1;
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <TWI_start>:

void TWI_start( void )
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
	/*
	 * (1) Clear the TWINT flag before sending the start bit.
	 * (2) Send the start bit.
	 * (3) Enable the TWI.
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f68:	e6 e5       	ldi	r30, 0x56	; 86
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	84 ea       	ldi	r24, 0xA4	; 164
    1f6e:	80 83       	st	Z, r24
	/* Check for start condition successful. */
	while( BIT_IS_CLEAR( TWCR, TWINT ) );
    1f70:	e6 e5       	ldi	r30, 0x56	; 86
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	88 23       	and	r24, r24
    1f78:	dc f7       	brge	.-10     	; 0x1f70 <TWI_start+0x10>
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <TWI_stop>:

/* NB: TWI_stop can be neglected. */
void TWI_stop( void )
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	/*
	 * (1) Clear the TWINT flag before sending the stop bit.
	 * (2) Send the stop bit.
	 * (3) Enable the TWI.
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f88:	e6 e5       	ldi	r30, 0x56	; 86
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	84 e9       	ldi	r24, 0x94	; 148
    1f8e:	80 83       	st	Z, r24
	/* Check for stop condition successful. */
	//while( BIT_IS_CLEAR( TWCR, TWINT ) );
}
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <TWI_writeByte>:

void TWI_writeByte( uint8 data )
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	/* Put the data in TWDR register */
	TWDR = data;
    1fa2:	e3 e2       	ldi	r30, 0x23	; 35
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	80 83       	st	Z, r24
	/*
	 * (1) Clear the TWINT flag before sending the data.
	 * (2) Enable the TWI module.
	 */
	TWCR = (1 << TWINT) | (1 << TWEN); //TWWC??
    1faa:	e6 e5       	ldi	r30, 0x56	; 86
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	84 e8       	ldi	r24, 0x84	; 132
    1fb0:	80 83       	st	Z, r24
	/* Check for write condition successful. */
	while( BIT_IS_CLEAR( TWCR, TWINT ) );
    1fb2:	e6 e5       	ldi	r30, 0x56	; 86
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 23       	and	r24, r24
    1fba:	dc f7       	brge	.-10     	; 0x1fb2 <TWI_writeByte+0x1c>
}
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK( void )
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	/*
	 * (1) Clear the TWINT flag before sending the data.
	 * (2) Enable the TWI module.
	 * (3) Enable the ack bit.
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1fcc:	e6 e5       	ldi	r30, 0x56	; 86
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	84 ec       	ldi	r24, 0xC4	; 196
    1fd2:	80 83       	st	Z, r24
	/* Check for read condition successful. */
	while( BIT_IS_CLEAR( TWCR, TWINT ) );
    1fd4:	e6 e5       	ldi	r30, 0x56	; 86
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	88 23       	and	r24, r24
    1fdc:	dc f7       	brge	.-10     	; 0x1fd4 <TWI_readByteWithACK+0x10>
	/* Read the data from TWDR register */
	return TWDR;
    1fde:	e3 e2       	ldi	r30, 0x23	; 35
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK( void )
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN);
    1ff2:	e6 e5       	ldi	r30, 0x56	; 86
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	84 e8       	ldi	r24, 0x84	; 132
    1ff8:	80 83       	st	Z, r24
	while( BIT_IS_CLEAR( TWCR, TWINT ) );
    1ffa:	e6 e5       	ldi	r30, 0x56	; 86
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	88 23       	and	r24, r24
    2002:	dc f7       	brge	.-10     	; 0x1ffa <TWI_readByteWithNACK+0x10>
	return TWDR;
    2004:	e3 e2       	ldi	r30, 0x23	; 35
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <TWI_getStatus>:

uint8 TWI_getStatus( void )
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	0f 92       	push	r0
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    201a:	e1 e2       	ldi	r30, 0x21	; 33
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	88 7f       	andi	r24, 0xF8	; 248
    2022:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
}
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <DcMotor_Init>:

/*
 * Description: Start the motor.
 */
void DcMotor_Init(void)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
	/* Configure the 2 output pins */
	GPIO_setupPinDirection( PORTB_ID, PIN0_ID, PIN_OUTPUT );
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	41 e0       	ldi	r20, 0x01	; 1
    203c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection( PORTB_ID, PIN1_ID, PIN_OUTPUT );
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <GPIO_setupPinDirection>

	/* Motor initial state is STOP. */
	PORTB = ( PORTB & 0xFC ) | STOP;
    204a:	a8 e3       	ldi	r26, 0x38	; 56
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e8 e3       	ldi	r30, 0x38	; 56
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8c 7f       	andi	r24, 0xFC	; 252
    2056:	8c 93       	st	X, r24
}
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <DcMotor_Rotate>:

/*
 * Description: Choose the required speed and direction of rotation.
 */
void DcMotor_Rotate( DcMotor_State state )
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	0f 92       	push	r0
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	89 83       	std	Y+1, r24	; 0x01
	PORTB = ( PORTB & 0xFC ) | state;
    206a:	a8 e3       	ldi	r26, 0x38	; 56
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e8 e3       	ldi	r30, 0x38	; 56
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	98 2f       	mov	r25, r24
    2076:	9c 7f       	andi	r25, 0xFC	; 252
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	89 2b       	or	r24, r25
    207c:	8c 93       	st	X, r24
}
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <__vector_9>:
 *
 ****************************************************************************************************************************************************/

/* Timer0 ISR for the overflow mode */
ISR( TIMER0_OVF_vect )
{
    2086:	1f 92       	push	r1
    2088:	0f 92       	push	r0
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	0f 92       	push	r0
    208e:	11 24       	eor	r1, r1
    2090:	2f 93       	push	r18
    2092:	3f 93       	push	r19
    2094:	4f 93       	push	r20
    2096:	5f 93       	push	r21
    2098:	6f 93       	push	r22
    209a:	7f 93       	push	r23
    209c:	8f 93       	push	r24
    209e:	9f 93       	push	r25
    20a0:	af 93       	push	r26
    20a2:	bf 93       	push	r27
    20a4:	ef 93       	push	r30
    20a6:	ff 93       	push	r31
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_OVF !=  NULL_PTR )
    20b0:	80 91 7a 00 	lds	r24, 0x007A
    20b4:	90 91 7b 00 	lds	r25, 0x007B
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	29 f0       	breq	.+10     	; 0x20c6 <__vector_9+0x40>
	{
		(*TIMER0_OVF)();
    20bc:	e0 91 7a 00 	lds	r30, 0x007A
    20c0:	f0 91 7b 00 	lds	r31, 0x007B
    20c4:	09 95       	icall
	}
}
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	ff 91       	pop	r31
    20cc:	ef 91       	pop	r30
    20ce:	bf 91       	pop	r27
    20d0:	af 91       	pop	r26
    20d2:	9f 91       	pop	r25
    20d4:	8f 91       	pop	r24
    20d6:	7f 91       	pop	r23
    20d8:	6f 91       	pop	r22
    20da:	5f 91       	pop	r21
    20dc:	4f 91       	pop	r20
    20de:	3f 91       	pop	r19
    20e0:	2f 91       	pop	r18
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	0f 90       	pop	r0
    20e8:	1f 90       	pop	r1
    20ea:	18 95       	reti

000020ec <__vector_19>:

/* Timer0 ISR for the compare mode */
ISR( TIMER0_COMP_vect )
{
    20ec:	1f 92       	push	r1
    20ee:	0f 92       	push	r0
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	0f 92       	push	r0
    20f4:	11 24       	eor	r1, r1
    20f6:	2f 93       	push	r18
    20f8:	3f 93       	push	r19
    20fa:	4f 93       	push	r20
    20fc:	5f 93       	push	r21
    20fe:	6f 93       	push	r22
    2100:	7f 93       	push	r23
    2102:	8f 93       	push	r24
    2104:	9f 93       	push	r25
    2106:	af 93       	push	r26
    2108:	bf 93       	push	r27
    210a:	ef 93       	push	r30
    210c:	ff 93       	push	r31
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_COMP !=  NULL_PTR )
    2116:	80 91 78 00 	lds	r24, 0x0078
    211a:	90 91 79 00 	lds	r25, 0x0079
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	29 f0       	breq	.+10     	; 0x212c <__vector_19+0x40>
	{
		(*TIMER0_COMP)();
    2122:	e0 91 78 00 	lds	r30, 0x0078
    2126:	f0 91 79 00 	lds	r31, 0x0079
    212a:	09 95       	icall
	}
}
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	ff 91       	pop	r31
    2132:	ef 91       	pop	r30
    2134:	bf 91       	pop	r27
    2136:	af 91       	pop	r26
    2138:	9f 91       	pop	r25
    213a:	8f 91       	pop	r24
    213c:	7f 91       	pop	r23
    213e:	6f 91       	pop	r22
    2140:	5f 91       	pop	r21
    2142:	4f 91       	pop	r20
    2144:	3f 91       	pop	r19
    2146:	2f 91       	pop	r18
    2148:	0f 90       	pop	r0
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	0f 90       	pop	r0
    214e:	1f 90       	pop	r1
    2150:	18 95       	reti

00002152 <__vector_8>:

/* Timer1 ISR for the overflow mode */
ISR( TIMER1_OVF_vect )
{
    2152:	1f 92       	push	r1
    2154:	0f 92       	push	r0
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	0f 92       	push	r0
    215a:	11 24       	eor	r1, r1
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	if( TIMER1_OVF !=  NULL_PTR )
    217c:	80 91 7e 00 	lds	r24, 0x007E
    2180:	90 91 7f 00 	lds	r25, 0x007F
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	29 f0       	breq	.+10     	; 0x2192 <__vector_8+0x40>
	{
		(*TIMER1_OVF)();
    2188:	e0 91 7e 00 	lds	r30, 0x007E
    218c:	f0 91 7f 00 	lds	r31, 0x007F
    2190:	09 95       	icall
	}
}
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	ff 91       	pop	r31
    2198:	ef 91       	pop	r30
    219a:	bf 91       	pop	r27
    219c:	af 91       	pop	r26
    219e:	9f 91       	pop	r25
    21a0:	8f 91       	pop	r24
    21a2:	7f 91       	pop	r23
    21a4:	6f 91       	pop	r22
    21a6:	5f 91       	pop	r21
    21a8:	4f 91       	pop	r20
    21aa:	3f 91       	pop	r19
    21ac:	2f 91       	pop	r18
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	0f 90       	pop	r0
    21b4:	1f 90       	pop	r1
    21b6:	18 95       	reti

000021b8 <__vector_6>:

/* Timer0 ISR for the compare mode */
ISR( TIMER1_COMPA_vect )
{
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	2f 93       	push	r18
    21c4:	3f 93       	push	r19
    21c6:	4f 93       	push	r20
    21c8:	5f 93       	push	r21
    21ca:	6f 93       	push	r22
    21cc:	7f 93       	push	r23
    21ce:	8f 93       	push	r24
    21d0:	9f 93       	push	r25
    21d2:	af 93       	push	r26
    21d4:	bf 93       	push	r27
    21d6:	ef 93       	push	r30
    21d8:	ff 93       	push	r31
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
	if( TIMER1_COMP !=  NULL_PTR )
    21e2:	80 91 7c 00 	lds	r24, 0x007C
    21e6:	90 91 7d 00 	lds	r25, 0x007D
    21ea:	00 97       	sbiw	r24, 0x00	; 0
    21ec:	29 f0       	breq	.+10     	; 0x21f8 <__vector_6+0x40>
	{
		(*TIMER1_COMP)();
    21ee:	e0 91 7c 00 	lds	r30, 0x007C
    21f2:	f0 91 7d 00 	lds	r31, 0x007D
    21f6:	09 95       	icall
	}
}
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	ff 91       	pop	r31
    21fe:	ef 91       	pop	r30
    2200:	bf 91       	pop	r27
    2202:	af 91       	pop	r26
    2204:	9f 91       	pop	r25
    2206:	8f 91       	pop	r24
    2208:	7f 91       	pop	r23
    220a:	6f 91       	pop	r22
    220c:	5f 91       	pop	r21
    220e:	4f 91       	pop	r20
    2210:	3f 91       	pop	r19
    2212:	2f 91       	pop	r18
    2214:	0f 90       	pop	r0
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	0f 90       	pop	r0
    221a:	1f 90       	pop	r1
    221c:	18 95       	reti

0000221e <__vector_4>:

/* Timer2 ISR for the overflow mode */
ISR( TIMER2_OVF_vect )
{
    221e:	1f 92       	push	r1
    2220:	0f 92       	push	r0
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	0f 92       	push	r0
    2226:	11 24       	eor	r1, r1
    2228:	2f 93       	push	r18
    222a:	3f 93       	push	r19
    222c:	4f 93       	push	r20
    222e:	5f 93       	push	r21
    2230:	6f 93       	push	r22
    2232:	7f 93       	push	r23
    2234:	8f 93       	push	r24
    2236:	9f 93       	push	r25
    2238:	af 93       	push	r26
    223a:	bf 93       	push	r27
    223c:	ef 93       	push	r30
    223e:	ff 93       	push	r31
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
	if( TIMER2_OVF !=  NULL_PTR )
    2248:	80 91 82 00 	lds	r24, 0x0082
    224c:	90 91 83 00 	lds	r25, 0x0083
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	29 f0       	breq	.+10     	; 0x225e <__vector_4+0x40>
	{
		(*TIMER2_OVF)();
    2254:	e0 91 82 00 	lds	r30, 0x0082
    2258:	f0 91 83 00 	lds	r31, 0x0083
    225c:	09 95       	icall
	}
}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	ff 91       	pop	r31
    2264:	ef 91       	pop	r30
    2266:	bf 91       	pop	r27
    2268:	af 91       	pop	r26
    226a:	9f 91       	pop	r25
    226c:	8f 91       	pop	r24
    226e:	7f 91       	pop	r23
    2270:	6f 91       	pop	r22
    2272:	5f 91       	pop	r21
    2274:	4f 91       	pop	r20
    2276:	3f 91       	pop	r19
    2278:	2f 91       	pop	r18
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	0f 90       	pop	r0
    2280:	1f 90       	pop	r1
    2282:	18 95       	reti

00002284 <__vector_3>:

/* Timer2 ISR for the compare mode */
ISR( TIMER2_COMP_vect )
{
    2284:	1f 92       	push	r1
    2286:	0f 92       	push	r0
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	0f 92       	push	r0
    228c:	11 24       	eor	r1, r1
    228e:	2f 93       	push	r18
    2290:	3f 93       	push	r19
    2292:	4f 93       	push	r20
    2294:	5f 93       	push	r21
    2296:	6f 93       	push	r22
    2298:	7f 93       	push	r23
    229a:	8f 93       	push	r24
    229c:	9f 93       	push	r25
    229e:	af 93       	push	r26
    22a0:	bf 93       	push	r27
    22a2:	ef 93       	push	r30
    22a4:	ff 93       	push	r31
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
	if( TIMER2_COMP !=  NULL_PTR )
    22ae:	80 91 80 00 	lds	r24, 0x0080
    22b2:	90 91 81 00 	lds	r25, 0x0081
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	29 f0       	breq	.+10     	; 0x22c4 <__vector_3+0x40>
	{
		(*TIMER2_COMP)();
    22ba:	e0 91 80 00 	lds	r30, 0x0080
    22be:	f0 91 81 00 	lds	r31, 0x0081
    22c2:	09 95       	icall
	}
}
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	ff 91       	pop	r31
    22ca:	ef 91       	pop	r30
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	0f 90       	pop	r0
    22e6:	1f 90       	pop	r1
    22e8:	18 95       	reti

000022ea <TIMER_setCallBack>:
 *
 ****************************************************************************************************************************************************/

/* Function used by the ISR to call the call-back function in main */
void TIMER_setCallBack( void( *Timer_ptr )( void ), Timer_ID id, Timer_Mode mode )
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <TIMER_setCallBack+0x6>
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <TIMER_setCallBack+0x8>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <TIMER_setCallBack+0xa>
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	6b 83       	std	Y+3, r22	; 0x03
    22fe:	4c 83       	std	Y+4, r20	; 0x04
	switch( id )
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	3e 83       	std	Y+6, r19	; 0x06
    2308:	2d 83       	std	Y+5, r18	; 0x05
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	31 f0       	breq	.+12     	; 0x231e <TIMER_setCallBack+0x34>
    2312:	2d 81       	ldd	r18, Y+5	; 0x05
    2314:	3e 81       	ldd	r19, Y+6	; 0x06
    2316:	21 30       	cpi	r18, 0x01	; 1
    2318:	31 05       	cpc	r19, r1
    231a:	a9 f0       	breq	.+42     	; 0x2346 <TIMER_setCallBack+0x5c>
    231c:	27 c0       	rjmp	.+78     	; 0x236c <TIMER_setCallBack+0x82>
	{
	case TIMER0:
		if( mode == NORMAL )
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	88 23       	and	r24, r24
    2322:	39 f4       	brne	.+14     	; 0x2332 <TIMER_setCallBack+0x48>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER0_OVF = Timer_ptr;
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	9a 81       	ldd	r25, Y+2	; 0x02
    2328:	90 93 7b 00 	sts	0x007B, r25
    232c:	80 93 7a 00 	sts	0x007A, r24
    2330:	1d c0       	rjmp	.+58     	; 0x236c <TIMER_setCallBack+0x82>
		}
		else if( mode == COMP )
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	d1 f4       	brne	.+52     	; 0x236c <TIMER_setCallBack+0x82>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER0_COMP = Timer_ptr;
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	9a 81       	ldd	r25, Y+2	; 0x02
    233c:	90 93 79 00 	sts	0x0079, r25
    2340:	80 93 78 00 	sts	0x0078, r24
    2344:	13 c0       	rjmp	.+38     	; 0x236c <TIMER_setCallBack+0x82>
		}
		break;
	case TIMER1:
		if( mode == NORMAL )
    2346:	8c 81       	ldd	r24, Y+4	; 0x04
    2348:	88 23       	and	r24, r24
    234a:	39 f4       	brne	.+14     	; 0x235a <TIMER_setCallBack+0x70>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER1_OVF = Timer_ptr;
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	90 93 7f 00 	sts	0x007F, r25
    2354:	80 93 7e 00 	sts	0x007E, r24
    2358:	09 c0       	rjmp	.+18     	; 0x236c <TIMER_setCallBack+0x82>
		}
		else if( mode == COMP )
    235a:	8c 81       	ldd	r24, Y+4	; 0x04
    235c:	81 30       	cpi	r24, 0x01	; 1
    235e:	31 f4       	brne	.+12     	; 0x236c <TIMER_setCallBack+0x82>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER1_COMP = Timer_ptr;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	90 93 7d 00 	sts	0x007D, r25
    2368:	80 93 7c 00 	sts	0x007C, r24
		}
		break;
	}
	if( ( id ) == TIMER0 )
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	88 23       	and	r24, r24
    2370:	b1 f0       	breq	.+44     	; 0x239e <TIMER_setCallBack+0xb4>
	{

	}
	else if( ( id ) == TIMER2 )
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	82 30       	cpi	r24, 0x02	; 2
    2376:	99 f4       	brne	.+38     	; 0x239e <TIMER_setCallBack+0xb4>
	{
		if( ( mode ) == NORMAL )
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	88 23       	and	r24, r24
    237c:	39 f4       	brne	.+14     	; 0x238c <TIMER_setCallBack+0xa2>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER2_OVF = Timer_ptr;
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	9a 81       	ldd	r25, Y+2	; 0x02
    2382:	90 93 83 00 	sts	0x0083, r25
    2386:	80 93 82 00 	sts	0x0082, r24
    238a:	09 c0       	rjmp	.+18     	; 0x239e <TIMER_setCallBack+0xb4>
		}
		else if( ( mode ) == COMP )
    238c:	8c 81       	ldd	r24, Y+4	; 0x04
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	31 f4       	brne	.+12     	; 0x239e <TIMER_setCallBack+0xb4>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER2_COMP = Timer_ptr;
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	90 93 81 00 	sts	0x0081, r25
    239a:	80 93 80 00 	sts	0x0080, r24
		}
	}
}
    239e:	26 96       	adiw	r28, 0x06	; 6
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <Timer_Init>:
/*
 * Timer0 initial function:
 * NB: Set
 */
void Timer_Init( const Timer_Config *ConfigPtr )
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <Timer_Init+0x6>
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <Timer_Init+0x8>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
	switch( ConfigPtr -> id )
    23c0:	e9 81       	ldd	r30, Y+1	; 0x01
    23c2:	fa 81       	ldd	r31, Y+2	; 0x02
    23c4:	84 81       	ldd	r24, Z+4	; 0x04
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	3c 83       	std	Y+4, r19	; 0x04
    23cc:	2b 83       	std	Y+3, r18	; 0x03
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	9c 81       	ldd	r25, Y+4	; 0x04
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	91 05       	cpc	r25, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <Timer_Init+0x2a>
    23d8:	48 c0       	rjmp	.+144    	; 0x246a <Timer_Init+0xba>
    23da:	2b 81       	ldd	r18, Y+3	; 0x03
    23dc:	3c 81       	ldd	r19, Y+4	; 0x04
    23de:	22 30       	cpi	r18, 0x02	; 2
    23e0:	31 05       	cpc	r19, r1
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <Timer_Init+0x36>
    23e4:	89 c0       	rjmp	.+274    	; 0x24f8 <Timer_Init+0x148>
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <Timer_Init+0x40>
    23ee:	bf c0       	rjmp	.+382    	; 0x256e <Timer_Init+0x1be>
	{
	case TIMER0:
		/* Set Timer initial value */
		TCNT0 = ( ConfigPtr -> init_value );
    23f0:	a2 e5       	ldi	r26, 0x52	; 82
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e9 81       	ldd	r30, Y+1	; 0x01
    23f6:	fa 81       	ldd	r31, Y+2	; 0x02
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * (1) to get normal mode: shift zero for 3 times (do nothing). To get compare mode: shift 1 for 3 times.
		 * (2) Configure the pre-scaler.
		 * (3) Enable FOC0 to choose a non-PWM mode.
		 */
		TCCR0 = ( ( ConfigPtr -> mode ) << 3 ) | ( ConfigPtr -> prescaler ) | ( 1 << FOC0 );
    23fe:	a3 e5       	ldi	r26, 0x53	; 83
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	e9 81       	ldd	r30, Y+1	; 0x01
    2404:	fa 81       	ldd	r31, Y+2	; 0x02
    2406:	80 81       	ld	r24, Z
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	88 0f       	add	r24, r24
    2416:	99 1f       	adc	r25, r25
    2418:	98 2f       	mov	r25, r24
    241a:	e9 81       	ldd	r30, Y+1	; 0x01
    241c:	fa 81       	ldd	r31, Y+2	; 0x02
    241e:	81 81       	ldd	r24, Z+1	; 0x01
    2420:	89 2b       	or	r24, r25
    2422:	80 68       	ori	r24, 0x80	; 128
    2424:	8c 93       	st	X, r24
		if( ( ConfigPtr -> mode ) == NORMAL )
    2426:	e9 81       	ldd	r30, Y+1	; 0x01
    2428:	fa 81       	ldd	r31, Y+2	; 0x02
    242a:	80 81       	ld	r24, Z
    242c:	88 23       	and	r24, r24
    242e:	41 f4       	brne	.+16     	; 0x2440 <Timer_Init+0x90>
		{
			/* Enable Timer0 Overflow Interrupt */
			SET_BIT( TIMSK, TOIE0 );
    2430:	a9 e5       	ldi	r26, 0x59	; 89
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e9 e5       	ldi	r30, 0x59	; 89
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	81 60       	ori	r24, 0x01	; 1
    243c:	8c 93       	st	X, r24
    243e:	97 c0       	rjmp	.+302    	; 0x256e <Timer_Init+0x1be>
		}
		else if( ( ConfigPtr -> mode ) == COMP )
    2440:	e9 81       	ldd	r30, Y+1	; 0x01
    2442:	fa 81       	ldd	r31, Y+2	; 0x02
    2444:	80 81       	ld	r24, Z
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	09 f0       	breq	.+2      	; 0x244c <Timer_Init+0x9c>
    244a:	91 c0       	rjmp	.+290    	; 0x256e <Timer_Init+0x1be>
		{
			/* Enable Timer0 compare Interrupt */
			SET_BIT( TIMSK, OCIE0 );
    244c:	a9 e5       	ldi	r26, 0x59	; 89
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e9 e5       	ldi	r30, 0x59	; 89
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	82 60       	ori	r24, 0x02	; 2
    2458:	8c 93       	st	X, r24
			/* Set Compare Value */
			OCR0  = ( ConfigPtr -> comp_value );
    245a:	ac e5       	ldi	r26, 0x5C	; 92
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e9 81       	ldd	r30, Y+1	; 0x01
    2460:	fa 81       	ldd	r31, Y+2	; 0x02
    2462:	85 81       	ldd	r24, Z+5	; 0x05
    2464:	96 81       	ldd	r25, Z+6	; 0x06
    2466:	8c 93       	st	X, r24
    2468:	82 c0       	rjmp	.+260    	; 0x256e <Timer_Init+0x1be>
		}
		break;
	case TIMER1:
		/* Set Timer initial value */
		TCNT1 = ( ConfigPtr -> init_value );
    246a:	ac e4       	ldi	r26, 0x4C	; 76
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e9 81       	ldd	r30, Y+1	; 0x01
    2470:	fa 81       	ldd	r31, Y+2	; 0x02
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	11 96       	adiw	r26, 0x01	; 1
    2478:	9c 93       	st	X, r25
    247a:	8e 93       	st	-X, r24
		/* Enable FOC1A to choose a non-PWM mode. */
		SET_BIT( TCCR1A, FOC1A );
    247c:	af e4       	ldi	r26, 0x4F	; 79
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ef e4       	ldi	r30, 0x4F	; 79
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	88 60       	ori	r24, 0x08	; 8
    2488:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * (1) to get normal mode: shift zero for 3 times (do nothing). To get compare mode: shift 1 for 3 times.
		 * (2) Configure the pre-scaler.
		 */
		TCCR1B = ( ( ConfigPtr -> mode ) << 3 ) | ( ConfigPtr -> prescaler );
    248a:	ae e4       	ldi	r26, 0x4E	; 78
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	fa 81       	ldd	r31, Y+2	; 0x02
    2492:	80 81       	ld	r24, Z
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	98 2f       	mov	r25, r24
    24a6:	e9 81       	ldd	r30, Y+1	; 0x01
    24a8:	fa 81       	ldd	r31, Y+2	; 0x02
    24aa:	81 81       	ldd	r24, Z+1	; 0x01
    24ac:	89 2b       	or	r24, r25
    24ae:	8c 93       	st	X, r24
		if( ( ConfigPtr -> mode ) == NORMAL )
    24b0:	e9 81       	ldd	r30, Y+1	; 0x01
    24b2:	fa 81       	ldd	r31, Y+2	; 0x02
    24b4:	80 81       	ld	r24, Z
    24b6:	88 23       	and	r24, r24
    24b8:	41 f4       	brne	.+16     	; 0x24ca <Timer_Init+0x11a>
		{
			/* Enable Timer1 Overflow Interrupt */
			SET_BIT( TIMSK, TOIE1 );
    24ba:	a9 e5       	ldi	r26, 0x59	; 89
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e9 e5       	ldi	r30, 0x59	; 89
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	84 60       	ori	r24, 0x04	; 4
    24c6:	8c 93       	st	X, r24
    24c8:	52 c0       	rjmp	.+164    	; 0x256e <Timer_Init+0x1be>
		}
		else if( ( ConfigPtr -> mode ) == COMP )
    24ca:	e9 81       	ldd	r30, Y+1	; 0x01
    24cc:	fa 81       	ldd	r31, Y+2	; 0x02
    24ce:	80 81       	ld	r24, Z
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <Timer_Init+0x126>
    24d4:	4c c0       	rjmp	.+152    	; 0x256e <Timer_Init+0x1be>
		{
			/* Enable Timer1 compare Interrupt */
			SET_BIT( TIMSK, OCIE1A );
    24d6:	a9 e5       	ldi	r26, 0x59	; 89
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e9 e5       	ldi	r30, 0x59	; 89
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	8c 93       	st	X, r24
			/* Set Compare Value */
			OCR1A  = ( ConfigPtr -> comp_value );
    24e4:	aa e4       	ldi	r26, 0x4A	; 74
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ea:	fa 81       	ldd	r31, Y+2	; 0x02
    24ec:	85 81       	ldd	r24, Z+5	; 0x05
    24ee:	96 81       	ldd	r25, Z+6	; 0x06
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	9c 93       	st	X, r25
    24f4:	8e 93       	st	-X, r24
    24f6:	3b c0       	rjmp	.+118    	; 0x256e <Timer_Init+0x1be>
		}
		break;
	case TIMER2:
		/* Set Timer initial value */
		TCNT2 = ( ConfigPtr -> init_value );
    24f8:	a4 e4       	ldi	r26, 0x44	; 68
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e9 81       	ldd	r30, Y+1	; 0x01
    24fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * (1) to get normal mode: shift zero for 3 times (do nothing). To get compare mode: shift 1 for 3 times.
		 * (2) Configure the pre-scaler.
		 * (3) Enable FOC2 to choose a non-PWM mode.
		 */
		TCCR2 = ( ( ConfigPtr -> mode ) << 3 ) | ( ConfigPtr -> prescaler ) | ( 1 << FOC0 );
    2506:	a5 e4       	ldi	r26, 0x45	; 69
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e9 81       	ldd	r30, Y+1	; 0x01
    250c:	fa 81       	ldd	r31, Y+2	; 0x02
    250e:	80 81       	ld	r24, Z
    2510:	88 2f       	mov	r24, r24
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	98 2f       	mov	r25, r24
    2522:	e9 81       	ldd	r30, Y+1	; 0x01
    2524:	fa 81       	ldd	r31, Y+2	; 0x02
    2526:	81 81       	ldd	r24, Z+1	; 0x01
    2528:	89 2b       	or	r24, r25
    252a:	80 68       	ori	r24, 0x80	; 128
    252c:	8c 93       	st	X, r24
		if( ( ConfigPtr -> mode ) == NORMAL )
    252e:	e9 81       	ldd	r30, Y+1	; 0x01
    2530:	fa 81       	ldd	r31, Y+2	; 0x02
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	41 f4       	brne	.+16     	; 0x2548 <Timer_Init+0x198>
		{
			/* Enable Timer0 Overflow Interrupt */
			SET_BIT( TIMSK, TOIE2 );
    2538:	a9 e5       	ldi	r26, 0x59	; 89
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e9 e5       	ldi	r30, 0x59	; 89
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	80 64       	ori	r24, 0x40	; 64
    2544:	8c 93       	st	X, r24
    2546:	13 c0       	rjmp	.+38     	; 0x256e <Timer_Init+0x1be>
		}
		else if( ( ConfigPtr -> mode ) == COMP )
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	80 81       	ld	r24, Z
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	71 f4       	brne	.+28     	; 0x256e <Timer_Init+0x1be>
		{
			/* Enable Timer0 compare Interrupt */
			SET_BIT( TIMSK, OCIE2 );
    2552:	a9 e5       	ldi	r26, 0x59	; 89
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e9 e5       	ldi	r30, 0x59	; 89
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	80 68       	ori	r24, 0x80	; 128
    255e:	8c 93       	st	X, r24
			/* Set Compare Value */
			OCR2  = ( ConfigPtr -> comp_value );
    2560:	a3 e4       	ldi	r26, 0x43	; 67
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e9 81       	ldd	r30, Y+1	; 0x01
    2566:	fa 81       	ldd	r31, Y+2	; 0x02
    2568:	85 81       	ldd	r24, Z+5	; 0x05
    256a:	96 81       	ldd	r25, Z+6	; 0x06
    256c:	8c 93       	st	X, r24
		}
		break;
	}
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <TIMER_intDeInit>:

void TIMER_intDeInit( Timer_ID id )
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <TIMER_intDeInit+0x6>
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	89 83       	std	Y+1, r24	; 0x01
	switch( id )
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	3b 83       	std	Y+3, r19	; 0x03
    2592:	2a 83       	std	Y+2, r18	; 0x02
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	91 05       	cpc	r25, r1
    259c:	89 f0       	breq	.+34     	; 0x25c0 <TIMER_intDeInit+0x44>
    259e:	2a 81       	ldd	r18, Y+2	; 0x02
    25a0:	3b 81       	ldd	r19, Y+3	; 0x03
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	a1 f0       	breq	.+40     	; 0x25d0 <TIMER_intDeInit+0x54>
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	9b 81       	ldd	r25, Y+3	; 0x03
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	b9 f4       	brne	.+46     	; 0x25de <TIMER_intDeInit+0x62>
	{
	case TIMER0:
		/* Clear Timer0 Interrupts */
		TIMSK &= ~( 0x03 );
    25b0:	a9 e5       	ldi	r26, 0x59	; 89
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e9 e5       	ldi	r30, 0x59	; 89
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	8c 7f       	andi	r24, 0xFC	; 252
    25bc:	8c 93       	st	X, r24
    25be:	0f c0       	rjmp	.+30     	; 0x25de <TIMER_intDeInit+0x62>
		break;
	case TIMER1:
		/* Clear Timer0 Overflow Interrupt */
		TIMSK &= ~( 0x3C );
    25c0:	a9 e5       	ldi	r26, 0x59	; 89
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e9 e5       	ldi	r30, 0x59	; 89
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	83 7c       	andi	r24, 0xC3	; 195
    25cc:	8c 93       	st	X, r24
    25ce:	07 c0       	rjmp	.+14     	; 0x25de <TIMER_intDeInit+0x62>
		break;
	case TIMER2:
		/* Clear Timer0 Overflow Interrupt */
		TIMSK &= ~( 0xC0 );
    25d0:	a9 e5       	ldi	r26, 0x59	; 89
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e9 e5       	ldi	r30, 0x59	; 89
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	8f 73       	andi	r24, 0x3F	; 63
    25dc:	8c 93       	st	X, r24
		break;
	}
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <UART_init>:

/*
 * Description: Initialize the UART.
 */
void UART_init( const UART_ConfigType *Config_Ptr )
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <UART_init+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <UART_init+0x8>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0;
    25fa:	1a 82       	std	Y+2, r1	; 0x02
    25fc:	19 82       	std	Y+1, r1	; 0x01
	/* Enable the double transmission speed */
	UCSRA |= ( 1 << U2X );
    25fe:	ab e2       	ldi	r26, 0x2B	; 43
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	eb e2       	ldi	r30, 0x2B	; 43
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	82 60       	ori	r24, 0x02	; 2
    260a:	8c 93       	st	X, r24
	/* Enable the transmitter and receiver */
	UCSRB |= ( 1 << TXEN ) | ( 1 << RXEN );
    260c:	aa e2       	ldi	r26, 0x2A	; 42
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ea e2       	ldi	r30, 0x2A	; 42
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	88 61       	ori	r24, 0x18	; 24
    2618:	8c 93       	st	X, r24
	 * (1) Enable writing in the UCSRC register.
	 * (2) Configure the parity bit (Disable, even, odd).
	 * (3) Configure the stop bits (1 or 2).
	 * (4) Configure the character size.
	 */
	UCSRC |= ( 1 << URSEL ) | ( ( Config_Ptr -> parity ) << 4 ) | ( ( Config_Ptr -> stop ) << 3 ) | ( ( Config_Ptr -> size ) << 1 );
    261a:	a0 e4       	ldi	r26, 0x40	; 64
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e0 e4       	ldi	r30, 0x40	; 64
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	38 2f       	mov	r19, r24
    2626:	eb 81       	ldd	r30, Y+3	; 0x03
    2628:	fc 81       	ldd	r31, Y+4	; 0x04
    262a:	84 81       	ldd	r24, Z+4	; 0x04
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	82 95       	swap	r24
    2632:	92 95       	swap	r25
    2634:	90 7f       	andi	r25, 0xF0	; 240
    2636:	98 27       	eor	r25, r24
    2638:	80 7f       	andi	r24, 0xF0	; 240
    263a:	98 27       	eor	r25, r24
    263c:	28 2f       	mov	r18, r24
    263e:	20 68       	ori	r18, 0x80	; 128
    2640:	eb 81       	ldd	r30, Y+3	; 0x03
    2642:	fc 81       	ldd	r31, Y+4	; 0x04
    2644:	85 81       	ldd	r24, Z+5	; 0x05
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	88 0f       	add	r24, r24
    264c:	99 1f       	adc	r25, r25
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	28 2b       	or	r18, r24
    2658:	eb 81       	ldd	r30, Y+3	; 0x03
    265a:	fc 81       	ldd	r31, Y+4	; 0x04
    265c:	86 81       	ldd	r24, Z+6	; 0x06
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	82 2b       	or	r24, r18
    2668:	83 2b       	or	r24, r19
    266a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value in the double speed mode. */
	UBRR_value = ( uint16 ) ( ( ( F_CPU / ( ( Config_Ptr -> baud_rate ) * 8UL ) ) ) - 1 );
    266c:	eb 81       	ldd	r30, Y+3	; 0x03
    266e:	fc 81       	ldd	r31, Y+4	; 0x04
    2670:	80 81       	ld	r24, Z
    2672:	91 81       	ldd	r25, Z+1	; 0x01
    2674:	a2 81       	ldd	r26, Z+2	; 0x02
    2676:	b3 81       	ldd	r27, Z+3	; 0x03
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	aa 1f       	adc	r26, r26
    267e:	bb 1f       	adc	r27, r27
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	aa 1f       	adc	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	aa 1f       	adc	r26, r26
    268e:	bb 1f       	adc	r27, r27
    2690:	9c 01       	movw	r18, r24
    2692:	ad 01       	movw	r20, r26
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	92 e1       	ldi	r25, 0x12	; 18
    2698:	aa e7       	ldi	r26, 0x7A	; 122
    269a:	b0 e0       	ldi	r27, 0x00	; 0
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__udivmodsi4>
    26a4:	da 01       	movw	r26, r20
    26a6:	c9 01       	movw	r24, r18
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
	/*Assign the UBRR value correctly in the UBRRH and UBRRL registers by adding the 8_LSB to UBRRL and 4-MSB in UBRRH. */
	UBRRL = UBRR_value;
    26ae:	e9 e2       	ldi	r30, 0x29	; 41
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	80 83       	st	Z, r24
	UBRRH = ( UBRR_value >> 4 );
    26b6:	e0 e4       	ldi	r30, 0x40	; 64
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	9a 81       	ldd	r25, Y+2	; 0x02
    26be:	92 95       	swap	r25
    26c0:	82 95       	swap	r24
    26c2:	8f 70       	andi	r24, 0x0F	; 15
    26c4:	89 27       	eor	r24, r25
    26c6:	9f 70       	andi	r25, 0x0F	; 15
    26c8:	89 27       	eor	r24, r25
    26ca:	80 83       	st	Z, r24
}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <UART_sendByte>:

/*
 * Description: Send a byte to the receiver.
 */
void UART_sendByte( const uint8 data )
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the UDR register is empty (the receiver have received the data). */
	while( BIT_IS_CLEAR( UCSRA, UDRE ) );
    26e6:	eb e2       	ldi	r30, 0x2B	; 43
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	80 72       	andi	r24, 0x20	; 32
    26f2:	90 70       	andi	r25, 0x00	; 0
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	b9 f3       	breq	.-18     	; 0x26e6 <UART_sendByte+0xc>
	/* Send the data to the UDRR register to get read by the receiver. */
	UDR = data;
    26f8:	ec e2       	ldi	r30, 0x2C	; 44
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	80 83       	st	Z, r24
}
    2700:	0f 90       	pop	r0
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <UART_receiveByte>:

/*
 * Description: Receive a byte from the transmitter.
 */
uint8 UART_receiveByte( void )
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
	/* This flag is set, when there is data to be received. */
	while( BIT_IS_CLEAR( UCSRA, RXC ) );
    2710:	eb e2       	ldi	r30, 0x2B	; 43
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	88 23       	and	r24, r24
    2718:	dc f7       	brge	.-10     	; 0x2710 <UART_receiveByte+0x8>
	/* Read the UDR data. The RXC flag is cleared automatically */
	return UDR;
    271a:	ec e2       	ldi	r30, 0x2C	; 44
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
}
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <UART_sendString>:

/*
 * Description: Send a string to the receiver.
 */
void UART_sendString( const uint8 *Str )
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	00 d0       	rcall	.+0      	; 0x272c <UART_sendString+0x6>
    272c:	0f 92       	push	r0
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	9b 83       	std	Y+3, r25	; 0x03
    2734:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2736:	19 82       	std	Y+1, r1	; 0x01
    2738:	0e c0       	rjmp	.+28     	; 0x2756 <UART_sendString+0x30>
	/* Send the whole string */
	while ( Str[i] != '\0' )
	{
	UART_sendByte( Str[i] );
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	fc 01       	movw	r30, r24
    2746:	e2 0f       	add	r30, r18
    2748:	f3 1f       	adc	r31, r19
    274a:	80 81       	ld	r24, Z
    274c:	0e 94 6d 13 	call	0x26da	; 0x26da <UART_sendByte>
	i++;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	8f 5f       	subi	r24, 0xFF	; 255
    2754:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString( const uint8 *Str )
{
	uint8 i = 0;
	/* Send the whole string */
	while ( Str[i] != '\0' )
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	9b 81       	ldd	r25, Y+3	; 0x03
    2760:	fc 01       	movw	r30, r24
    2762:	e2 0f       	add	r30, r18
    2764:	f3 1f       	adc	r31, r19
    2766:	80 81       	ld	r24, Z
    2768:	88 23       	and	r24, r24
    276a:	39 f7       	brne	.-50     	; 0x273a <UART_sendString+0x14>
	{
	UART_sendByte( Str[i] );
	i++;
	}
}
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <UART_receiveString>:

/*
 * Description: Receive a string from the transmitter.
 */
void UART_receiveString( uint8 *Str )
{
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	00 d0       	rcall	.+0      	; 0x2782 <UART_receiveString+0xa>
    2782:	0f 92       	push	r0
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	9b 83       	std	Y+3, r25	; 0x03
    278a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    278c:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte to save time if we have only 1 character*/
	Str[i] = UART_receiveByte;
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	28 2f       	mov	r18, r24
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	9b 81       	ldd	r25, Y+3	; 0x03
    2798:	fc 01       	movw	r30, r24
    279a:	e2 0f       	add	r30, r18
    279c:	f3 1f       	adc	r31, r19
    279e:	84 e8       	ldi	r24, 0x84	; 132
    27a0:	93 e1       	ldi	r25, 0x13	; 19
    27a2:	80 83       	st	Z, r24
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <UART_receiveString+0x4c>
	/* Receive the whole string until '#' */
	while(Str[i] != '#')
	{
		i++;
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	28 2f       	mov	r18, r24
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	9b 81       	ldd	r25, Y+3	; 0x03
    27b6:	8c 01       	movw	r16, r24
    27b8:	02 0f       	add	r16, r18
    27ba:	13 1f       	adc	r17, r19
    27bc:	0e 94 84 13 	call	0x2708	; 0x2708 <UART_receiveByte>
    27c0:	f8 01       	movw	r30, r16
    27c2:	80 83       	st	Z, r24
{
	uint8 i = 0;
	/* Receive the first byte to save time if we have only 1 character*/
	Str[i] = UART_receiveByte;
	/* Receive the whole string until '#' */
	while(Str[i] != '#')
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	28 2f       	mov	r18, r24
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	9b 81       	ldd	r25, Y+3	; 0x03
    27ce:	fc 01       	movw	r30, r24
    27d0:	e2 0f       	add	r30, r18
    27d2:	f3 1f       	adc	r31, r19
    27d4:	80 81       	ld	r24, Z
    27d6:	83 32       	cpi	r24, 0x23	; 35
    27d8:	31 f7       	brne	.-52     	; 0x27a6 <UART_receiveString+0x2e>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	/* After receiving the whole string, replace the extra '#' by null */
	Str[i] = '\0';
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	9b 81       	ldd	r25, Y+3	; 0x03
    27e4:	fc 01       	movw	r30, r24
    27e6:	e2 0f       	add	r30, r18
    27e8:	f3 1f       	adc	r31, r19
    27ea:	10 82       	st	Z, r1
}
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	08 95       	ret

000027fc <__udivmodsi4>:
    27fc:	a1 e2       	ldi	r26, 0x21	; 33
    27fe:	1a 2e       	mov	r1, r26
    2800:	aa 1b       	sub	r26, r26
    2802:	bb 1b       	sub	r27, r27
    2804:	fd 01       	movw	r30, r26
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <__udivmodsi4_ep>

00002808 <__udivmodsi4_loop>:
    2808:	aa 1f       	adc	r26, r26
    280a:	bb 1f       	adc	r27, r27
    280c:	ee 1f       	adc	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	a2 17       	cp	r26, r18
    2812:	b3 07       	cpc	r27, r19
    2814:	e4 07       	cpc	r30, r20
    2816:	f5 07       	cpc	r31, r21
    2818:	20 f0       	brcs	.+8      	; 0x2822 <__udivmodsi4_ep>
    281a:	a2 1b       	sub	r26, r18
    281c:	b3 0b       	sbc	r27, r19
    281e:	e4 0b       	sbc	r30, r20
    2820:	f5 0b       	sbc	r31, r21

00002822 <__udivmodsi4_ep>:
    2822:	66 1f       	adc	r22, r22
    2824:	77 1f       	adc	r23, r23
    2826:	88 1f       	adc	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	1a 94       	dec	r1
    282c:	69 f7       	brne	.-38     	; 0x2808 <__udivmodsi4_loop>
    282e:	60 95       	com	r22
    2830:	70 95       	com	r23
    2832:	80 95       	com	r24
    2834:	90 95       	com	r25
    2836:	9b 01       	movw	r18, r22
    2838:	ac 01       	movw	r20, r24
    283a:	bd 01       	movw	r22, r26
    283c:	cf 01       	movw	r24, r30
    283e:	08 95       	ret

00002840 <__prologue_saves__>:
    2840:	2f 92       	push	r2
    2842:	3f 92       	push	r3
    2844:	4f 92       	push	r4
    2846:	5f 92       	push	r5
    2848:	6f 92       	push	r6
    284a:	7f 92       	push	r7
    284c:	8f 92       	push	r8
    284e:	9f 92       	push	r9
    2850:	af 92       	push	r10
    2852:	bf 92       	push	r11
    2854:	cf 92       	push	r12
    2856:	df 92       	push	r13
    2858:	ef 92       	push	r14
    285a:	ff 92       	push	r15
    285c:	0f 93       	push	r16
    285e:	1f 93       	push	r17
    2860:	cf 93       	push	r28
    2862:	df 93       	push	r29
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	ca 1b       	sub	r28, r26
    286a:	db 0b       	sbc	r29, r27
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	09 94       	ijmp

00002878 <__epilogue_restores__>:
    2878:	2a 88       	ldd	r2, Y+18	; 0x12
    287a:	39 88       	ldd	r3, Y+17	; 0x11
    287c:	48 88       	ldd	r4, Y+16	; 0x10
    287e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2880:	6e 84       	ldd	r6, Y+14	; 0x0e
    2882:	7d 84       	ldd	r7, Y+13	; 0x0d
    2884:	8c 84       	ldd	r8, Y+12	; 0x0c
    2886:	9b 84       	ldd	r9, Y+11	; 0x0b
    2888:	aa 84       	ldd	r10, Y+10	; 0x0a
    288a:	b9 84       	ldd	r11, Y+9	; 0x09
    288c:	c8 84       	ldd	r12, Y+8	; 0x08
    288e:	df 80       	ldd	r13, Y+7	; 0x07
    2890:	ee 80       	ldd	r14, Y+6	; 0x06
    2892:	fd 80       	ldd	r15, Y+5	; 0x05
    2894:	0c 81       	ldd	r16, Y+4	; 0x04
    2896:	1b 81       	ldd	r17, Y+3	; 0x03
    2898:	aa 81       	ldd	r26, Y+2	; 0x02
    289a:	b9 81       	ldd	r27, Y+1	; 0x01
    289c:	ce 0f       	add	r28, r30
    289e:	d1 1d       	adc	r29, r1
    28a0:	0f b6       	in	r0, 0x3f	; 63
    28a2:	f8 94       	cli
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	0f be       	out	0x3f, r0	; 63
    28a8:	cd bf       	out	0x3d, r28	; 61
    28aa:	ed 01       	movw	r28, r26
    28ac:	08 95       	ret

000028ae <_exit>:
    28ae:	f8 94       	cli

000028b0 <__stop_program>:
    28b0:	ff cf       	rjmp	.-2      	; 0x28b0 <__stop_program>
