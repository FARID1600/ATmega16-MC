
MC_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000341a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  0000341a  000034ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800144  00800144  00003592  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000147c  00000000  00000000  0000663c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b64c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c207  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__vector_3>
      10:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__vector_8>
      24:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 35       	cpi	r26, 0x53	; 83
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 09 	call	0x123a	; 0x123a <main>
      8a:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e2       	ldi	r26, 0x2D	; 45
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e2       	ldi	r24, 0x2D	; 45
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b7 19 	jmp	0x336e	; 0x336e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Check_Pass>:

/*
 * Description: Function used to check that the entered password matches the saved one.
 */
uint8 Check_Pass( uint8 *pass, uint8 state )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	62 97       	sbiw	r28, 0x12	; 18
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	99 8b       	std	Y+17, r25	; 0x11
     b5c:	88 8b       	std	Y+16, r24	; 0x10
     b5e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 pass_check;
	LCD_clearScreen();
     b60:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
	if( state == ENTERING )
     b64:	8a 89       	ldd	r24, Y+18	; 0x12
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	41 f4       	brne	.+16     	; 0xb7a <Check_Pass+0x34>
	{
		clear_display = 1;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	80 93 44 01 	sts	0x0144, r24
		LCD_displayString( "Enter password" );
     b70:	80 e6       	ldi	r24, 0x60	; 96
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
     b78:	07 c0       	rjmp	.+14     	; 0xb88 <Check_Pass+0x42>
	}
	else
	{
		clear_display = 2;
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	80 93 44 01 	sts	0x0144, r24
		LCD_displayString( "Old password" );
     b80:	8f e6       	ldi	r24, 0x6F	; 111
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	}
	LCD_moveCursor( 2, 0 );
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a8 ec       	ldi	r26, 0xC8	; 200
     b96:	b3 e4       	ldi	r27, 0x43	; 67
     b98:	8b 87       	std	Y+11, r24	; 0x0b
     b9a:	9c 87       	std	Y+12, r25	; 0x0c
     b9c:	ad 87       	std	Y+13, r26	; 0x0d
     b9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	4a ef       	ldi	r20, 0xFA	; 250
     bae:	54 e4       	ldi	r21, 0x44	; 68
     bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	8f 83       	std	Y+7, r24	; 0x07
     bba:	98 87       	std	Y+8, r25	; 0x08
     bbc:	a9 87       	std	Y+9, r26	; 0x09
     bbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc0:	6f 81       	ldd	r22, Y+7	; 0x07
     bc2:	78 85       	ldd	r23, Y+8	; 0x08
     bc4:	89 85       	ldd	r24, Y+9	; 0x09
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e8       	ldi	r20, 0x80	; 128
     bce:	5f e3       	ldi	r21, 0x3F	; 63
     bd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	2c f4       	brge	.+10     	; 0xbe2 <Check_Pass+0x9c>
		__ticks = 1;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	9e 83       	std	Y+6, r25	; 0x06
     bde:	8d 83       	std	Y+5, r24	; 0x05
     be0:	3f c0       	rjmp	.+126    	; 0xc60 <Check_Pass+0x11a>
	else if (__tmp > 65535)
     be2:	6f 81       	ldd	r22, Y+7	; 0x07
     be4:	78 85       	ldd	r23, Y+8	; 0x08
     be6:	89 85       	ldd	r24, Y+9	; 0x09
     be8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	3f ef       	ldi	r19, 0xFF	; 255
     bee:	4f e7       	ldi	r20, 0x7F	; 127
     bf0:	57 e4       	ldi	r21, 0x47	; 71
     bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf6:	18 16       	cp	r1, r24
     bf8:	4c f5       	brge	.+82     	; 0xc4c <Check_Pass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	9e 83       	std	Y+6, r25	; 0x06
     c20:	8d 83       	std	Y+5, r24	; 0x05
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <Check_Pass+0xfc>
     c24:	88 ec       	ldi	r24, 0xC8	; 200
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <Check_Pass+0xea>
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	69 f7       	brne	.-38     	; 0xc24 <Check_Pass+0xde>
     c4a:	14 c0       	rjmp	.+40     	; 0xc74 <Check_Pass+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4c:	6f 81       	ldd	r22, Y+7	; 0x07
     c4e:	78 85       	ldd	r23, Y+8	; 0x08
     c50:	89 85       	ldd	r24, Y+9	; 0x09
     c52:	9a 85       	ldd	r25, Y+10	; 0x0a
     c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	8d 83       	std	Y+5, r24	; 0x05
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <Check_Pass+0x126>
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01

	/* for not to display a minus or plus by mistake (The Enter_pass function asks for an input, so it may read my hold to '-' without a delay). */
	_delay_ms(400);
	/* Enter the old password */
	Enter_Pass( pass );
     c74:	88 89       	ldd	r24, Y+16	; 0x10
     c76:	99 89       	ldd	r25, Y+17	; 0x11
     c78:	0e 94 b0 07 	call	0xf60	; 0xf60 <Enter_Pass>
	/* Send the password to the second MC to compare it to that saved in its EEPROM. */
	Send_PassToMC2( pass );
     c7c:	88 89       	ldd	r24, Y+16	; 0x10
     c7e:	99 89       	ldd	r25, Y+17	; 0x11
     c80:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Send_PassToMC2>
	/* Find whether the 2 passwords match or not. */
	pass_check = UART_receiveByte();
     c84:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <UART_receiveByte>
     c88:	8f 87       	std	Y+15, r24	; 0x0f
	return pass_check;
     c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     c8c:	62 96       	adiw	r28, 0x12	; 18
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <Send_PassToMC2>:

/*
 * Description: Function used to send the password to the second MC, to save or to check.
 */
void Send_PassToMC2( uint8 *pass )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	61 97       	sbiw	r28, 0x11	; 17
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	99 8b       	std	Y+17, r25	; 0x11
     cb4:	88 8b       	std	Y+16, r24	; 0x10
	uint8 pass_iterator = 0;
     cb6:	1f 86       	std	Y+15, r1	; 0x0f
	for( pass_iterator = 0; pass_iterator < 5; pass_iterator++ )
     cb8:	1f 86       	std	Y+15, r1	; 0x0f
     cba:	80 c0       	rjmp	.+256    	; 0xdbc <Send_PassToMC2+0x11e>
	{
		UART_sendByte( pass[ pass_iterator ] );
     cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	88 89       	ldd	r24, Y+16	; 0x10
     cc4:	99 89       	ldd	r25, Y+17	; 0x11
     cc6:	fc 01       	movw	r30, r24
     cc8:	e2 0f       	add	r30, r18
     cca:	f3 1f       	adc	r31, r19
     ccc:	80 81       	ld	r24, Z
     cce:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <UART_sendByte>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	a0 e2       	ldi	r26, 0x20	; 32
     cd8:	b1 e4       	ldi	r27, 0x41	; 65
     cda:	8b 87       	std	Y+11, r24	; 0x0b
     cdc:	9c 87       	std	Y+12, r25	; 0x0c
     cde:	ad 87       	std	Y+13, r26	; 0x0d
     ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	4a ef       	ldi	r20, 0xFA	; 250
     cf0:	54 e4       	ldi	r21, 0x44	; 68
     cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	8f 83       	std	Y+7, r24	; 0x07
     cfc:	98 87       	std	Y+8, r25	; 0x08
     cfe:	a9 87       	std	Y+9, r26	; 0x09
     d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d02:	6f 81       	ldd	r22, Y+7	; 0x07
     d04:	78 85       	ldd	r23, Y+8	; 0x08
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e8       	ldi	r20, 0x80	; 128
     d10:	5f e3       	ldi	r21, 0x3F	; 63
     d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d16:	88 23       	and	r24, r24
     d18:	2c f4       	brge	.+10     	; 0xd24 <Send_PassToMC2+0x86>
		__ticks = 1;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9e 83       	std	Y+6, r25	; 0x06
     d20:	8d 83       	std	Y+5, r24	; 0x05
     d22:	3f c0       	rjmp	.+126    	; 0xda2 <Send_PassToMC2+0x104>
	else if (__tmp > 65535)
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	78 85       	ldd	r23, Y+8	; 0x08
     d28:	89 85       	ldd	r24, Y+9	; 0x09
     d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d38:	18 16       	cp	r1, r24
     d3a:	4c f5       	brge	.+82     	; 0xd8e <Send_PassToMC2+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d40:	8d 85       	ldd	r24, Y+13	; 0x0d
     d42:	9e 85       	ldd	r25, Y+14	; 0x0e
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e2       	ldi	r20, 0x20	; 32
     d4a:	51 e4       	ldi	r21, 0x41	; 65
     d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	bc 01       	movw	r22, r24
     d56:	cd 01       	movw	r24, r26
     d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	0f c0       	rjmp	.+30     	; 0xd84 <Send_PassToMC2+0xe6>
     d66:	88 ec       	ldi	r24, 0xC8	; 200
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	9c 83       	std	Y+4, r25	; 0x04
     d6c:	8b 83       	std	Y+3, r24	; 0x03
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <Send_PassToMC2+0xd4>
     d76:	9c 83       	std	Y+4, r25	; 0x04
     d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7a:	8d 81       	ldd	r24, Y+5	; 0x05
     d7c:	9e 81       	ldd	r25, Y+6	; 0x06
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	69 f7       	brne	.-38     	; 0xd66 <Send_PassToMC2+0xc8>
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <Send_PassToMC2+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	8d 83       	std	Y+5, r24	; 0x05
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	f1 f7       	brne	.-4      	; 0xdae <Send_PassToMC2+0x110>
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	89 83       	std	Y+1, r24	; 0x01
 * Description: Function used to send the password to the second MC, to save or to check.
 */
void Send_PassToMC2( uint8 *pass )
{
	uint8 pass_iterator = 0;
	for( pass_iterator = 0; pass_iterator < 5; pass_iterator++ )
     db6:	8f 85       	ldd	r24, Y+15	; 0x0f
     db8:	8f 5f       	subi	r24, 0xFF	; 255
     dba:	8f 87       	std	Y+15, r24	; 0x0f
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	85 30       	cpi	r24, 0x05	; 5
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <Send_PassToMC2+0x126>
     dc2:	7c cf       	rjmp	.-264    	; 0xcbc <Send_PassToMC2+0x1e>
	{
		UART_sendByte( pass[ pass_iterator ] );
		_delay_ms(10);
	}
}
     dc4:	61 96       	adiw	r28, 0x11	; 17
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <Create_Pass>:

/*
 * Description: Function used to create a new password.
 */
void Create_Pass( uint8 *pass, uint8 *Success )
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	62 97       	sbiw	r28, 0x12	; 18
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	98 8b       	std	Y+16, r25	; 0x10
     dec:	8f 87       	std	Y+15, r24	; 0x0f
     dee:	7a 8b       	std	Y+18, r23	; 0x12
     df0:	69 8b       	std	Y+17, r22	; 0x11
	LCD_clearScreen();
     df2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
	LCD_displayString( "Enter a password" );
     df6:	8c e7       	ldi	r24, 0x7C	; 124
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	/* Function to store the password in the string, keypad_press. */
	Enter_Pass( pass );
     dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     e00:	98 89       	ldd	r25, Y+16	; 0x10
     e02:	0e 94 b0 07 	call	0xf60	; 0xf60 <Enter_Pass>
	/* Send the password to compare with the next one. */
	Send_PassToMC2( pass );
     e06:	8f 85       	ldd	r24, Y+15	; 0x0f
     e08:	98 89       	ldd	r25, Y+16	; 0x10
     e0a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Send_PassToMC2>

	LCD_clearScreen();
     e0e:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>

	LCD_displayString( "Confirm password" );
     e12:	8d e8       	ldi	r24, 0x8D	; 141
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
	Enter_Pass( pass );
     e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1c:	98 89       	ldd	r25, Y+16	; 0x10
     e1e:	0e 94 b0 07 	call	0xf60	; 0xf60 <Enter_Pass>
	/* Send the password to compare with the previous one. */
	Send_PassToMC2( pass );
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	98 89       	ldd	r25, Y+16	; 0x10
     e26:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Send_PassToMC2>

	/* Receive the comparing result from the other MC */
	*Success = UART_receiveByte();
     e2a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <UART_receiveByte>
     e2e:	e9 89       	ldd	r30, Y+17	; 0x11
     e30:	fa 89       	ldd	r31, Y+18	; 0x12
     e32:	80 83       	st	Z, r24
	/* If the 2-passwords match. */
	if( *Success == MATCH_COMPLETE )
     e34:	e9 89       	ldd	r30, Y+17	; 0x11
     e36:	fa 89       	ldd	r31, Y+18	; 0x12
     e38:	80 81       	ld	r24, Z
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	59 f4       	brne	.+22     	; 0xe54 <Create_Pass+0x7e>
	{
		LCD_clearScreen();
     e3e:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
		/* Used to skip the while loop of the password creation. */
		*Success = MATCH_COMPLETE;
     e42:	e9 89       	ldd	r30, Y+17	; 0x11
     e44:	fa 89       	ldd	r31, Y+18	; 0x12
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 83       	st	Z, r24
		LCD_displayString( "Matching success" );
     e4a:	8e e9       	ldi	r24, 0x9E	; 158
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
     e52:	0b c0       	rjmp	.+22     	; 0xe6a <Create_Pass+0x94>
	}
	else if ( *Success == MISS_MATCH )
     e54:	e9 89       	ldd	r30, Y+17	; 0x11
     e56:	fa 89       	ldd	r31, Y+18	; 0x12
     e58:	80 81       	ld	r24, Z
     e5a:	88 23       	and	r24, r24
     e5c:	31 f4       	brne	.+12     	; 0xe6a <Create_Pass+0x94>
	{
		LCD_clearScreen();
     e5e:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
		LCD_displayString( "Matching failed" );
     e62:	8f ea       	ldi	r24, 0xAF	; 175
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	aa ef       	ldi	r26, 0xFA	; 250
     e70:	b4 e4       	ldi	r27, 0x44	; 68
     e72:	8b 87       	std	Y+11, r24	; 0x0b
     e74:	9c 87       	std	Y+12, r25	; 0x0c
     e76:	ad 87       	std	Y+13, r26	; 0x0d
     e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8f 83       	std	Y+7, r24	; 0x07
     e94:	98 87       	std	Y+8, r25	; 0x08
     e96:	a9 87       	std	Y+9, r26	; 0x09
     e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <Create_Pass+0xe6>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <Create_Pass+0x164>
	else if (__tmp > 65535)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <Create_Pass+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <Create_Pass+0x146>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <Create_Pass+0x134>
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <Create_Pass+0x128>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <Create_Pass+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <Create_Pass+0x170>
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(2000);
}
     f4e:	62 96       	adiw	r28, 0x12	; 18
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <Enter_Pass>:

/*
 * Description: Function used to get the password from the user.
 */
void Enter_Pass( uint8 *pass )
{
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
     f6c:	6f 97       	sbiw	r28, 0x1f	; 31
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	9f 8f       	std	Y+31, r25	; 0x1f
     f7a:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 pass_iterator = 0;
     f7c:	1d 8e       	std	Y+29, r1	; 0x1d
	/* pass_iterator<6 not 5 to check in the fifth digit if the user wants to clear the password */
	for( pass_iterator = 0; pass_iterator < 5; pass_iterator++ )
     f7e:	1d 8e       	std	Y+29, r1	; 0x1d
     f80:	c4 c0       	rjmp	.+392    	; 0x110a <Enter_Pass+0x1aa>
	{
		do{
			pass[ pass_iterator ] = KEYPAD_getPressedKey();
     f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f8c:	8c 01       	movw	r16, r24
     f8e:	02 0f       	add	r16, r18
     f90:	13 1f       	adc	r17, r19
     f92:	0e 94 05 10 	call	0x200a	; 0x200a <KEYPAD_getPressedKey>
     f96:	f8 01       	movw	r30, r16
     f98:	80 83       	st	Z, r24
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	a8 ec       	ldi	r26, 0xC8	; 200
     fa0:	b3 e4       	ldi	r27, 0x43	; 67
     fa2:	89 8f       	std	Y+25, r24	; 0x19
     fa4:	9a 8f       	std	Y+26, r25	; 0x1a
     fa6:	ab 8f       	std	Y+27, r26	; 0x1b
     fa8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     faa:	69 8d       	ldd	r22, Y+25	; 0x19
     fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	4a ef       	ldi	r20, 0xFA	; 250
     fb8:	54 e4       	ldi	r21, 0x44	; 68
     fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	8d 8b       	std	Y+21, r24	; 0x15
     fc4:	9e 8b       	std	Y+22, r25	; 0x16
     fc6:	af 8b       	std	Y+23, r26	; 0x17
     fc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fca:	6d 89       	ldd	r22, Y+21	; 0x15
     fcc:	7e 89       	ldd	r23, Y+22	; 0x16
     fce:	8f 89       	ldd	r24, Y+23	; 0x17
     fd0:	98 8d       	ldd	r25, Y+24	; 0x18
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e8       	ldi	r20, 0x80	; 128
     fd8:	5f e3       	ldi	r21, 0x3F	; 63
     fda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fde:	88 23       	and	r24, r24
     fe0:	2c f4       	brge	.+10     	; 0xfec <Enter_Pass+0x8c>
		__ticks = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9c 8b       	std	Y+20, r25	; 0x14
     fe8:	8b 8b       	std	Y+19, r24	; 0x13
     fea:	3f c0       	rjmp	.+126    	; 0x106a <Enter_Pass+0x10a>
	else if (__tmp > 65535)
     fec:	6d 89       	ldd	r22, Y+21	; 0x15
     fee:	7e 89       	ldd	r23, Y+22	; 0x16
     ff0:	8f 89       	ldd	r24, Y+23	; 0x17
     ff2:	98 8d       	ldd	r25, Y+24	; 0x18
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1000:	18 16       	cp	r1, r24
    1002:	4c f5       	brge	.+82     	; 0x1056 <Enter_Pass+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1004:	69 8d       	ldd	r22, Y+25	; 0x19
    1006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    100a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e2       	ldi	r20, 0x20	; 32
    1012:	51 e4       	ldi	r21, 0x41	; 65
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	9c 8b       	std	Y+20, r25	; 0x14
    102a:	8b 8b       	std	Y+19, r24	; 0x13
    102c:	0f c0       	rjmp	.+30     	; 0x104c <Enter_Pass+0xec>
    102e:	88 ec       	ldi	r24, 0xC8	; 200
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	9a 8b       	std	Y+18, r25	; 0x12
    1034:	89 8b       	std	Y+17, r24	; 0x11
    1036:	89 89       	ldd	r24, Y+17	; 0x11
    1038:	9a 89       	ldd	r25, Y+18	; 0x12
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <Enter_Pass+0xda>
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1042:	8b 89       	ldd	r24, Y+19	; 0x13
    1044:	9c 89       	ldd	r25, Y+20	; 0x14
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	9c 8b       	std	Y+20, r25	; 0x14
    104a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104c:	8b 89       	ldd	r24, Y+19	; 0x13
    104e:	9c 89       	ldd	r25, Y+20	; 0x14
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	69 f7       	brne	.-38     	; 0x102e <Enter_Pass+0xce>
    1054:	14 c0       	rjmp	.+40     	; 0x107e <Enter_Pass+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1056:	6d 89       	ldd	r22, Y+21	; 0x15
    1058:	7e 89       	ldd	r23, Y+22	; 0x16
    105a:	8f 89       	ldd	r24, Y+23	; 0x17
    105c:	98 8d       	ldd	r25, Y+24	; 0x18
    105e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9c 8b       	std	Y+20, r25	; 0x14
    1068:	8b 8b       	std	Y+19, r24	; 0x13
    106a:	8b 89       	ldd	r24, Y+19	; 0x13
    106c:	9c 89       	ldd	r25, Y+20	; 0x14
    106e:	98 8b       	std	Y+16, r25	; 0x10
    1070:	8f 87       	std	Y+15, r24	; 0x0f
    1072:	8f 85       	ldd	r24, Y+15	; 0x0f
    1074:	98 89       	ldd	r25, Y+16	; 0x10
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <Enter_Pass+0x116>
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
			/* This delay is used to display each half second only */
			_delay_ms(400);
			/* If ON/C button is pressed, clear the screen */
			if( pass[ pass_iterator ] == 13 /* ASCII of ON/C button */ )
    107e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1088:	fc 01       	movw	r30, r24
    108a:	e2 0f       	add	r30, r18
    108c:	f3 1f       	adc	r31, r19
    108e:	80 81       	ld	r24, Z
    1090:	8d 30       	cpi	r24, 0x0D	; 13
    1092:	49 f5       	brne	.+82     	; 0x10e6 <Enter_Pass+0x186>
			{
				LCD_clearScreen();
    1094:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
				if( clear_display == 0 )
    1098:	80 91 44 01 	lds	r24, 0x0144
    109c:	88 23       	and	r24, r24
    109e:	29 f4       	brne	.+10     	; 0x10aa <Enter_Pass+0x14a>
					LCD_displayString( "Enter a password" );
    10a0:	8c e7       	ldi	r24, 0x7C	; 124
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
    10a8:	19 c0       	rjmp	.+50     	; 0x10dc <Enter_Pass+0x17c>
				else if( clear_display == 1 )
    10aa:	80 91 44 01 	lds	r24, 0x0144
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	49 f4       	brne	.+18     	; 0x10c4 <Enter_Pass+0x164>
				{
					LCD_displayString( "Enter password" );
    10b2:	80 e6       	ldi	r24, 0x60	; 96
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
					LCD_moveCursor( 2, 0 );
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
    10c2:	0c c0       	rjmp	.+24     	; 0x10dc <Enter_Pass+0x17c>
				}
				else if( clear_display == 2 )
    10c4:	80 91 44 01 	lds	r24, 0x0144
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	41 f4       	brne	.+16     	; 0x10dc <Enter_Pass+0x17c>
				{
					LCD_displayString( "Old password" );
    10cc:	8f e6       	ldi	r24, 0x6F	; 111
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
					LCD_moveCursor( 2, 0 );
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
				}
				/* A character which is > 9 for not to escape the do while loop and print pass[0]. */
				pass[0] = 10;
    10dc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    10de:	ff 8d       	ldd	r31, Y+31	; 0x1f
    10e0:	8a e0       	ldi	r24, 0x0A	; 10
    10e2:	80 83       	st	Z, r24
				/* Reset the for loop */
				pass_iterator = 0;
    10e4:	1d 8e       	std	Y+29, r1	; 0x1d
			}
		}
		while( pass[ pass_iterator ] > 9 );
    10e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10f0:	fc 01       	movw	r30, r24
    10f2:	e2 0f       	add	r30, r18
    10f4:	f3 1f       	adc	r31, r19
    10f6:	80 81       	ld	r24, Z
    10f8:	8a 30       	cpi	r24, 0x0A	; 10
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <Enter_Pass+0x19e>
    10fc:	42 cf       	rjmp	.-380    	; 0xf82 <Enter_Pass+0x22>
		LCD_displayCharacter( '*' );
    10fe:	8a e2       	ldi	r24, 0x2A	; 42
    1100:	0e 94 0d 13 	call	0x261a	; 0x261a <LCD_displayCharacter>
 */
void Enter_Pass( uint8 *pass )
{
	uint8 pass_iterator = 0;
	/* pass_iterator<6 not 5 to check in the fifth digit if the user wants to clear the password */
	for( pass_iterator = 0; pass_iterator < 5; pass_iterator++ )
    1104:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	8d 8f       	std	Y+29, r24	; 0x1d
    110a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    110c:	85 30       	cpi	r24, 0x05	; 5
    110e:	08 f4       	brcc	.+2      	; 0x1112 <Enter_Pass+0x1b2>
    1110:	38 cf       	rjmp	.-400    	; 0xf82 <Enter_Pass+0x22>
    1112:	7b c0       	rjmp	.+246    	; 0x120a <Enter_Pass+0x2aa>
		LCD_displayCharacter( '*' );
	}
	/* pass[5] is used to finish the function if the user pressed enter ('=') */
	while( pass[5] != '=' )
	{
		pass[5] = KEYPAD_getPressedKey();
    1114:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1116:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1118:	8c 01       	movw	r16, r24
    111a:	0b 5f       	subi	r16, 0xFB	; 251
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	0e 94 05 10 	call	0x200a	; 0x200a <KEYPAD_getPressedKey>
    1122:	f8 01       	movw	r30, r16
    1124:	80 83       	st	Z, r24
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a8 ec       	ldi	r26, 0xC8	; 200
    112c:	b3 e4       	ldi	r27, 0x43	; 67
    112e:	8b 87       	std	Y+11, r24	; 0x0b
    1130:	9c 87       	std	Y+12, r25	; 0x0c
    1132:	ad 87       	std	Y+13, r26	; 0x0d
    1134:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	6b 85       	ldd	r22, Y+11	; 0x0b
    1138:	7c 85       	ldd	r23, Y+12	; 0x0c
    113a:	8d 85       	ldd	r24, Y+13	; 0x0d
    113c:	9e 85       	ldd	r25, Y+14	; 0x0e
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4a ef       	ldi	r20, 0xFA	; 250
    1144:	54 e4       	ldi	r21, 0x44	; 68
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8f 83       	std	Y+7, r24	; 0x07
    1150:	98 87       	std	Y+8, r25	; 0x08
    1152:	a9 87       	std	Y+9, r26	; 0x09
    1154:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1156:	6f 81       	ldd	r22, Y+7	; 0x07
    1158:	78 85       	ldd	r23, Y+8	; 0x08
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e8       	ldi	r20, 0x80	; 128
    1164:	5f e3       	ldi	r21, 0x3F	; 63
    1166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116a:	88 23       	and	r24, r24
    116c:	2c f4       	brge	.+10     	; 0x1178 <Enter_Pass+0x218>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9e 83       	std	Y+6, r25	; 0x06
    1174:	8d 83       	std	Y+5, r24	; 0x05
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <Enter_Pass+0x296>
	else if (__tmp > 65535)
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	3f ef       	ldi	r19, 0xFF	; 255
    1184:	4f e7       	ldi	r20, 0x7F	; 127
    1186:	57 e4       	ldi	r21, 0x47	; 71
    1188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118c:	18 16       	cp	r1, r24
    118e:	4c f5       	brge	.+82     	; 0x11e2 <Enter_Pass+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	6b 85       	ldd	r22, Y+11	; 0x0b
    1192:	7c 85       	ldd	r23, Y+12	; 0x0c
    1194:	8d 85       	ldd	r24, Y+13	; 0x0d
    1196:	9e 85       	ldd	r25, Y+14	; 0x0e
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <Enter_Pass+0x278>
    11ba:	88 ec       	ldi	r24, 0xC8	; 200
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <Enter_Pass+0x266>
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f7       	brne	.-38     	; 0x11ba <Enter_Pass+0x25a>
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <Enter_Pass+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	6f 81       	ldd	r22, Y+7	; 0x07
    11e4:	78 85       	ldd	r23, Y+8	; 0x08
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <Enter_Pass+0x2a2>
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
		}
		while( pass[ pass_iterator ] > 9 );
		LCD_displayCharacter( '*' );
	}
	/* pass[5] is used to finish the function if the user pressed enter ('=') */
	while( pass[5] != '=' )
    120a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    120c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    120e:	fc 01       	movw	r30, r24
    1210:	35 96       	adiw	r30, 0x05	; 5
    1212:	80 81       	ld	r24, Z
    1214:	8d 33       	cpi	r24, 0x3D	; 61
    1216:	09 f0       	breq	.+2      	; 0x121a <Enter_Pass+0x2ba>
    1218:	7d cf       	rjmp	.-262    	; 0x1114 <Enter_Pass+0x1b4>
	{
		pass[5] = KEYPAD_getPressedKey();
		_delay_ms(400);
	}
	/* clear '=' from pass[5] for not to skip the previous while loop next function call. */
	pass[5] = '\0';
    121a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    121c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    121e:	fc 01       	movw	r30, r24
    1220:	35 96       	adiw	r30, 0x05	; 5
    1222:	10 82       	st	Z, r1
}
    1224:	6f 96       	adiw	r28, 0x1f	; 31
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <main>:

/* Used to count time using the timer. */
uint16 tx_timer_counts = 0;

int main(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	ce 55       	subi	r28, 0x5E	; 94
    1244:	d0 40       	sbci	r29, 0x00	; 0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
	 * (1) Configure the bit rate.
	 * (2) Configure the parity mode.
	 * (3) Configure the number of stop bits.
	 * (4) Configure the number of bits mode.
	 */
	UART_ConfigType uart_send_config = {9600, DISABLED, ONE_BIT, EIGHT_BITS};
    1250:	9e 01       	movw	r18, r28
    1252:	24 5c       	subi	r18, 0xC4	; 196
    1254:	3f 4f       	sbci	r19, 0xFF	; 255
    1256:	67 96       	adiw	r28, 0x17	; 23
    1258:	3f af       	std	Y+63, r19	; 0x3f
    125a:	2e af       	std	Y+62, r18	; 0x3e
    125c:	67 97       	sbiw	r28, 0x17	; 23
    125e:	8c e3       	ldi	r24, 0x3C	; 60
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	69 96       	adiw	r28, 0x19	; 25
    1264:	9f af       	std	Y+63, r25	; 0x3f
    1266:	8e af       	std	Y+62, r24	; 0x3e
    1268:	69 97       	sbiw	r28, 0x19	; 25
    126a:	97 e0       	ldi	r25, 0x07	; 7
    126c:	6a 96       	adiw	r28, 0x1a	; 26
    126e:	9f af       	std	Y+63, r25	; 0x3f
    1270:	6a 97       	sbiw	r28, 0x1a	; 26
    1272:	69 96       	adiw	r28, 0x19	; 25
    1274:	ee ad       	ldd	r30, Y+62	; 0x3e
    1276:	ff ad       	ldd	r31, Y+63	; 0x3f
    1278:	69 97       	sbiw	r28, 0x19	; 25
    127a:	00 80       	ld	r0, Z
    127c:	69 96       	adiw	r28, 0x19	; 25
    127e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1280:	3f ad       	ldd	r19, Y+63	; 0x3f
    1282:	69 97       	sbiw	r28, 0x19	; 25
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	69 96       	adiw	r28, 0x19	; 25
    128a:	3f af       	std	Y+63, r19	; 0x3f
    128c:	2e af       	std	Y+62, r18	; 0x3e
    128e:	69 97       	sbiw	r28, 0x19	; 25
    1290:	67 96       	adiw	r28, 0x17	; 23
    1292:	ee ad       	ldd	r30, Y+62	; 0x3e
    1294:	ff ad       	ldd	r31, Y+63	; 0x3f
    1296:	67 97       	sbiw	r28, 0x17	; 23
    1298:	00 82       	st	Z, r0
    129a:	67 96       	adiw	r28, 0x17	; 23
    129c:	2e ad       	ldd	r18, Y+62	; 0x3e
    129e:	3f ad       	ldd	r19, Y+63	; 0x3f
    12a0:	67 97       	sbiw	r28, 0x17	; 23
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	67 96       	adiw	r28, 0x17	; 23
    12a8:	3f af       	std	Y+63, r19	; 0x3f
    12aa:	2e af       	std	Y+62, r18	; 0x3e
    12ac:	67 97       	sbiw	r28, 0x17	; 23
    12ae:	6a 96       	adiw	r28, 0x1a	; 26
    12b0:	3f ad       	ldd	r19, Y+63	; 0x3f
    12b2:	6a 97       	sbiw	r28, 0x1a	; 26
    12b4:	31 50       	subi	r19, 0x01	; 1
    12b6:	6a 96       	adiw	r28, 0x1a	; 26
    12b8:	3f af       	std	Y+63, r19	; 0x3f
    12ba:	6a 97       	sbiw	r28, 0x1a	; 26
    12bc:	6a 96       	adiw	r28, 0x1a	; 26
    12be:	8f ad       	ldd	r24, Y+63	; 0x3f
    12c0:	6a 97       	sbiw	r28, 0x1a	; 26
    12c2:	88 23       	and	r24, r24
    12c4:	b1 f6       	brne	.-84     	; 0x1272 <main+0x38>
	 * (3) Configure the initial value.
	 * (4) Add the timer_ID.
	 * (5) Configure the comparing value, if compare mode.
	 * NB: For 1024 pre-scaler and 8Mhz frequency. Each overflow -> 0.032768 second, so we need 458 overflows to count 15 seconds.
	 */
	Timer_Config tx_config = {COMP, PS_1024, 0, TIMER1, 8000 };		/* Each interrupt is equivalent to a second */
    12c6:	ce 01       	movw	r24, r28
    12c8:	8d 5b       	subi	r24, 0xBD	; 189
    12ca:	9f 4f       	sbci	r25, 0xFF	; 255
    12cc:	6c 96       	adiw	r28, 0x1c	; 28
    12ce:	9f af       	std	Y+63, r25	; 0x3f
    12d0:	8e af       	std	Y+62, r24	; 0x3e
    12d2:	6c 97       	sbiw	r28, 0x1c	; 28
    12d4:	e5 e3       	ldi	r30, 0x35	; 53
    12d6:	f1 e0       	ldi	r31, 0x01	; 1
    12d8:	6e 96       	adiw	r28, 0x1e	; 30
    12da:	ff af       	std	Y+63, r31	; 0x3f
    12dc:	ee af       	std	Y+62, r30	; 0x3e
    12de:	6e 97       	sbiw	r28, 0x1e	; 30
    12e0:	f7 e0       	ldi	r31, 0x07	; 7
    12e2:	6f 96       	adiw	r28, 0x1f	; 31
    12e4:	ff af       	std	Y+63, r31	; 0x3f
    12e6:	6f 97       	sbiw	r28, 0x1f	; 31
    12e8:	6e 96       	adiw	r28, 0x1e	; 30
    12ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    12ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    12ee:	6e 97       	sbiw	r28, 0x1e	; 30
    12f0:	00 80       	ld	r0, Z
    12f2:	6e 96       	adiw	r28, 0x1e	; 30
    12f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    12f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    12f8:	6e 97       	sbiw	r28, 0x1e	; 30
    12fa:	2f 5f       	subi	r18, 0xFF	; 255
    12fc:	3f 4f       	sbci	r19, 0xFF	; 255
    12fe:	6e 96       	adiw	r28, 0x1e	; 30
    1300:	3f af       	std	Y+63, r19	; 0x3f
    1302:	2e af       	std	Y+62, r18	; 0x3e
    1304:	6e 97       	sbiw	r28, 0x1e	; 30
    1306:	6c 96       	adiw	r28, 0x1c	; 28
    1308:	ee ad       	ldd	r30, Y+62	; 0x3e
    130a:	ff ad       	ldd	r31, Y+63	; 0x3f
    130c:	6c 97       	sbiw	r28, 0x1c	; 28
    130e:	00 82       	st	Z, r0
    1310:	6c 96       	adiw	r28, 0x1c	; 28
    1312:	2e ad       	ldd	r18, Y+62	; 0x3e
    1314:	3f ad       	ldd	r19, Y+63	; 0x3f
    1316:	6c 97       	sbiw	r28, 0x1c	; 28
    1318:	2f 5f       	subi	r18, 0xFF	; 255
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	6c 96       	adiw	r28, 0x1c	; 28
    131e:	3f af       	std	Y+63, r19	; 0x3f
    1320:	2e af       	std	Y+62, r18	; 0x3e
    1322:	6c 97       	sbiw	r28, 0x1c	; 28
    1324:	6f 96       	adiw	r28, 0x1f	; 31
    1326:	3f ad       	ldd	r19, Y+63	; 0x3f
    1328:	6f 97       	sbiw	r28, 0x1f	; 31
    132a:	31 50       	subi	r19, 0x01	; 1
    132c:	6f 96       	adiw	r28, 0x1f	; 31
    132e:	3f af       	std	Y+63, r19	; 0x3f
    1330:	6f 97       	sbiw	r28, 0x1f	; 31
    1332:	6f 96       	adiw	r28, 0x1f	; 31
    1334:	8f ad       	ldd	r24, Y+63	; 0x3f
    1336:	6f 97       	sbiw	r28, 0x1f	; 31
    1338:	88 23       	and	r24, r24
    133a:	b1 f6       	brne	.-84     	; 0x12e8 <main+0xae>
	/* A string to write the 5-digits password and the enter ('=') in. */
	uint8 keypad_press[6];
	/* A variable used to detect whether the passwords match or not. */
	uint8 match_check = 0;
    133c:	fe 01       	movw	r30, r28
    133e:	e0 5b       	subi	r30, 0xB0	; 176
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	10 82       	st	Z, r1
	/* A variable to find whether the user chose '+' or '-'. */
	uint8 door_options = 0;
    1344:	1b ae       	std	Y+59, r1	; 0x3b
	/* A variable used to know if the password is correct or not. */
	uint8 correct_pass;
	/* A variable to enable the buzzer at a certain condition */
	uint8 buzz = 0;
    1346:	19 ae       	std	Y+57, r1	; 0x39
	/* Enable the global interrupts */
	SREG |= ( 1 << 7 );
    1348:	af e5       	ldi	r26, 0x5F	; 95
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ef e5       	ldi	r30, 0x5F	; 95
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 68       	ori	r24, 0x80	; 128
    1354:	8c 93       	st	X, r24
	/* Initialize the required modules. */
	UART_init( &uart_send_config );
    1356:	ce 01       	movw	r24, r28
    1358:	cc 96       	adiw	r24, 0x3c	; 60
    135a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <UART_init>
	LCD_init();
    135e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <LCD_init>

	/* Don't skip creating the password, unless matching happens. */
	do
	{
		Create_Pass( keypad_press, &match_check );
    1362:	ce 01       	movw	r24, r28
    1364:	86 5b       	subi	r24, 0xB6	; 182
    1366:	9f 4f       	sbci	r25, 0xFF	; 255
    1368:	9e 01       	movw	r18, r28
    136a:	20 5b       	subi	r18, 0xB0	; 176
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	b9 01       	movw	r22, r18
    1370:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <Create_Pass>
	}
	while( match_check != MATCH_COMPLETE );
    1374:	fe 01       	movw	r30, r28
    1376:	e0 5b       	subi	r30, 0xB0	; 176
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	80 81       	ld	r24, Z
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	89 f7       	brne	.-30     	; 0x1362 <main+0x128>
	/* NB: When the 2 passwords match, the 2nd MC saves the pass in the EEPROM automatically. */

	while(1)
	{
		/* Clear the LCD. */
		LCD_clearScreen();
    1380:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
		LCD_displayString( "+: Open the door" );
    1384:	8f eb       	ldi	r24, 0xBF	; 191
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
		LCD_displayStringRowColumn( 2, 0, "-: Change pass" );
    138c:	20 ed       	ldi	r18, 0xD0	; 208
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <LCD_displayStringRowColumn>
		/* Do nothing until the user enters the correct button */
		do
		{
			door_options = KEYPAD_getPressedKey();
    139a:	0e 94 05 10 	call	0x200a	; 0x200a <KEYPAD_getPressedKey>
    139e:	8b af       	std	Y+59, r24	; 0x3b
		}
		while( !( ( door_options == '+' ) | ( door_options == '-' ) ) );
    13a0:	65 96       	adiw	r28, 0x15	; 21
    13a2:	1f ae       	std	Y+63, r1	; 0x3f
    13a4:	65 97       	sbiw	r28, 0x15	; 21
    13a6:	8b ad       	ldd	r24, Y+59	; 0x3b
    13a8:	8b 32       	cpi	r24, 0x2B	; 43
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <main+0x17a>
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	65 96       	adiw	r28, 0x15	; 21
    13b0:	9f af       	std	Y+63, r25	; 0x3f
    13b2:	65 97       	sbiw	r28, 0x15	; 21
    13b4:	64 96       	adiw	r28, 0x14	; 20
    13b6:	1f ae       	std	Y+63, r1	; 0x3f
    13b8:	64 97       	sbiw	r28, 0x14	; 20
    13ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    13bc:	8d 32       	cpi	r24, 0x2D	; 45
    13be:	21 f0       	breq	.+8      	; 0x13c8 <main+0x18e>
    13c0:	e1 e0       	ldi	r30, 0x01	; 1
    13c2:	64 96       	adiw	r28, 0x14	; 20
    13c4:	ef af       	std	Y+63, r30	; 0x3f
    13c6:	64 97       	sbiw	r28, 0x14	; 20
    13c8:	65 96       	adiw	r28, 0x15	; 21
    13ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    13cc:	65 97       	sbiw	r28, 0x15	; 21
    13ce:	64 96       	adiw	r28, 0x14	; 20
    13d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    13d2:	64 97       	sbiw	r28, 0x14	; 20
    13d4:	8f 23       	and	r24, r31
    13d6:	88 23       	and	r24, r24
    13d8:	01 f7       	brne	.-64     	; 0x139a <main+0x160>

		/* Tell the second MC what the user chose. */
		UART_sendByte( door_options );
    13da:	8b ad       	ldd	r24, Y+59	; 0x3b
    13dc:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <UART_sendByte>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 e2       	ldi	r26, 0x20	; 32
    13e6:	b1 e4       	ldi	r27, 0x41	; 65
    13e8:	8d ab       	std	Y+53, r24	; 0x35
    13ea:	9e ab       	std	Y+54, r25	; 0x36
    13ec:	af ab       	std	Y+55, r26	; 0x37
    13ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f0:	6d a9       	ldd	r22, Y+53	; 0x35
    13f2:	7e a9       	ldd	r23, Y+54	; 0x36
    13f4:	8f a9       	ldd	r24, Y+55	; 0x37
    13f6:	98 ad       	ldd	r25, Y+56	; 0x38
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	4a ef       	ldi	r20, 0xFA	; 250
    13fe:	54 e4       	ldi	r21, 0x44	; 68
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	89 ab       	std	Y+49, r24	; 0x31
    140a:	9a ab       	std	Y+50, r25	; 0x32
    140c:	ab ab       	std	Y+51, r26	; 0x33
    140e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1410:	69 a9       	ldd	r22, Y+49	; 0x31
    1412:	7a a9       	ldd	r23, Y+50	; 0x32
    1414:	8b a9       	ldd	r24, Y+51	; 0x33
    1416:	9c a9       	ldd	r25, Y+52	; 0x34
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	2c f4       	brge	.+10     	; 0x1432 <main+0x1f8>
		__ticks = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	98 ab       	std	Y+48, r25	; 0x30
    142e:	8f a7       	std	Y+47, r24	; 0x2f
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <main+0x276>
	else if (__tmp > 65535)
    1432:	69 a9       	ldd	r22, Y+49	; 0x31
    1434:	7a a9       	ldd	r23, Y+50	; 0x32
    1436:	8b a9       	ldd	r24, Y+51	; 0x33
    1438:	9c a9       	ldd	r25, Y+52	; 0x34
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	4f e7       	ldi	r20, 0x7F	; 127
    1440:	57 e4       	ldi	r21, 0x47	; 71
    1442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1446:	18 16       	cp	r1, r24
    1448:	4c f5       	brge	.+82     	; 0x149c <main+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144a:	6d a9       	ldd	r22, Y+53	; 0x35
    144c:	7e a9       	ldd	r23, Y+54	; 0x36
    144e:	8f a9       	ldd	r24, Y+55	; 0x37
    1450:	98 ad       	ldd	r25, Y+56	; 0x38
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	98 ab       	std	Y+48, r25	; 0x30
    1470:	8f a7       	std	Y+47, r24	; 0x2f
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <main+0x258>
    1474:	88 ec       	ldi	r24, 0xC8	; 200
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9e a7       	std	Y+46, r25	; 0x2e
    147a:	8d a7       	std	Y+45, r24	; 0x2d
    147c:	8d a5       	ldd	r24, Y+45	; 0x2d
    147e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <main+0x246>
    1484:	9e a7       	std	Y+46, r25	; 0x2e
    1486:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1488:	8f a5       	ldd	r24, Y+47	; 0x2f
    148a:	98 a9       	ldd	r25, Y+48	; 0x30
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	98 ab       	std	Y+48, r25	; 0x30
    1490:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1492:	8f a5       	ldd	r24, Y+47	; 0x2f
    1494:	98 a9       	ldd	r25, Y+48	; 0x30
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	69 f7       	brne	.-38     	; 0x1474 <main+0x23a>
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149c:	69 a9       	ldd	r22, Y+49	; 0x31
    149e:	7a a9       	ldd	r23, Y+50	; 0x32
    14a0:	8b a9       	ldd	r24, Y+51	; 0x33
    14a2:	9c a9       	ldd	r25, Y+52	; 0x34
    14a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	98 ab       	std	Y+48, r25	; 0x30
    14ae:	8f a7       	std	Y+47, r24	; 0x2f
    14b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14b2:	98 a9       	ldd	r25, Y+48	; 0x30
    14b4:	9c a7       	std	Y+44, r25	; 0x2c
    14b6:	8b a7       	std	Y+43, r24	; 0x2b
    14b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <main+0x282>
    14c0:	9c a7       	std	Y+44, r25	; 0x2c
    14c2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);

		switch( door_options )
    14c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	63 96       	adiw	r28, 0x13	; 19
    14cc:	3f af       	std	Y+63, r19	; 0x3f
    14ce:	2e af       	std	Y+62, r18	; 0x3e
    14d0:	63 97       	sbiw	r28, 0x13	; 19
    14d2:	63 96       	adiw	r28, 0x13	; 19
    14d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    14d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    14d8:	63 97       	sbiw	r28, 0x13	; 19
    14da:	8b 32       	cpi	r24, 0x2B	; 43
    14dc:	91 05       	cpc	r25, r1
    14de:	49 f0       	breq	.+18     	; 0x14f2 <main+0x2b8>
    14e0:	63 96       	adiw	r28, 0x13	; 19
    14e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    14e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    14e6:	63 97       	sbiw	r28, 0x13	; 19
    14e8:	ed 32       	cpi	r30, 0x2D	; 45
    14ea:	f1 05       	cpc	r31, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <main+0x2b6>
    14ee:	cd c0       	rjmp	.+410    	; 0x168a <main+0x450>
    14f0:	47 cf       	rjmp	.-370    	; 0x1380 <main+0x146>
		{
		case '+':
			correct_pass = Check_Pass( keypad_press, ENTERING );
    14f2:	ce 01       	movw	r24, r28
    14f4:	86 5b       	subi	r24, 0xB6	; 182
    14f6:	9f 4f       	sbci	r25, 0xFF	; 255
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <Check_Pass>
    14fe:	8a af       	std	Y+58, r24	; 0x3a
			if( correct_pass == MATCH_COMPLETE )
    1500:	8a ad       	ldd	r24, Y+58	; 0x3a
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	f1 f4       	brne	.+60     	; 0x1542 <main+0x308>
			{
				/* Because the user may enter an incorrect pass for 1 or 2 times before getting it right. */
				buzz = 0;
    1506:	19 ae       	std	Y+57, r1	; 0x39
				LCD_clearScreen();
    1508:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
				LCD_displayString( "Door is opening " );
    150c:	8f ed       	ldi	r24, 0xDF	; 223
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
				/* Send the call back function to the timer */
				TIMER_setCallBack( Display1_TxCallBack, TIMER1, COMP );
    1514:	8d e7       	ldi	r24, 0x7D	; 125
    1516:	9c e0       	ldi	r25, 0x0C	; 12
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	41 e0       	ldi	r20, 0x01	; 1
    151c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <TIMER_setCallBack>
				/* Start the timer */
				Timer_Init( &tx_config );
    1520:	ce 01       	movw	r24, r28
    1522:	8d 5b       	subi	r24, 0xBD	; 189
    1524:	9f 4f       	sbci	r25, 0xFF	; 255
    1526:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <Timer_Init>
				/* Wait x seconds */
				while( tx_timer_counts != 33 )
    152a:	80 91 45 01 	lds	r24, 0x0145
    152e:	90 91 46 01 	lds	r25, 0x0146
    1532:	81 32       	cpi	r24, 0x21	; 33
    1534:	91 05       	cpc	r25, r1
    1536:	c9 f7       	brne	.-14     	; 0x152a <main+0x2f0>
				{

				}
				tx_timer_counts = 0;
    1538:	10 92 46 01 	sts	0x0146, r1
    153c:	10 92 45 01 	sts	0x0145, r1
    1540:	1f cf       	rjmp	.-450    	; 0x1380 <main+0x146>
			}
			else if( correct_pass == MISS_MATCH )
    1542:	8a ad       	ldd	r24, Y+58	; 0x3a
    1544:	88 23       	and	r24, r24
    1546:	09 f0       	breq	.+2      	; 0x154a <main+0x310>
    1548:	1b cf       	rjmp	.-458    	; 0x1380 <main+0x146>
			{
				buzz++;
    154a:	89 ad       	ldd	r24, Y+57	; 0x39
    154c:	8f 5f       	subi	r24, 0xFF	; 255
    154e:	89 af       	std	Y+57, r24	; 0x39
				LCD_clearScreen();
    1550:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
				if( buzz != 3 )
    1554:	89 ad       	ldd	r24, Y+57	; 0x39
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	09 f4       	brne	.+2      	; 0x155c <main+0x322>
    155a:	76 c0       	rjmp	.+236    	; 0x1648 <main+0x40e>
				{
				LCD_displayString( "Incorrect pass" );
    155c:	80 ef       	ldi	r24, 0xF0	; 240
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	aa ef       	ldi	r26, 0xFA	; 250
    156a:	b4 e4       	ldi	r27, 0x44	; 68
    156c:	8f a3       	std	Y+39, r24	; 0x27
    156e:	98 a7       	std	Y+40, r25	; 0x28
    1570:	a9 a7       	std	Y+41, r26	; 0x29
    1572:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	6f a1       	ldd	r22, Y+39	; 0x27
    1576:	78 a5       	ldd	r23, Y+40	; 0x28
    1578:	89 a5       	ldd	r24, Y+41	; 0x29
    157a:	9a a5       	ldd	r25, Y+42	; 0x2a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a ef       	ldi	r20, 0xFA	; 250
    1582:	54 e4       	ldi	r21, 0x44	; 68
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8b a3       	std	Y+35, r24	; 0x23
    158e:	9c a3       	std	Y+36, r25	; 0x24
    1590:	ad a3       	std	Y+37, r26	; 0x25
    1592:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1594:	6b a1       	ldd	r22, Y+35	; 0x23
    1596:	7c a1       	ldd	r23, Y+36	; 0x24
    1598:	8d a1       	ldd	r24, Y+37	; 0x25
    159a:	9e a1       	ldd	r25, Y+38	; 0x26
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <main+0x37c>
		__ticks = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9a a3       	std	Y+34, r25	; 0x22
    15b2:	89 a3       	std	Y+33, r24	; 0x21
    15b4:	3f c0       	rjmp	.+126    	; 0x1634 <main+0x3fa>
	else if (__tmp > 65535)
    15b6:	6b a1       	ldd	r22, Y+35	; 0x23
    15b8:	7c a1       	ldd	r23, Y+36	; 0x24
    15ba:	8d a1       	ldd	r24, Y+37	; 0x25
    15bc:	9e a1       	ldd	r25, Y+38	; 0x26
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	4c f5       	brge	.+82     	; 0x1620 <main+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ce:	6f a1       	ldd	r22, Y+39	; 0x27
    15d0:	78 a5       	ldd	r23, Y+40	; 0x28
    15d2:	89 a5       	ldd	r24, Y+41	; 0x29
    15d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9a a3       	std	Y+34, r25	; 0x22
    15f4:	89 a3       	std	Y+33, r24	; 0x21
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <main+0x3dc>
    15f8:	88 ec       	ldi	r24, 0xC8	; 200
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	98 a3       	std	Y+32, r25	; 0x20
    15fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1600:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1602:	98 a1       	ldd	r25, Y+32	; 0x20
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <main+0x3ca>
    1608:	98 a3       	std	Y+32, r25	; 0x20
    160a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	89 a1       	ldd	r24, Y+33	; 0x21
    160e:	9a a1       	ldd	r25, Y+34	; 0x22
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9a a3       	std	Y+34, r25	; 0x22
    1614:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	9a a1       	ldd	r25, Y+34	; 0x22
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <main+0x3be>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <main+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	6b a1       	ldd	r22, Y+35	; 0x23
    1622:	7c a1       	ldd	r23, Y+36	; 0x24
    1624:	8d a1       	ldd	r24, Y+37	; 0x25
    1626:	9e a1       	ldd	r25, Y+38	; 0x26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	9e 8f       	std	Y+30, r25	; 0x1e
    163a:	8d 8f       	std	Y+29, r24	; 0x1d
    163c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <main+0x406>
    1644:	9e 8f       	std	Y+30, r25	; 0x1e
    1646:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2000);
				}
				if( buzz == 3 )
    1648:	89 ad       	ldd	r24, Y+57	; 0x39
    164a:	83 30       	cpi	r24, 0x03	; 3
    164c:	09 f0       	breq	.+2      	; 0x1650 <main+0x416>
    164e:	98 ce       	rjmp	.-720    	; 0x1380 <main+0x146>
				{
					buzz = 2;
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	89 af       	std	Y+57, r24	; 0x39
					LCD_displayString( "Door is disabled" );
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
					/* Send the call back function to the timer */
					TIMER_setCallBack( Display2_TxCallBack, TIMER1, COMP );
    165c:	8d ea       	ldi	r24, 0xAD	; 173
    165e:	9c e0       	ldi	r25, 0x0C	; 12
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <TIMER_setCallBack>
					/* Start the timer */
					Timer_Init( &tx_config );
    1668:	ce 01       	movw	r24, r28
    166a:	8d 5b       	subi	r24, 0xBD	; 189
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <Timer_Init>
					/* Wait x seconds */
					while( tx_timer_counts != 60 )
    1672:	80 91 45 01 	lds	r24, 0x0145
    1676:	90 91 46 01 	lds	r25, 0x0146
    167a:	8c 33       	cpi	r24, 0x3C	; 60
    167c:	91 05       	cpc	r25, r1
    167e:	c9 f7       	brne	.-14     	; 0x1672 <main+0x438>
					{

					}
					tx_timer_counts = 0;
    1680:	10 92 46 01 	sts	0x0146, r1
    1684:	10 92 45 01 	sts	0x0145, r1
    1688:	7b ce       	rjmp	.-778    	; 0x1380 <main+0x146>
				}
			}
			break;
		case '-':
		{
			correct_pass = Check_Pass( keypad_press, CHANGING );
    168a:	ce 01       	movw	r24, r28
    168c:	86 5b       	subi	r24, 0xB6	; 182
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	0e 94 a3 05 	call	0xb46	; 0xb46 <Check_Pass>
    1696:	8a af       	std	Y+58, r24	; 0x3a
			if( correct_pass == MATCH_COMPLETE )
    1698:	8a ad       	ldd	r24, Y+58	; 0x3a
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	09 f0       	breq	.+2      	; 0x16a0 <main+0x466>
    169e:	89 c0       	rjmp	.+274    	; 0x17b2 <main+0x578>
			{
				/* Because the user may enter an incorrect pass for 1 or 2 times before getting it right. */
				buzz = 0;
    16a0:	19 ae       	std	Y+57, r1	; 0x39
				LCD_clearScreen();
    16a2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
				do
				{
					Create_Pass( keypad_press, &match_check );
    16a6:	ce 01       	movw	r24, r28
    16a8:	86 5b       	subi	r24, 0xB6	; 182
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	9e 01       	movw	r18, r28
    16ae:	20 5b       	subi	r18, 0xB0	; 176
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	b9 01       	movw	r22, r18
    16b4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <Create_Pass>
				}
				while( match_check != MATCH_COMPLETE );
    16b8:	fe 01       	movw	r30, r28
    16ba:	e0 5b       	subi	r30, 0xB0	; 176
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	89 f7       	brne	.-30     	; 0x16a6 <main+0x46c>
				LCD_displayString( "Pass Changed" );
    16c4:	80 e1       	ldi	r24, 0x10	; 16
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	aa ef       	ldi	r26, 0xFA	; 250
    16d2:	b4 e4       	ldi	r27, 0x44	; 68
    16d4:	89 8f       	std	Y+25, r24	; 0x19
    16d6:	9a 8f       	std	Y+26, r25	; 0x1a
    16d8:	ab 8f       	std	Y+27, r26	; 0x1b
    16da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8d 8b       	std	Y+21, r24	; 0x15
    16f6:	9e 8b       	std	Y+22, r25	; 0x16
    16f8:	af 8b       	std	Y+23, r26	; 0x17
    16fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <main+0x4e4>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
    171c:	3f c0       	rjmp	.+126    	; 0x179c <main+0x562>
	else if (__tmp > 65535)
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <main+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	69 8d       	ldd	r22, Y+25	; 0x19
    1738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	0f c0       	rjmp	.+30     	; 0x177e <main+0x544>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9a 8b       	std	Y+18, r25	; 0x12
    1766:	89 8b       	std	Y+17, r24	; 0x11
    1768:	89 89       	ldd	r24, Y+17	; 0x11
    176a:	9a 89       	ldd	r25, Y+18	; 0x12
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <main+0x532>
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8b 89       	ldd	r24, Y+19	; 0x13
    1776:	9c 89       	ldd	r25, Y+20	; 0x14
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <main+0x526>
    1786:	fc cd       	rjmp	.-1032   	; 0x1380 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6d 89       	ldd	r22, Y+21	; 0x15
    178a:	7e 89       	ldd	r23, Y+22	; 0x16
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	98 8d       	ldd	r25, Y+24	; 0x18
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9c 8b       	std	Y+20, r25	; 0x14
    179a:	8b 8b       	std	Y+19, r24	; 0x13
    179c:	8b 89       	ldd	r24, Y+19	; 0x13
    179e:	9c 89       	ldd	r25, Y+20	; 0x14
    17a0:	98 8b       	std	Y+16, r25	; 0x10
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	98 89       	ldd	r25, Y+16	; 0x10
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <main+0x56e>
    17ac:	98 8b       	std	Y+16, r25	; 0x10
    17ae:	8f 87       	std	Y+15, r24	; 0x0f
    17b0:	e7 cd       	rjmp	.-1074   	; 0x1380 <main+0x146>
				_delay_ms(2000);
			}
			else if( correct_pass == MISS_MATCH )
    17b2:	8a ad       	ldd	r24, Y+58	; 0x3a
    17b4:	88 23       	and	r24, r24
    17b6:	09 f0       	breq	.+2      	; 0x17ba <main+0x580>
    17b8:	e3 cd       	rjmp	.-1082   	; 0x1380 <main+0x146>
			{
				buzz++;
    17ba:	89 ad       	ldd	r24, Y+57	; 0x39
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	89 af       	std	Y+57, r24	; 0x39
				LCD_clearScreen();
    17c0:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
				if( buzz != 3 )
    17c4:	89 ad       	ldd	r24, Y+57	; 0x39
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	09 f4       	brne	.+2      	; 0x17cc <main+0x592>
    17ca:	76 c0       	rjmp	.+236    	; 0x18b8 <main+0x67e>
				{
				LCD_displayString( "Incorrect pass" );
    17cc:	80 ef       	ldi	r24, 0xF0	; 240
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	aa ef       	ldi	r26, 0xFA	; 250
    17da:	b4 e4       	ldi	r27, 0x44	; 68
    17dc:	8b 87       	std	Y+11, r24	; 0x0b
    17de:	9c 87       	std	Y+12, r25	; 0x0c
    17e0:	ad 87       	std	Y+13, r26	; 0x0d
    17e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	98 87       	std	Y+8, r25	; 0x08
    1800:	a9 87       	std	Y+9, r26	; 0x09
    1802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <main+0x5ec>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <main+0x66a>
	else if (__tmp > 65535)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <main+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1840:	7c 85       	ldd	r23, Y+12	; 0x0c
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	9e 85       	ldd	r25, Y+14	; 0x0e
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <main+0x64c>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0x63a>
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9e 83       	std	Y+6, r25	; 0x06
    1884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <main+0x62e>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <main+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <main+0x676>
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
				}
				if( buzz == 3 )
    18b8:	89 ad       	ldd	r24, Y+57	; 0x39
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <main+0x686>
    18be:	60 cd       	rjmp	.-1344   	; 0x1380 <main+0x146>
				{
					buzz = 2;
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	89 af       	std	Y+57, r24	; 0x39
					/* Send the call back function to the timer */
					TIMER_setCallBack( Display2_TxCallBack, TIMER1, COMP );
    18c4:	8d ea       	ldi	r24, 0xAD	; 173
    18c6:	9c e0       	ldi	r25, 0x0C	; 12
    18c8:	61 e0       	ldi	r22, 0x01	; 1
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <TIMER_setCallBack>
					/* Start the timer */
					Timer_Init( &tx_config );
    18d0:	ce 01       	movw	r24, r28
    18d2:	8d 5b       	subi	r24, 0xBD	; 189
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <Timer_Init>
					LCD_displayString( "Door is disabled" );
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
					/* Wait x seconds */
					while( tx_timer_counts != 60 )
    18e2:	80 91 45 01 	lds	r24, 0x0145
    18e6:	90 91 46 01 	lds	r25, 0x0146
    18ea:	8c 33       	cpi	r24, 0x3C	; 60
    18ec:	91 05       	cpc	r25, r1
    18ee:	c9 f7       	brne	.-14     	; 0x18e2 <main+0x6a8>
					{

					}
					tx_timer_counts = 0;
    18f0:	10 92 46 01 	sts	0x0146, r1
    18f4:	10 92 45 01 	sts	0x0145, r1
    18f8:	43 cd       	rjmp	.-1402   	; 0x1380 <main+0x146>

000018fa <Display1_TxCallBack>:

/*
 * Description: Call back function of any timer.
 */
void Display1_TxCallBack( void )
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	tx_timer_counts++;
    1902:	80 91 45 01 	lds	r24, 0x0145
    1906:	90 91 46 01 	lds	r25, 0x0146
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	90 93 46 01 	sts	0x0146, r25
    1910:	80 93 45 01 	sts	0x0145, r24
	/* Wait x1 seconds */
	if( tx_timer_counts == 15 )
    1914:	80 91 45 01 	lds	r24, 0x0145
    1918:	90 91 46 01 	lds	r25, 0x0146
    191c:	8f 30       	cpi	r24, 0x0F	; 15
    191e:	91 05       	cpc	r25, r1
    1920:	19 f4       	brne	.+6      	; 0x1928 <Display1_TxCallBack+0x2e>
	{
		LCD_clearScreen();
    1922:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <LCD_clearScreen>
    1926:	16 c0       	rjmp	.+44     	; 0x1954 <Display1_TxCallBack+0x5a>
	}
	/* Wait x2+x1 seconds */
	else if( tx_timer_counts == 18 )
    1928:	80 91 45 01 	lds	r24, 0x0145
    192c:	90 91 46 01 	lds	r25, 0x0146
    1930:	82 31       	cpi	r24, 0x12	; 18
    1932:	91 05       	cpc	r25, r1
    1934:	29 f4       	brne	.+10     	; 0x1940 <Display1_TxCallBack+0x46>
	{
		LCD_displayString( "Door is closing" );
    1936:	8d e1       	ldi	r24, 0x1D	; 29
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <Display1_TxCallBack+0x5a>
	}
	/* Wait x3+x2+x1 seconds */
	else if ( tx_timer_counts == 33)
    1940:	80 91 45 01 	lds	r24, 0x0145
    1944:	90 91 46 01 	lds	r25, 0x0146
    1948:	81 32       	cpi	r24, 0x21	; 33
    194a:	91 05       	cpc	r25, r1
    194c:	19 f4       	brne	.+6      	; 0x1954 <Display1_TxCallBack+0x5a>
	{
		/* Shut-down the timer */
		TIMER_intDeInit(TIMER1);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0e 94 2d 18 	call	0x305a	; 0x305a <TIMER_intDeInit>
	}
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <Display2_TxCallBack>:

void Display2_TxCallBack( void )
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	tx_timer_counts++;
    1962:	80 91 45 01 	lds	r24, 0x0145
    1966:	90 91 46 01 	lds	r25, 0x0146
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	90 93 46 01 	sts	0x0146, r25
    1970:	80 93 45 01 	sts	0x0145, r24
	if ( tx_timer_counts == 34 )
    1974:	80 91 45 01 	lds	r24, 0x0145
    1978:	90 91 46 01 	lds	r25, 0x0146
    197c:	82 32       	cpi	r24, 0x22	; 34
    197e:	91 05       	cpc	r25, r1
    1980:	19 f4       	brne	.+6      	; 0x1988 <Display2_TxCallBack+0x2e>
	{
		/* Shut-down the timer */
		TIMER_intDeInit(TIMER1);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	0e 94 2d 18 	call	0x305a	; 0x305a <TIMER_intDeInit>
	}
}
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <GPIO_setupPinDirection>:

/*
 * Description: Set the pin as input or output.
 */
void GPIO_setupPinDirection( uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction /* Input or Output*/ )
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	00 d0       	rcall	.+0      	; 0x1994 <GPIO_setupPinDirection+0x6>
    1994:	00 d0       	rcall	.+0      	; 0x1996 <GPIO_setupPinDirection+0x8>
    1996:	0f 92       	push	r0
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	6a 83       	std	Y+2, r22	; 0x02
    19a0:	4b 83       	std	Y+3, r20	; 0x03
	if( ( port_num >= NUM_OF_PORTS ) || ( pin_num >= NUM_OF_PINS_PER_PORT ) )
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	84 30       	cpi	r24, 0x04	; 4
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <GPIO_setupPinDirection+0x1c>
    19a8:	d5 c0       	rjmp	.+426    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	88 30       	cpi	r24, 0x08	; 8
    19ae:	08 f0       	brcs	.+2      	; 0x19b2 <GPIO_setupPinDirection+0x24>
    19b0:	d1 c0       	rjmp	.+418    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
	{

	}
	else
	{
		switch(port_num)
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	3d 83       	std	Y+5, r19	; 0x05
    19ba:	2c 83       	std	Y+4, r18	; 0x04
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	9d 81       	ldd	r25, Y+5	; 0x05
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	91 05       	cpc	r25, r1
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <GPIO_setupPinDirection+0x3a>
    19c6:	43 c0       	rjmp	.+134    	; 0x1a4e <GPIO_setupPinDirection+0xc0>
    19c8:	2c 81       	ldd	r18, Y+4	; 0x04
    19ca:	3d 81       	ldd	r19, Y+5	; 0x05
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	2c f4       	brge	.+10     	; 0x19dc <GPIO_setupPinDirection+0x4e>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	71 f0       	breq	.+28     	; 0x19f6 <GPIO_setupPinDirection+0x68>
    19da:	bc c0       	rjmp	.+376    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
    19dc:	2c 81       	ldd	r18, Y+4	; 0x04
    19de:	3d 81       	ldd	r19, Y+5	; 0x05
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <GPIO_setupPinDirection+0x5a>
    19e6:	5f c0       	rjmp	.+190    	; 0x1aa6 <GPIO_setupPinDirection+0x118>
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	9d 81       	ldd	r25, Y+5	; 0x05
    19ec:	83 30       	cpi	r24, 0x03	; 3
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <GPIO_setupPinDirection+0x66>
    19f2:	85 c0       	rjmp	.+266    	; 0x1afe <GPIO_setupPinDirection+0x170>
    19f4:	af c0       	rjmp	.+350    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if( direction == PIN_OUTPUT )
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	a1 f4       	brne	.+40     	; 0x1a24 <GPIO_setupPinDirection+0x96>
				SET_BIT( DDRA, pin_num );
    19fc:	aa e3       	ldi	r26, 0x3A	; 58
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ea e3       	ldi	r30, 0x3A	; 58
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_setupPinDirection+0x8c>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_setupPinDirection+0x88>
    1a1e:	84 2b       	or	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	98 c0       	rjmp	.+304    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRA, pin_num );
    1a24:	aa e3       	ldi	r26, 0x3A	; 58
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ea e3       	ldi	r30, 0x3A	; 58
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_setupPinDirection+0xb4>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_setupPinDirection+0xb0>
    1a46:	80 95       	com	r24
    1a48:	84 23       	and	r24, r20
    1a4a:	8c 93       	st	X, r24
    1a4c:	83 c0       	rjmp	.+262    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if( direction == PIN_OUTPUT )
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	81 30       	cpi	r24, 0x01	; 1
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <GPIO_setupPinDirection+0xee>
				SET_BIT( DDRB, pin_num );
    1a54:	a7 e3       	ldi	r26, 0x37	; 55
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e7 e3       	ldi	r30, 0x37	; 55
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_setupPinDirection+0xe4>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_setupPinDirection+0xe0>
    1a76:	84 2b       	or	r24, r20
    1a78:	8c 93       	st	X, r24
    1a7a:	6c c0       	rjmp	.+216    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRB, pin_num );
    1a7c:	a7 e3       	ldi	r26, 0x37	; 55
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e7 e3       	ldi	r30, 0x37	; 55
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_setupPinDirection+0x10c>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_setupPinDirection+0x108>
    1a9e:	80 95       	com	r24
    1aa0:	84 23       	and	r24, r20
    1aa2:	8c 93       	st	X, r24
    1aa4:	57 c0       	rjmp	.+174    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if( direction == PIN_OUTPUT )
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	a1 f4       	brne	.+40     	; 0x1ad4 <GPIO_setupPinDirection+0x146>
				SET_BIT( DDRC, pin_num );
    1aac:	a4 e3       	ldi	r26, 0x34	; 52
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e4 e3       	ldi	r30, 0x34	; 52
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	48 2f       	mov	r20, r24
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	02 2e       	mov	r0, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <GPIO_setupPinDirection+0x13c>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	0a 94       	dec	r0
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <GPIO_setupPinDirection+0x138>
    1ace:	84 2b       	or	r24, r20
    1ad0:	8c 93       	st	X, r24
    1ad2:	40 c0       	rjmp	.+128    	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRC, pin_num );
    1ad4:	a4 e3       	ldi	r26, 0x34	; 52
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e4 e3       	ldi	r30, 0x34	; 52
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <GPIO_setupPinDirection+0x164>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <GPIO_setupPinDirection+0x160>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	2b c0       	rjmp	.+86     	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if( direction == PIN_OUTPUT )
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	a1 f4       	brne	.+40     	; 0x1b2c <GPIO_setupPinDirection+0x19e>
				SET_BIT( DDRD, pin_num );
    1b04:	a1 e3       	ldi	r26, 0x31	; 49
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e1 e3       	ldi	r30, 0x31	; 49
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <GPIO_setupPinDirection+0x194>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <GPIO_setupPinDirection+0x190>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <GPIO_setupPinDirection+0x1c6>
			else
				CLEAR_BIT( DDRD, pin_num );
    1b2c:	a1 e3       	ldi	r26, 0x31	; 49
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e1 e3       	ldi	r30, 0x31	; 49
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <GPIO_setupPinDirection+0x1bc>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <GPIO_setupPinDirection+0x1b8>
    1b4e:	80 95       	com	r24
    1b50:	84 23       	and	r24, r20
    1b52:	8c 93       	st	X, r24
			break;
		}
	}
}
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <GPIO_writePin>:

/*
 * Description: Write a value to a specific pin.
 */
void GPIO_writePin( uint8 port_num, uint8 pin_num, uint8 value )
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <GPIO_writePin+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <GPIO_writePin+0x8>
    1b6c:	0f 92       	push	r0
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	6a 83       	std	Y+2, r22	; 0x02
    1b76:	4b 83       	std	Y+3, r20	; 0x03
	if( ( port_num >= NUM_OF_PORTS ) || ( pin_num >= NUM_OF_PINS_PER_PORT ) )
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	08 f0       	brcs	.+2      	; 0x1b80 <GPIO_writePin+0x1c>
    1b7e:	d5 c0       	rjmp	.+426    	; 0x1d2a <GPIO_writePin+0x1c6>
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	88 30       	cpi	r24, 0x08	; 8
    1b84:	08 f0       	brcs	.+2      	; 0x1b88 <GPIO_writePin+0x24>
    1b86:	d1 c0       	rjmp	.+418    	; 0x1d2a <GPIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3d 83       	std	Y+5, r19	; 0x05
    1b90:	2c 83       	std	Y+4, r18	; 0x04
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <GPIO_writePin+0x3a>
    1b9c:	43 c0       	rjmp	.+134    	; 0x1c24 <GPIO_writePin+0xc0>
    1b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <GPIO_writePin+0x4e>
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	71 f0       	breq	.+28     	; 0x1bcc <GPIO_writePin+0x68>
    1bb0:	bc c0       	rjmp	.+376    	; 0x1d2a <GPIO_writePin+0x1c6>
    1bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb6:	22 30       	cpi	r18, 0x02	; 2
    1bb8:	31 05       	cpc	r19, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <GPIO_writePin+0x5a>
    1bbc:	5f c0       	rjmp	.+190    	; 0x1c7c <GPIO_writePin+0x118>
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc2:	83 30       	cpi	r24, 0x03	; 3
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	09 f4       	brne	.+2      	; 0x1bca <GPIO_writePin+0x66>
    1bc8:	85 c0       	rjmp	.+266    	; 0x1cd4 <GPIO_writePin+0x170>
    1bca:	af c0       	rjmp	.+350    	; 0x1d2a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if( value == LOGIC_HIGH )
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	a1 f4       	brne	.+40     	; 0x1bfa <GPIO_writePin+0x96>
				SET_BIT( PORTA, pin_num );
    1bd2:	ab e3       	ldi	r26, 0x3B	; 59
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	eb e3       	ldi	r30, 0x3B	; 59
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <GPIO_writePin+0x8c>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <GPIO_writePin+0x88>
    1bf4:	84 2b       	or	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	98 c0       	rjmp	.+304    	; 0x1d2a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTA, pin_num );
    1bfa:	ab e3       	ldi	r26, 0x3B	; 59
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	eb e3       	ldi	r30, 0x3B	; 59
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_writePin+0xb4>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_writePin+0xb0>
    1c1c:	80 95       	com	r24
    1c1e:	84 23       	and	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	83 c0       	rjmp	.+262    	; 0x1d2a <GPIO_writePin+0x1c6>
			break;
		case PORTB_ID:
			if( value == LOGIC_HIGH )
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	a1 f4       	brne	.+40     	; 0x1c52 <GPIO_writePin+0xee>
				SET_BIT( PORTB, pin_num );
    1c2a:	a8 e3       	ldi	r26, 0x38	; 56
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e8 e3       	ldi	r30, 0x38	; 56
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <GPIO_writePin+0xe4>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <GPIO_writePin+0xe0>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	6c c0       	rjmp	.+216    	; 0x1d2a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTB, pin_num );
    1c52:	a8 e3       	ldi	r26, 0x38	; 56
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e8 e3       	ldi	r30, 0x38	; 56
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GPIO_writePin+0x10c>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <GPIO_writePin+0x108>
    1c74:	80 95       	com	r24
    1c76:	84 23       	and	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	57 c0       	rjmp	.+174    	; 0x1d2a <GPIO_writePin+0x1c6>
			break;
		case PORTC_ID:
			if( value == LOGIC_HIGH )
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	a1 f4       	brne	.+40     	; 0x1caa <GPIO_writePin+0x146>
				SET_BIT( PORTC, pin_num );
    1c82:	a5 e3       	ldi	r26, 0x35	; 53
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e5 e3       	ldi	r30, 0x35	; 53
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 2e       	mov	r0, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <GPIO_writePin+0x13c>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	0a 94       	dec	r0
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <GPIO_writePin+0x138>
    1ca4:	84 2b       	or	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	40 c0       	rjmp	.+128    	; 0x1d2a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTC, pin_num );
    1caa:	a5 e3       	ldi	r26, 0x35	; 53
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e5 e3       	ldi	r30, 0x35	; 53
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <GPIO_writePin+0x164>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <GPIO_writePin+0x160>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	2b c0       	rjmp	.+86     	; 0x1d2a <GPIO_writePin+0x1c6>
			break;
		case PORTD_ID:
			if( value == LOGIC_HIGH )
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	a1 f4       	brne	.+40     	; 0x1d02 <GPIO_writePin+0x19e>
				SET_BIT( PORTD, pin_num );
    1cda:	a2 e3       	ldi	r26, 0x32	; 50
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e2 e3       	ldi	r30, 0x32	; 50
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	48 2f       	mov	r20, r24
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	02 2e       	mov	r0, r18
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <GPIO_writePin+0x194>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <GPIO_writePin+0x190>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	14 c0       	rjmp	.+40     	; 0x1d2a <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT( PORTD, pin_num );
    1d02:	a2 e3       	ldi	r26, 0x32	; 50
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e2 e3       	ldi	r30, 0x32	; 50
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <GPIO_writePin+0x1bc>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <GPIO_writePin+0x1b8>
    1d24:	80 95       	com	r24
    1d26:	84 23       	and	r24, r20
    1d28:	8c 93       	st	X, r24
			break;
		}
	}
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <GPIO_readPin>:

/*
 * Description: Read a specific pin.
 */
uint8 GPIO_readPin( uint8 port_num, uint8 pin_num )
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <GPIO_readPin+0x6>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <GPIO_readPin+0x8>
    1d42:	0f 92       	push	r0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	8a 83       	std	Y+2, r24	; 0x02
    1d4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1d4c:	19 82       	std	Y+1, r1	; 0x01
	if( (port_num >= NUM_OF_PORTS) || (pin_num >= NUM_OF_PINS_PER_PORT) )
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	84 30       	cpi	r24, 0x04	; 4
    1d52:	08 f0       	brcs	.+2      	; 0x1d56 <GPIO_readPin+0x1c>
    1d54:	84 c0       	rjmp	.+264    	; 0x1e5e <GPIO_readPin+0x124>
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	88 30       	cpi	r24, 0x08	; 8
    1d5a:	08 f0       	brcs	.+2      	; 0x1d5e <GPIO_readPin+0x24>
    1d5c:	80 c0       	rjmp	.+256    	; 0x1e5e <GPIO_readPin+0x124>
	{

	}
	else
	{
		switch(port_num)
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	3d 83       	std	Y+5, r19	; 0x05
    1d66:	2c 83       	std	Y+4, r18	; 0x04
    1d68:	4c 81       	ldd	r20, Y+4	; 0x04
    1d6a:	5d 81       	ldd	r21, Y+5	; 0x05
    1d6c:	41 30       	cpi	r20, 0x01	; 1
    1d6e:	51 05       	cpc	r21, r1
    1d70:	79 f1       	breq	.+94     	; 0x1dd0 <GPIO_readPin+0x96>
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	9d 81       	ldd	r25, Y+5	; 0x05
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	91 05       	cpc	r25, r1
    1d7a:	34 f4       	brge	.+12     	; 0x1d88 <GPIO_readPin+0x4e>
    1d7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d80:	21 15       	cp	r18, r1
    1d82:	31 05       	cpc	r19, r1
    1d84:	69 f0       	breq	.+26     	; 0x1da0 <GPIO_readPin+0x66>
    1d86:	6b c0       	rjmp	.+214    	; 0x1e5e <GPIO_readPin+0x124>
    1d88:	4c 81       	ldd	r20, Y+4	; 0x04
    1d8a:	5d 81       	ldd	r21, Y+5	; 0x05
    1d8c:	42 30       	cpi	r20, 0x02	; 2
    1d8e:	51 05       	cpc	r21, r1
    1d90:	b9 f1       	breq	.+110    	; 0x1e00 <GPIO_readPin+0xc6>
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	83 30       	cpi	r24, 0x03	; 3
    1d98:	91 05       	cpc	r25, r1
    1d9a:	09 f4       	brne	.+2      	; 0x1d9e <GPIO_readPin+0x64>
    1d9c:	49 c0       	rjmp	.+146    	; 0x1e30 <GPIO_readPin+0xf6>
    1d9e:	5f c0       	rjmp	.+190    	; 0x1e5e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if ( BIT_IS_SET( PINA, pin_num ) )
    1da0:	e9 e3       	ldi	r30, 0x39	; 57
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <GPIO_readPin+0x7e>
    1db4:	55 95       	asr	r21
    1db6:	47 95       	ror	r20
    1db8:	8a 95       	dec	r24
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <GPIO_readPin+0x7a>
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	81 70       	andi	r24, 0x01	; 1
    1dc0:	90 70       	andi	r25, 0x00	; 0
    1dc2:	88 23       	and	r24, r24
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <GPIO_readPin+0x92>
				pin_value = LOGIC_HIGH;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	49 c0       	rjmp	.+146    	; 0x1e5e <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1dcc:	19 82       	std	Y+1, r1	; 0x01
    1dce:	47 c0       	rjmp	.+142    	; 0x1e5e <GPIO_readPin+0x124>
			break;
		case PORTB_ID:
			if ( BIT_IS_SET( PINB, pin_num ) )
    1dd0:	e6 e3       	ldi	r30, 0x36	; 54
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a9 01       	movw	r20, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <GPIO_readPin+0xae>
    1de4:	55 95       	asr	r21
    1de6:	47 95       	ror	r20
    1de8:	8a 95       	dec	r24
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <GPIO_readPin+0xaa>
    1dec:	ca 01       	movw	r24, r20
    1dee:	81 70       	andi	r24, 0x01	; 1
    1df0:	90 70       	andi	r25, 0x00	; 0
    1df2:	88 23       	and	r24, r24
    1df4:	19 f0       	breq	.+6      	; 0x1dfc <GPIO_readPin+0xc2>
				pin_value = LOGIC_HIGH;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	31 c0       	rjmp	.+98     	; 0x1e5e <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1dfc:	19 82       	std	Y+1, r1	; 0x01
    1dfe:	2f c0       	rjmp	.+94     	; 0x1e5e <GPIO_readPin+0x124>
			break;
		case PORTC_ID:
			if ( BIT_IS_SET( PINC, pin_num ) )
    1e00:	e3 e3       	ldi	r30, 0x33	; 51
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	88 2f       	mov	r24, r24
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a9 01       	movw	r20, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <GPIO_readPin+0xde>
    1e14:	55 95       	asr	r21
    1e16:	47 95       	ror	r20
    1e18:	8a 95       	dec	r24
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <GPIO_readPin+0xda>
    1e1c:	ca 01       	movw	r24, r20
    1e1e:	81 70       	andi	r24, 0x01	; 1
    1e20:	90 70       	andi	r25, 0x00	; 0
    1e22:	88 23       	and	r24, r24
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <GPIO_readPin+0xf2>
				pin_value = LOGIC_HIGH;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	19 c0       	rjmp	.+50     	; 0x1e5e <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1e2c:	19 82       	std	Y+1, r1	; 0x01
    1e2e:	17 c0       	rjmp	.+46     	; 0x1e5e <GPIO_readPin+0x124>
			break;
		case PORTD_ID:
			if ( BIT_IS_SET( PIND, pin_num ) )
    1e30:	e0 e3       	ldi	r30, 0x30	; 48
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a9 01       	movw	r20, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <GPIO_readPin+0x10e>
    1e44:	55 95       	asr	r21
    1e46:	47 95       	ror	r20
    1e48:	8a 95       	dec	r24
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <GPIO_readPin+0x10a>
    1e4c:	ca 01       	movw	r24, r20
    1e4e:	81 70       	andi	r24, 0x01	; 1
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	88 23       	and	r24, r24
    1e54:	19 f0       	breq	.+6      	; 0x1e5c <GPIO_readPin+0x122>
				pin_value = LOGIC_HIGH;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <GPIO_readPin+0x124>
			else
				pin_value = LOGIC_LOW;
    1e5c:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return pin_value;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <GPIO_setupPortDirection>:

/*
 * Description: Set the port as input or output.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <GPIO_setupPortDirection+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <GPIO_setupPortDirection+0x8>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
	if( port_num >= NUM_OF_PORTS )
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	90 f5       	brcc	.+100    	; 0x1eea <GPIO_setupPortDirection+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	3c 83       	std	Y+4, r19	; 0x04
    1e8e:	2b 83       	std	Y+3, r18	; 0x03
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	91 05       	cpc	r25, r1
    1e98:	d1 f0       	breq	.+52     	; 0x1ece <GPIO_setupPortDirection+0x5e>
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	22 30       	cpi	r18, 0x02	; 2
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <GPIO_setupPortDirection+0x3e>
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	61 f0       	breq	.+24     	; 0x1ec4 <GPIO_setupPortDirection+0x54>
    1eac:	1e c0       	rjmp	.+60     	; 0x1eea <GPIO_setupPortDirection+0x7a>
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	81 f0       	breq	.+32     	; 0x1ed8 <GPIO_setupPortDirection+0x68>
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	81 f0       	breq	.+32     	; 0x1ee2 <GPIO_setupPortDirection+0x72>
    1ec2:	13 c0       	rjmp	.+38     	; 0x1eea <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ec4:	ea e3       	ldi	r30, 0x3A	; 58
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	80 83       	st	Z, r24
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ece:	e7 e3       	ldi	r30, 0x37	; 55
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	80 83       	st	Z, r24
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ed8:	e4 e3       	ldi	r30, 0x34	; 52
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	80 83       	st	Z, r24
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ee2:	e1 e3       	ldi	r30, 0x31	; 49
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <GPIO_writePort>:

/*
 * Description: Write a value to a specific port.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <GPIO_writePort+0x6>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <GPIO_writePort+0x8>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	6a 83       	std	Y+2, r22	; 0x02
	if( port_num >= NUM_OF_PORTS )
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	84 30       	cpi	r24, 0x04	; 4
    1f0c:	90 f5       	brcc	.+100    	; 0x1f72 <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch (port_num)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	d1 f0       	breq	.+52     	; 0x1f56 <GPIO_writePort+0x5e>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <GPIO_writePort+0x3e>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <GPIO_writePort+0x54>
    1f34:	1e c0       	rjmp	.+60     	; 0x1f72 <GPIO_writePort+0x7a>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	81 f0       	breq	.+32     	; 0x1f60 <GPIO_writePort+0x68>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	81 f0       	breq	.+32     	; 0x1f6a <GPIO_writePort+0x72>
    1f4a:	13 c0       	rjmp	.+38     	; 0x1f72 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1f4c:	eb e3       	ldi	r30, 0x3B	; 59
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	80 83       	st	Z, r24
    1f54:	0e c0       	rjmp	.+28     	; 0x1f72 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1f56:	e8 e3       	ldi	r30, 0x38	; 56
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	80 83       	st	Z, r24
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1f60:	e5 e3       	ldi	r30, 0x35	; 53
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	80 83       	st	Z, r24
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1f6a:	e2 e3       	ldi	r30, 0x32	; 50
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <GPIO_readPort>:

/*
 * Description: Read a specific port.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <GPIO_readPort+0x6>
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <GPIO_readPort+0x8>
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1f8e:	19 82       	std	Y+1, r1	; 0x01
	if( port_num >= NUM_OF_PORTS )
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	84 30       	cpi	r24, 0x04	; 4
    1f94:	90 f5       	brcc	.+100    	; 0x1ffa <GPIO_readPort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	3c 83       	std	Y+4, r19	; 0x04
    1f9e:	2b 83       	std	Y+3, r18	; 0x03
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	d1 f0       	breq	.+52     	; 0x1fde <GPIO_readPort+0x5e>
    1faa:	2b 81       	ldd	r18, Y+3	; 0x03
    1fac:	3c 81       	ldd	r19, Y+4	; 0x04
    1fae:	22 30       	cpi	r18, 0x02	; 2
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <GPIO_readPort+0x3e>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	61 f0       	breq	.+24     	; 0x1fd4 <GPIO_readPort+0x54>
    1fbc:	1e c0       	rjmp	.+60     	; 0x1ffa <GPIO_readPort+0x7a>
    1fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc2:	22 30       	cpi	r18, 0x02	; 2
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	81 f0       	breq	.+32     	; 0x1fe8 <GPIO_readPort+0x68>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	83 30       	cpi	r24, 0x03	; 3
    1fce:	91 05       	cpc	r25, r1
    1fd0:	81 f0       	breq	.+32     	; 0x1ff2 <GPIO_readPort+0x72>
    1fd2:	13 c0       	rjmp	.+38     	; 0x1ffa <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA;
    1fd4:	e9 e3       	ldi	r30, 0x39	; 57
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	0e c0       	rjmp	.+28     	; 0x1ffa <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB;
    1fde:	e6 e3       	ldi	r30, 0x36	; 54
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	09 c0       	rjmp	.+18     	; 0x1ffa <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC;
    1fe8:	e3 e3       	ldi	r30, 0x33	; 51
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	89 83       	std	Y+1, r24	; 0x01
    1ff0:	04 c0       	rjmp	.+8      	; 0x1ffa <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND;
    1ff2:	e0 e3       	ldi	r30, 0x30	; 48
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <KEYPAD_getPressedKey>:
/* 16 inputs keypad */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif

uint8 KEYPAD_getPressedKey(void)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <KEYPAD_getPressedKey+0x6>
    2010:	0f 92       	push	r0
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
	uint8 col, row, keypad_port_value = 0;
    2016:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0; col<KEYPAD_NUM_COLS; col++) /* Loop for columns */
    2018:	1b 82       	std	Y+3, r1	; 0x03
    201a:	43 c0       	rjmp	.+134    	; 0x20a2 <KEYPAD_getPressedKey+0x98>
		{
			GPIO_setupPortDirection(KEYPAD_PORT_ID, PORT_INPUT);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID+col, PIN_OUTPUT);
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	98 2f       	mov	r25, r24
    2028:	9c 5f       	subi	r25, 0xFC	; 252
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	69 2f       	mov	r22, r25
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 c7 0c 	call	0x198e	; 0x198e <GPIO_setupPinDirection>
#if( KEYPAD_BUTTON_PRESSED == LOGIC_LOW )
			/*
			 *  Enable the internal pull-ups (0x0F)
			 *  set all the columns to 1 except the current column
			 */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9c 01       	movw	r18, r24
    203c:	2c 5f       	subi	r18, 0xFC	; 252
    203e:	3f 4f       	sbci	r19, 0xFF	; 255
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <KEYPAD_getPressedKey+0x40>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	2a 95       	dec	r18
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <KEYPAD_getPressedKey+0x3c>
    204e:	80 95       	com	r24
    2050:	89 83       	std	Y+1, r24	; 0x01
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	69 81       	ldd	r22, Y+1	; 0x01
    2056:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <GPIO_writePort>
			for(row=0; row<KEYPAD_NUM_ROWS; row++) /* Loop for rows */
    205a:	1a 82       	std	Y+2, r1	; 0x02
    205c:	1c c0       	rjmp	.+56     	; 0x2096 <KEYPAD_getPressedKey+0x8c>
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	6a 81       	ldd	r22, Y+2	; 0x02
    2062:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <GPIO_readPin>
    2066:	88 23       	and	r24, r24
    2068:	99 f4       	brne	.+38     	; 0x2090 <KEYPAD_getPressedKey+0x86>
				{
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	98 2f       	mov	r25, r24
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	89 0f       	add	r24, r25
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	0e 94 56 10 	call	0x20ac	; 0x20ac <KEYPAD_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
			for(row=0; row<KEYPAD_NUM_ROWS; row++) /* Loop for rows */
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	8a 83       	std	Y+2, r24	; 0x02
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	84 30       	cpi	r24, 0x04	; 4
    209a:	08 f3       	brcs	.-62     	; 0x205e <KEYPAD_getPressedKey+0x54>
uint8 KEYPAD_getPressedKey(void)
{
	uint8 col, row, keypad_port_value = 0;
	while(1)
	{
		for(col=0; col<KEYPAD_NUM_COLS; col++) /* Loop for columns */
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	8f 5f       	subi	r24, 0xFF	; 255
    20a0:	8b 83       	std	Y+3, r24	; 0x03
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	08 f4       	brcc	.+2      	; 0x20aa <KEYPAD_getPressedKey+0xa0>
    20a8:	b9 cf       	rjmp	.-142    	; 0x201c <KEYPAD_getPressedKey+0x12>
    20aa:	b6 cf       	rjmp	.-148    	; 0x2018 <KEYPAD_getPressedKey+0xe>

000020ac <KEYPAD_4x4_adjustKeyNumber>:

/*
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <KEYPAD_4x4_adjustKeyNumber+0x6>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <KEYPAD_4x4_adjustKeyNumber+0x8>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20ba:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	3c 83       	std	Y+4, r19	; 0x04
    20c4:	2b 83       	std	Y+3, r18	; 0x03
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	88 30       	cpi	r24, 0x08	; 8
    20cc:	91 05       	cpc	r25, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <KEYPAD_4x4_adjustKeyNumber+0x26>
    20d0:	70 c0       	rjmp	.+224    	; 0x21b2 <KEYPAD_4x4_adjustKeyNumber+0x106>
    20d2:	2b 81       	ldd	r18, Y+3	; 0x03
    20d4:	3c 81       	ldd	r19, Y+4	; 0x04
    20d6:	29 30       	cpi	r18, 0x09	; 9
    20d8:	31 05       	cpc	r19, r1
    20da:	5c f5       	brge	.+86     	; 0x2132 <KEYPAD_4x4_adjustKeyNumber+0x86>
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	84 30       	cpi	r24, 0x04	; 4
    20e2:	91 05       	cpc	r25, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    20e6:	59 c0       	rjmp	.+178    	; 0x219a <KEYPAD_4x4_adjustKeyNumber+0xee>
    20e8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ea:	3c 81       	ldd	r19, Y+4	; 0x04
    20ec:	25 30       	cpi	r18, 0x05	; 5
    20ee:	31 05       	cpc	r19, r1
    20f0:	9c f4       	brge	.+38     	; 0x2118 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	82 30       	cpi	r24, 0x02	; 2
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <KEYPAD_4x4_adjustKeyNumber+0x52>
    20fc:	48 c0       	rjmp	.+144    	; 0x218e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	23 30       	cpi	r18, 0x03	; 3
    2104:	31 05       	cpc	r19, r1
    2106:	0c f0       	brlt	.+2      	; 0x210a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2108:	45 c0       	rjmp	.+138    	; 0x2194 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	91 05       	cpc	r25, r1
    2112:	09 f4       	brne	.+2      	; 0x2116 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2114:	39 c0       	rjmp	.+114    	; 0x2188 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2116:	67 c0       	rjmp	.+206    	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2118:	2b 81       	ldd	r18, Y+3	; 0x03
    211a:	3c 81       	ldd	r19, Y+4	; 0x04
    211c:	26 30       	cpi	r18, 0x06	; 6
    211e:	31 05       	cpc	r19, r1
    2120:	09 f4       	brne	.+2      	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2122:	41 c0       	rjmp	.+130    	; 0x21a6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	87 30       	cpi	r24, 0x07	; 7
    212a:	91 05       	cpc	r25, r1
    212c:	0c f0       	brlt	.+2      	; 0x2130 <KEYPAD_4x4_adjustKeyNumber+0x84>
    212e:	3e c0       	rjmp	.+124    	; 0x21ac <KEYPAD_4x4_adjustKeyNumber+0x100>
    2130:	37 c0       	rjmp	.+110    	; 0x21a0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2132:	2b 81       	ldd	r18, Y+3	; 0x03
    2134:	3c 81       	ldd	r19, Y+4	; 0x04
    2136:	2c 30       	cpi	r18, 0x0C	; 12
    2138:	31 05       	cpc	r19, r1
    213a:	09 f4       	brne	.+2      	; 0x213e <KEYPAD_4x4_adjustKeyNumber+0x92>
    213c:	46 c0       	rjmp	.+140    	; 0x21ca <KEYPAD_4x4_adjustKeyNumber+0x11e>
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	8d 30       	cpi	r24, 0x0D	; 13
    2144:	91 05       	cpc	r25, r1
    2146:	5c f4       	brge	.+22     	; 0x215e <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	2a 30       	cpi	r18, 0x0A	; 10
    214e:	31 05       	cpc	r19, r1
    2150:	b1 f1       	breq	.+108    	; 0x21be <KEYPAD_4x4_adjustKeyNumber+0x112>
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	8b 30       	cpi	r24, 0x0B	; 11
    2158:	91 05       	cpc	r25, r1
    215a:	a4 f5       	brge	.+104    	; 0x21c4 <KEYPAD_4x4_adjustKeyNumber+0x118>
    215c:	2d c0       	rjmp	.+90     	; 0x21b8 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    215e:	2b 81       	ldd	r18, Y+3	; 0x03
    2160:	3c 81       	ldd	r19, Y+4	; 0x04
    2162:	2e 30       	cpi	r18, 0x0E	; 14
    2164:	31 05       	cpc	r19, r1
    2166:	b9 f1       	breq	.+110    	; 0x21d6 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	8e 30       	cpi	r24, 0x0E	; 14
    216e:	91 05       	cpc	r25, r1
    2170:	7c f1       	brlt	.+94     	; 0x21d0 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2172:	2b 81       	ldd	r18, Y+3	; 0x03
    2174:	3c 81       	ldd	r19, Y+4	; 0x04
    2176:	2f 30       	cpi	r18, 0x0F	; 15
    2178:	31 05       	cpc	r19, r1
    217a:	79 f1       	breq	.+94     	; 0x21da <KEYPAD_4x4_adjustKeyNumber+0x12e>
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	80 31       	cpi	r24, 0x10	; 16
    2182:	91 05       	cpc	r25, r1
    2184:	69 f1       	breq	.+90     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2186:	2f c0       	rjmp	.+94     	; 0x21e6 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    2188:	87 e0       	ldi	r24, 0x07	; 7
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	2e c0       	rjmp	.+92     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    218e:	88 e0       	ldi	r24, 0x08	; 8
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	2b c0       	rjmp	.+86     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    2194:	89 e0       	ldi	r24, 0x09	; 9
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	28 c0       	rjmp	.+80     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    219a:	85 e2       	ldi	r24, 0x25	; 37
    219c:	89 83       	std	Y+1, r24	; 0x01
    219e:	25 c0       	rjmp	.+74     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    21a0:	84 e0       	ldi	r24, 0x04	; 4
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	22 c0       	rjmp	.+68     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    21a6:	85 e0       	ldi	r24, 0x05	; 5
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	1f c0       	rjmp	.+62     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    21ac:	86 e0       	ldi	r24, 0x06	; 6
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	1c c0       	rjmp	.+56     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21b2:	8a e2       	ldi	r24, 0x2A	; 42
    21b4:	89 83       	std	Y+1, r24	; 0x01
    21b6:	19 c0       	rjmp	.+50     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	16 c0       	rjmp	.+44     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	13 c0       	rjmp	.+38     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    21c4:	83 e0       	ldi	r24, 0x03	; 3
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	10 c0       	rjmp	.+32     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    21ca:	8d e2       	ldi	r24, 0x2D	; 45
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    21d0:	8d e0       	ldi	r24, 0x0D	; 13
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	0a c0       	rjmp	.+20     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    21d6:	19 82       	std	Y+1, r1	; 0x01
    21d8:	08 c0       	rjmp	.+16     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    21da:	8d e3       	ldi	r24, 0x3D	; 61
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	05 c0       	rjmp	.+10     	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    21e0:	8b e2       	ldi	r24, 0x2B	; 43
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <LCD_init>:
/*
 * Description : Initialize the LCD.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init( void )
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection( LCD_RS_PORT_ID,LCD_RS_PIN_ID, PIN_OUTPUT );
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	64 e0       	ldi	r22, 0x04	; 4
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	0e 94 c7 0c 	call	0x198e	; 0x198e <GPIO_setupPinDirection>
	GPIO_setupPinDirection( LCD_RW_PORT_ID,LCD_RW_PIN_ID, PIN_OUTPUT );
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	65 e0       	ldi	r22, 0x05	; 5
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 c7 0c 	call	0x198e	; 0x198e <GPIO_setupPinDirection>
	GPIO_setupPinDirection( LCD_E_PORT_ID,LCD_E_PIN_ID, PIN_OUTPUT );
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	66 e0       	ldi	r22, 0x06	; 6
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 c7 0c 	call	0x198e	; 0x198e <GPIO_setupPinDirection>
	GPIO_setupPortDirection( LCD_DATA_PORT_ID, PORT_OUTPUT );
	/* Configure the type */
	LCD_sendCommand( LCD_TWO_LINES_EIGHT_BITS_MODE );
#endif
	/* Send the initializing commands */
	LCD_sendCommand( LCD_CURSOR_OFF );
    2220:	8c e0       	ldi	r24, 0x0C	; 12
    2222:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_sendCommand>
	LCD_sendCommand( LCD_CLEAR_COMMAND );
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_sendCommand>
}
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <LCD_sendCommand>:

/*
 * Description : Send the required command to the screen.
 */
void LCD_sendCommand( uint8 command )
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	e9 97       	sbiw	r28, 0x39	; 57
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	89 af       	std	Y+57, r24	; 0x39
	uint8 lcd_port_value = 0;
#endif
	/*
	 * Take care that we have to function the lcd before enabling it.
	 */
	GPIO_writePin( LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW );
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	64 e0       	ldi	r22, 0x04	; 4
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
	GPIO_writePin( LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW );
    2252:	83 e0       	ldi	r24, 0x03	; 3
    2254:	65 e0       	ldi	r22, 0x05	; 5
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	a0 e8       	ldi	r26, 0x80	; 128
    2262:	bf e3       	ldi	r27, 0x3F	; 63
    2264:	8d ab       	std	Y+53, r24	; 0x35
    2266:	9e ab       	std	Y+54, r25	; 0x36
    2268:	af ab       	std	Y+55, r26	; 0x37
    226a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226c:	6d a9       	ldd	r22, Y+53	; 0x35
    226e:	7e a9       	ldd	r23, Y+54	; 0x36
    2270:	8f a9       	ldd	r24, Y+55	; 0x37
    2272:	98 ad       	ldd	r25, Y+56	; 0x38
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	4a e7       	ldi	r20, 0x7A	; 122
    227a:	53 e4       	ldi	r21, 0x43	; 67
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	89 ab       	std	Y+49, r24	; 0x31
    2286:	9a ab       	std	Y+50, r25	; 0x32
    2288:	ab ab       	std	Y+51, r26	; 0x33
    228a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    228c:	69 a9       	ldd	r22, Y+49	; 0x31
    228e:	7a a9       	ldd	r23, Y+50	; 0x32
    2290:	8b a9       	ldd	r24, Y+51	; 0x33
    2292:	9c a9       	ldd	r25, Y+52	; 0x34
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e8       	ldi	r20, 0x80	; 128
    229a:	5f e3       	ldi	r21, 0x3F	; 63
    229c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a0:	88 23       	and	r24, r24
    22a2:	2c f4       	brge	.+10     	; 0x22ae <LCD_sendCommand+0x7c>
		__ticks = 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	98 ab       	std	Y+48, r25	; 0x30
    22aa:	8f a7       	std	Y+47, r24	; 0x2f
    22ac:	3f c0       	rjmp	.+126    	; 0x232c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    22ae:	69 a9       	ldd	r22, Y+49	; 0x31
    22b0:	7a a9       	ldd	r23, Y+50	; 0x32
    22b2:	8b a9       	ldd	r24, Y+51	; 0x33
    22b4:	9c a9       	ldd	r25, Y+52	; 0x34
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	3f ef       	ldi	r19, 0xFF	; 255
    22ba:	4f e7       	ldi	r20, 0x7F	; 127
    22bc:	57 e4       	ldi	r21, 0x47	; 71
    22be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c2:	18 16       	cp	r1, r24
    22c4:	4c f5       	brge	.+82     	; 0x2318 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c6:	6d a9       	ldd	r22, Y+53	; 0x35
    22c8:	7e a9       	ldd	r23, Y+54	; 0x36
    22ca:	8f a9       	ldd	r24, Y+55	; 0x37
    22cc:	98 ad       	ldd	r25, Y+56	; 0x38
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e2       	ldi	r20, 0x20	; 32
    22d4:	51 e4       	ldi	r21, 0x41	; 65
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	98 ab       	std	Y+48, r25	; 0x30
    22ec:	8f a7       	std	Y+47, r24	; 0x2f
    22ee:	0f c0       	rjmp	.+30     	; 0x230e <LCD_sendCommand+0xdc>
    22f0:	89 e1       	ldi	r24, 0x19	; 25
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9e a7       	std	Y+46, r25	; 0x2e
    22f6:	8d a7       	std	Y+45, r24	; 0x2d
    22f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    22fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_sendCommand+0xca>
    2300:	9e a7       	std	Y+46, r25	; 0x2e
    2302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2304:	8f a5       	ldd	r24, Y+47	; 0x2f
    2306:	98 a9       	ldd	r25, Y+48	; 0x30
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	98 ab       	std	Y+48, r25	; 0x30
    230c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    230e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2310:	98 a9       	ldd	r25, Y+48	; 0x30
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	69 f7       	brne	.-38     	; 0x22f0 <LCD_sendCommand+0xbe>
    2316:	14 c0       	rjmp	.+40     	; 0x2340 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2318:	69 a9       	ldd	r22, Y+49	; 0x31
    231a:	7a a9       	ldd	r23, Y+50	; 0x32
    231c:	8b a9       	ldd	r24, Y+51	; 0x33
    231e:	9c a9       	ldd	r25, Y+52	; 0x34
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	98 ab       	std	Y+48, r25	; 0x30
    232a:	8f a7       	std	Y+47, r24	; 0x2f
    232c:	8f a5       	ldd	r24, Y+47	; 0x2f
    232e:	98 a9       	ldd	r25, Y+48	; 0x30
    2330:	9c a7       	std	Y+44, r25	; 0x2c
    2332:	8b a7       	std	Y+43, r24	; 0x2b
    2334:	8b a5       	ldd	r24, Y+43	; 0x2b
    2336:	9c a5       	ldd	r25, Y+44	; 0x2c
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_sendCommand+0x106>
    233c:	9c a7       	std	Y+44, r25	; 0x2c
    233e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin( LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH );
    2340:	83 e0       	ldi	r24, 0x03	; 3
    2342:	66 e0       	ldi	r22, 0x06	; 6
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	8f a3       	std	Y+39, r24	; 0x27
    2354:	98 a7       	std	Y+40, r25	; 0x28
    2356:	a9 a7       	std	Y+41, r26	; 0x29
    2358:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	6f a1       	ldd	r22, Y+39	; 0x27
    235c:	78 a5       	ldd	r23, Y+40	; 0x28
    235e:	89 a5       	ldd	r24, Y+41	; 0x29
    2360:	9a a5       	ldd	r25, Y+42	; 0x2a
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4a e7       	ldi	r20, 0x7A	; 122
    2368:	53 e4       	ldi	r21, 0x43	; 67
    236a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	8b a3       	std	Y+35, r24	; 0x23
    2374:	9c a3       	std	Y+36, r25	; 0x24
    2376:	ad a3       	std	Y+37, r26	; 0x25
    2378:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    237a:	6b a1       	ldd	r22, Y+35	; 0x23
    237c:	7c a1       	ldd	r23, Y+36	; 0x24
    237e:	8d a1       	ldd	r24, Y+37	; 0x25
    2380:	9e a1       	ldd	r25, Y+38	; 0x26
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238e:	88 23       	and	r24, r24
    2390:	2c f4       	brge	.+10     	; 0x239c <LCD_sendCommand+0x16a>
		__ticks = 1;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9a a3       	std	Y+34, r25	; 0x22
    2398:	89 a3       	std	Y+33, r24	; 0x21
    239a:	3f c0       	rjmp	.+126    	; 0x241a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    239c:	6b a1       	ldd	r22, Y+35	; 0x23
    239e:	7c a1       	ldd	r23, Y+36	; 0x24
    23a0:	8d a1       	ldd	r24, Y+37	; 0x25
    23a2:	9e a1       	ldd	r25, Y+38	; 0x26
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	3f ef       	ldi	r19, 0xFF	; 255
    23a8:	4f e7       	ldi	r20, 0x7F	; 127
    23aa:	57 e4       	ldi	r21, 0x47	; 71
    23ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b0:	18 16       	cp	r1, r24
    23b2:	4c f5       	brge	.+82     	; 0x2406 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	6f a1       	ldd	r22, Y+39	; 0x27
    23b6:	78 a5       	ldd	r23, Y+40	; 0x28
    23b8:	89 a5       	ldd	r24, Y+41	; 0x29
    23ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e2       	ldi	r20, 0x20	; 32
    23c2:	51 e4       	ldi	r21, 0x41	; 65
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9a a3       	std	Y+34, r25	; 0x22
    23da:	89 a3       	std	Y+33, r24	; 0x21
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_sendCommand+0x1ca>
    23de:	89 e1       	ldi	r24, 0x19	; 25
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	98 a3       	std	Y+32, r25	; 0x20
    23e4:	8f 8f       	std	Y+31, r24	; 0x1f
    23e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23e8:	98 a1       	ldd	r25, Y+32	; 0x20
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <LCD_sendCommand+0x1b8>
    23ee:	98 a3       	std	Y+32, r25	; 0x20
    23f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f2:	89 a1       	ldd	r24, Y+33	; 0x21
    23f4:	9a a1       	ldd	r25, Y+34	; 0x22
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	9a a3       	std	Y+34, r25	; 0x22
    23fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fc:	89 a1       	ldd	r24, Y+33	; 0x21
    23fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	69 f7       	brne	.-38     	; 0x23de <LCD_sendCommand+0x1ac>
    2404:	14 c0       	rjmp	.+40     	; 0x242e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2406:	6b a1       	ldd	r22, Y+35	; 0x23
    2408:	7c a1       	ldd	r23, Y+36	; 0x24
    240a:	8d a1       	ldd	r24, Y+37	; 0x25
    240c:	9e a1       	ldd	r25, Y+38	; 0x26
    240e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9a a3       	std	Y+34, r25	; 0x22
    2418:	89 a3       	std	Y+33, r24	; 0x21
    241a:	89 a1       	ldd	r24, Y+33	; 0x21
    241c:	9a a1       	ldd	r25, Y+34	; 0x22
    241e:	9e 8f       	std	Y+30, r25	; 0x1e
    2420:	8d 8f       	std	Y+29, r24	; 0x1d
    2422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2424:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_sendCommand+0x1f4>
    242a:	9e 8f       	std	Y+30, r25	; 0x1e
    242c:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePort( LCD_DATA_PORT_ID,lcd_port_value );
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin( LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_LOW ); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif ( LCD_DATA_BITS_MODE == 8 )
	GPIO_writePort( LCD_DATA_PORT_ID, command );
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	69 ad       	ldd	r22, Y+57	; 0x39
    2432:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <GPIO_writePort>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e8       	ldi	r26, 0x80	; 128
    243c:	bf e3       	ldi	r27, 0x3F	; 63
    243e:	89 8f       	std	Y+25, r24	; 0x19
    2440:	9a 8f       	std	Y+26, r25	; 0x1a
    2442:	ab 8f       	std	Y+27, r26	; 0x1b
    2444:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	69 8d       	ldd	r22, Y+25	; 0x19
    2448:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    244c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a e7       	ldi	r20, 0x7A	; 122
    2454:	53 e4       	ldi	r21, 0x43	; 67
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8d 8b       	std	Y+21, r24	; 0x15
    2460:	9e 8b       	std	Y+22, r25	; 0x16
    2462:	af 8b       	std	Y+23, r26	; 0x17
    2464:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2466:	6d 89       	ldd	r22, Y+21	; 0x15
    2468:	7e 89       	ldd	r23, Y+22	; 0x16
    246a:	8f 89       	ldd	r24, Y+23	; 0x17
    246c:	98 8d       	ldd	r25, Y+24	; 0x18
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_sendCommand+0x256>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9c 8b       	std	Y+20, r25	; 0x14
    2484:	8b 8b       	std	Y+19, r24	; 0x13
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2488:	6d 89       	ldd	r22, Y+21	; 0x15
    248a:	7e 89       	ldd	r23, Y+22	; 0x16
    248c:	8f 89       	ldd	r24, Y+23	; 0x17
    248e:	98 8d       	ldd	r25, Y+24	; 0x18
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	69 8d       	ldd	r22, Y+25	; 0x19
    24a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_sendCommand+0x2b6>
    24ca:	89 e1       	ldi	r24, 0x19	; 25
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	9a 8b       	std	Y+18, r25	; 0x12
    24d0:	89 8b       	std	Y+17, r24	; 0x11
    24d2:	89 89       	ldd	r24, Y+17	; 0x11
    24d4:	9a 89       	ldd	r25, Y+18	; 0x12
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_sendCommand+0x2a4>
    24da:	9a 8b       	std	Y+18, r25	; 0x12
    24dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_sendCommand+0x298>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6d 89       	ldd	r22, Y+21	; 0x15
    24f4:	7e 89       	ldd	r23, Y+22	; 0x16
    24f6:	8f 89       	ldd	r24, Y+23	; 0x17
    24f8:	98 8d       	ldd	r25, Y+24	; 0x18
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9c 8b       	std	Y+20, r25	; 0x14
    2504:	8b 8b       	std	Y+19, r24	; 0x13
    2506:	8b 89       	ldd	r24, Y+19	; 0x13
    2508:	9c 89       	ldd	r25, Y+20	; 0x14
    250a:	98 8b       	std	Y+16, r25	; 0x10
    250c:	8f 87       	std	Y+15, r24	; 0x0f
    250e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2510:	98 89       	ldd	r25, Y+16	; 0x10
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_sendCommand+0x2e0>
    2516:	98 8b       	std	Y+16, r25	; 0x10
    2518:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin( LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW ); /* Disable LCD E=0 */
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	66 e0       	ldi	r22, 0x06	; 6
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a0 e8       	ldi	r26, 0x80	; 128
    252a:	bf e3       	ldi	r27, 0x3F	; 63
    252c:	8b 87       	std	Y+11, r24	; 0x0b
    252e:	9c 87       	std	Y+12, r25	; 0x0c
    2530:	ad 87       	std	Y+13, r26	; 0x0d
    2532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2534:	6b 85       	ldd	r22, Y+11	; 0x0b
    2536:	7c 85       	ldd	r23, Y+12	; 0x0c
    2538:	8d 85       	ldd	r24, Y+13	; 0x0d
    253a:	9e 85       	ldd	r25, Y+14	; 0x0e
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	4a e7       	ldi	r20, 0x7A	; 122
    2542:	53 e4       	ldi	r21, 0x43	; 67
    2544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	8f 83       	std	Y+7, r24	; 0x07
    254e:	98 87       	std	Y+8, r25	; 0x08
    2550:	a9 87       	std	Y+9, r26	; 0x09
    2552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	2c f4       	brge	.+10     	; 0x2576 <LCD_sendCommand+0x344>
		__ticks = 1;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9e 83       	std	Y+6, r25	; 0x06
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2576:	6f 81       	ldd	r22, Y+7	; 0x07
    2578:	78 85       	ldd	r23, Y+8	; 0x08
    257a:	89 85       	ldd	r24, Y+9	; 0x09
    257c:	9a 85       	ldd	r25, Y+10	; 0x0a
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	3f ef       	ldi	r19, 0xFF	; 255
    2582:	4f e7       	ldi	r20, 0x7F	; 127
    2584:	57 e4       	ldi	r21, 0x47	; 71
    2586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258a:	18 16       	cp	r1, r24
    258c:	4c f5       	brge	.+82     	; 0x25e0 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e2       	ldi	r20, 0x20	; 32
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <LCD_sendCommand+0x3a4>
    25b8:	89 e1       	ldi	r24, 0x19	; 25
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9c 83       	std	Y+4, r25	; 0x04
    25be:	8b 83       	std	Y+3, r24	; 0x03
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <LCD_sendCommand+0x392>
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
    25ce:	9e 81       	ldd	r25, Y+6	; 0x06
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	69 f7       	brne	.-38     	; 0x25b8 <LCD_sendCommand+0x386>
    25de:	14 c0       	rjmp	.+40     	; 0x2608 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e0:	6f 81       	ldd	r22, Y+7	; 0x07
    25e2:	78 85       	ldd	r23, Y+8	; 0x08
    25e4:	89 85       	ldd	r24, Y+9	; 0x09
    25e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	9e 83       	std	Y+6, r25	; 0x06
    25f2:	8d 83       	std	Y+5, r24	; 0x05
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	9a 83       	std	Y+2, r25	; 0x02
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	f1 f7       	brne	.-4      	; 0x2600 <LCD_sendCommand+0x3ce>
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2608:	e9 96       	adiw	r28, 0x39	; 57
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	cf 91       	pop	r28
    2616:	df 91       	pop	r29
    2618:	08 95       	ret

0000261a <LCD_displayCharacter>:

/*
 * Description : Display the required character on the screen.
 */
void LCD_displayCharacter( uint8 data )
{
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	e9 97       	sbiw	r28, 0x39	; 57
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	89 af       	std	Y+57, r24	; 0x39
	uint8 lcd_port_value = 0;
#endif
	/*
	 * Take care that we have to function the lcd before enabling it.
	 */
	GPIO_writePin( LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH );
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	64 e0       	ldi	r22, 0x04	; 4
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
	GPIO_writePin( LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW );
    263a:	83 e0       	ldi	r24, 0x03	; 3
    263c:	65 e0       	ldi	r22, 0x05	; 5
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 e8       	ldi	r26, 0x80	; 128
    264a:	bf e3       	ldi	r27, 0x3F	; 63
    264c:	8d ab       	std	Y+53, r24	; 0x35
    264e:	9e ab       	std	Y+54, r25	; 0x36
    2650:	af ab       	std	Y+55, r26	; 0x37
    2652:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2654:	6d a9       	ldd	r22, Y+53	; 0x35
    2656:	7e a9       	ldd	r23, Y+54	; 0x36
    2658:	8f a9       	ldd	r24, Y+55	; 0x37
    265a:	98 ad       	ldd	r25, Y+56	; 0x38
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	4a e7       	ldi	r20, 0x7A	; 122
    2662:	53 e4       	ldi	r21, 0x43	; 67
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	89 ab       	std	Y+49, r24	; 0x31
    266e:	9a ab       	std	Y+50, r25	; 0x32
    2670:	ab ab       	std	Y+51, r26	; 0x33
    2672:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2674:	69 a9       	ldd	r22, Y+49	; 0x31
    2676:	7a a9       	ldd	r23, Y+50	; 0x32
    2678:	8b a9       	ldd	r24, Y+51	; 0x33
    267a:	9c a9       	ldd	r25, Y+52	; 0x34
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e8       	ldi	r20, 0x80	; 128
    2682:	5f e3       	ldi	r21, 0x3F	; 63
    2684:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2688:	88 23       	and	r24, r24
    268a:	2c f4       	brge	.+10     	; 0x2696 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	98 ab       	std	Y+48, r25	; 0x30
    2692:	8f a7       	std	Y+47, r24	; 0x2f
    2694:	3f c0       	rjmp	.+126    	; 0x2714 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2696:	69 a9       	ldd	r22, Y+49	; 0x31
    2698:	7a a9       	ldd	r23, Y+50	; 0x32
    269a:	8b a9       	ldd	r24, Y+51	; 0x33
    269c:	9c a9       	ldd	r25, Y+52	; 0x34
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	4c f5       	brge	.+82     	; 0x2700 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	6d a9       	ldd	r22, Y+53	; 0x35
    26b0:	7e a9       	ldd	r23, Y+54	; 0x36
    26b2:	8f a9       	ldd	r24, Y+55	; 0x37
    26b4:	98 ad       	ldd	r25, Y+56	; 0x38
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e2       	ldi	r20, 0x20	; 32
    26bc:	51 e4       	ldi	r21, 0x41	; 65
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	98 ab       	std	Y+48, r25	; 0x30
    26d4:	8f a7       	std	Y+47, r24	; 0x2f
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <LCD_displayCharacter+0xdc>
    26d8:	89 e1       	ldi	r24, 0x19	; 25
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	9e a7       	std	Y+46, r25	; 0x2e
    26de:	8d a7       	std	Y+45, r24	; 0x2d
    26e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <LCD_displayCharacter+0xca>
    26e8:	9e a7       	std	Y+46, r25	; 0x2e
    26ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ee:	98 a9       	ldd	r25, Y+48	; 0x30
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	98 ab       	std	Y+48, r25	; 0x30
    26f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f8:	98 a9       	ldd	r25, Y+48	; 0x30
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	69 f7       	brne	.-38     	; 0x26d8 <LCD_displayCharacter+0xbe>
    26fe:	14 c0       	rjmp	.+40     	; 0x2728 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2700:	69 a9       	ldd	r22, Y+49	; 0x31
    2702:	7a a9       	ldd	r23, Y+50	; 0x32
    2704:	8b a9       	ldd	r24, Y+51	; 0x33
    2706:	9c a9       	ldd	r25, Y+52	; 0x34
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	98 ab       	std	Y+48, r25	; 0x30
    2712:	8f a7       	std	Y+47, r24	; 0x2f
    2714:	8f a5       	ldd	r24, Y+47	; 0x2f
    2716:	98 a9       	ldd	r25, Y+48	; 0x30
    2718:	9c a7       	std	Y+44, r25	; 0x2c
    271a:	8b a7       	std	Y+43, r24	; 0x2b
    271c:	8b a5       	ldd	r24, Y+43	; 0x2b
    271e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	f1 f7       	brne	.-4      	; 0x2720 <LCD_displayCharacter+0x106>
    2724:	9c a7       	std	Y+44, r25	; 0x2c
    2726:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin( LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH );
    2728:	83 e0       	ldi	r24, 0x03	; 3
    272a:	66 e0       	ldi	r22, 0x06	; 6
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e8       	ldi	r26, 0x80	; 128
    2738:	bf e3       	ldi	r27, 0x3F	; 63
    273a:	8f a3       	std	Y+39, r24	; 0x27
    273c:	98 a7       	std	Y+40, r25	; 0x28
    273e:	a9 a7       	std	Y+41, r26	; 0x29
    2740:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	6f a1       	ldd	r22, Y+39	; 0x27
    2744:	78 a5       	ldd	r23, Y+40	; 0x28
    2746:	89 a5       	ldd	r24, Y+41	; 0x29
    2748:	9a a5       	ldd	r25, Y+42	; 0x2a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	4a e7       	ldi	r20, 0x7A	; 122
    2750:	53 e4       	ldi	r21, 0x43	; 67
    2752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	8b a3       	std	Y+35, r24	; 0x23
    275c:	9c a3       	std	Y+36, r25	; 0x24
    275e:	ad a3       	std	Y+37, r26	; 0x25
    2760:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	2c f4       	brge	.+10     	; 0x2784 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	9a a3       	std	Y+34, r25	; 0x22
    2780:	89 a3       	std	Y+33, r24	; 0x21
    2782:	3f c0       	rjmp	.+126    	; 0x2802 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	3f ef       	ldi	r19, 0xFF	; 255
    2790:	4f e7       	ldi	r20, 0x7F	; 127
    2792:	57 e4       	ldi	r21, 0x47	; 71
    2794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2798:	18 16       	cp	r1, r24
    279a:	4c f5       	brge	.+82     	; 0x27ee <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279c:	6f a1       	ldd	r22, Y+39	; 0x27
    279e:	78 a5       	ldd	r23, Y+40	; 0x28
    27a0:	89 a5       	ldd	r24, Y+41	; 0x29
    27a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	40 e2       	ldi	r20, 0x20	; 32
    27aa:	51 e4       	ldi	r21, 0x41	; 65
    27ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9a a3       	std	Y+34, r25	; 0x22
    27c2:	89 a3       	std	Y+33, r24	; 0x21
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <LCD_displayCharacter+0x1ca>
    27c6:	89 e1       	ldi	r24, 0x19	; 25
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	98 a3       	std	Y+32, r25	; 0x20
    27cc:	8f 8f       	std	Y+31, r24	; 0x1f
    27ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27d0:	98 a1       	ldd	r25, Y+32	; 0x20
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_displayCharacter+0x1b8>
    27d6:	98 a3       	std	Y+32, r25	; 0x20
    27d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27da:	89 a1       	ldd	r24, Y+33	; 0x21
    27dc:	9a a1       	ldd	r25, Y+34	; 0x22
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	9a a3       	std	Y+34, r25	; 0x22
    27e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e4:	89 a1       	ldd	r24, Y+33	; 0x21
    27e6:	9a a1       	ldd	r25, Y+34	; 0x22
    27e8:	00 97       	sbiw	r24, 0x00	; 0
    27ea:	69 f7       	brne	.-38     	; 0x27c6 <LCD_displayCharacter+0x1ac>
    27ec:	14 c0       	rjmp	.+40     	; 0x2816 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ee:	6b a1       	ldd	r22, Y+35	; 0x23
    27f0:	7c a1       	ldd	r23, Y+36	; 0x24
    27f2:	8d a1       	ldd	r24, Y+37	; 0x25
    27f4:	9e a1       	ldd	r25, Y+38	; 0x26
    27f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	9a a3       	std	Y+34, r25	; 0x22
    2800:	89 a3       	std	Y+33, r24	; 0x21
    2802:	89 a1       	ldd	r24, Y+33	; 0x21
    2804:	9a a1       	ldd	r25, Y+34	; 0x22
    2806:	9e 8f       	std	Y+30, r25	; 0x1e
    2808:	8d 8f       	std	Y+29, r24	; 0x1d
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_displayCharacter+0x1f4>
    2812:	9e 8f       	std	Y+30, r25	; 0x1e
    2814:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePort( LCD_DATA_PORT_ID,lcd_port_value );
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin( LCD_E_PORT_ID,LCD_E_PIN_ID, LOGIC_LOW ); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif ( LCD_DATA_BITS_MODE == 8 )
	GPIO_writePort( LCD_DATA_PORT_ID, data );
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	69 ad       	ldd	r22, Y+57	; 0x39
    281a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <GPIO_writePort>
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	a0 e8       	ldi	r26, 0x80	; 128
    2824:	bf e3       	ldi	r27, 0x3F	; 63
    2826:	89 8f       	std	Y+25, r24	; 0x19
    2828:	9a 8f       	std	Y+26, r25	; 0x1a
    282a:	ab 8f       	std	Y+27, r26	; 0x1b
    282c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282e:	69 8d       	ldd	r22, Y+25	; 0x19
    2830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a e7       	ldi	r20, 0x7A	; 122
    283c:	53 e4       	ldi	r21, 0x43	; 67
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	8d 8b       	std	Y+21, r24	; 0x15
    2848:	9e 8b       	std	Y+22, r25	; 0x16
    284a:	af 8b       	std	Y+23, r26	; 0x17
    284c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    284e:	6d 89       	ldd	r22, Y+21	; 0x15
    2850:	7e 89       	ldd	r23, Y+22	; 0x16
    2852:	8f 89       	ldd	r24, Y+23	; 0x17
    2854:	98 8d       	ldd	r25, Y+24	; 0x18
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e8       	ldi	r20, 0x80	; 128
    285c:	5f e3       	ldi	r21, 0x3F	; 63
    285e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2862:	88 23       	and	r24, r24
    2864:	2c f4       	brge	.+10     	; 0x2870 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
    286e:	3f c0       	rjmp	.+126    	; 0x28ee <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2870:	6d 89       	ldd	r22, Y+21	; 0x15
    2872:	7e 89       	ldd	r23, Y+22	; 0x16
    2874:	8f 89       	ldd	r24, Y+23	; 0x17
    2876:	98 8d       	ldd	r25, Y+24	; 0x18
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	4c f5       	brge	.+82     	; 0x28da <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	69 8d       	ldd	r22, Y+25	; 0x19
    288a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    288c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e2       	ldi	r20, 0x20	; 32
    2896:	51 e4       	ldi	r21, 0x41	; 65
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <LCD_displayCharacter+0x2b6>
    28b2:	89 e1       	ldi	r24, 0x19	; 25
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9a 8b       	std	Y+18, r25	; 0x12
    28b8:	89 8b       	std	Y+17, r24	; 0x11
    28ba:	89 89       	ldd	r24, Y+17	; 0x11
    28bc:	9a 89       	ldd	r25, Y+18	; 0x12
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_displayCharacter+0x2a4>
    28c2:	9a 8b       	std	Y+18, r25	; 0x12
    28c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	8b 89       	ldd	r24, Y+19	; 0x13
    28c8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	9c 8b       	std	Y+20, r25	; 0x14
    28ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <LCD_displayCharacter+0x298>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	9c 8b       	std	Y+20, r25	; 0x14
    28ec:	8b 8b       	std	Y+19, r24	; 0x13
    28ee:	8b 89       	ldd	r24, Y+19	; 0x13
    28f0:	9c 89       	ldd	r25, Y+20	; 0x14
    28f2:	98 8b       	std	Y+16, r25	; 0x10
    28f4:	8f 87       	std	Y+15, r24	; 0x0f
    28f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f8:	98 89       	ldd	r25, Y+16	; 0x10
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <LCD_displayCharacter+0x2e0>
    28fe:	98 8b       	std	Y+16, r25	; 0x10
    2900:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin( LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW ); /* Disable LCD E=0 */
    2902:	83 e0       	ldi	r24, 0x03	; 3
    2904:	66 e0       	ldi	r22, 0x06	; 6
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <GPIO_writePin>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e8       	ldi	r26, 0x80	; 128
    2912:	bf e3       	ldi	r27, 0x3F	; 63
    2914:	8b 87       	std	Y+11, r24	; 0x0b
    2916:	9c 87       	std	Y+12, r25	; 0x0c
    2918:	ad 87       	std	Y+13, r26	; 0x0d
    291a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6b 85       	ldd	r22, Y+11	; 0x0b
    291e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2920:	8d 85       	ldd	r24, Y+13	; 0x0d
    2922:	9e 85       	ldd	r25, Y+14	; 0x0e
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a e7       	ldi	r20, 0x7A	; 122
    292a:	53 e4       	ldi	r21, 0x43	; 67
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8f 83       	std	Y+7, r24	; 0x07
    2936:	98 87       	std	Y+8, r25	; 0x08
    2938:	a9 87       	std	Y+9, r26	; 0x09
    293a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <LCD_displayCharacter+0x344>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6b 85       	ldd	r22, Y+11	; 0x0b
    2978:	7c 85       	ldd	r23, Y+12	; 0x0c
    297a:	8d 85       	ldd	r24, Y+13	; 0x0d
    297c:	9e 85       	ldd	r25, Y+14	; 0x0e
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	0f c0       	rjmp	.+30     	; 0x29be <LCD_displayCharacter+0x3a4>
    29a0:	89 e1       	ldi	r24, 0x19	; 25
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c 83       	std	Y+4, r25	; 0x04
    29a6:	8b 83       	std	Y+3, r24	; 0x03
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_displayCharacter+0x392>
    29b0:	9c 83       	std	Y+4, r25	; 0x04
    29b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <LCD_displayCharacter+0x386>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ca:	78 85       	ldd	r23, Y+8	; 0x08
    29cc:	89 85       	ldd	r24, Y+9	; 0x09
    29ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	9a 83       	std	Y+2, r25	; 0x02
    29e2:	89 83       	std	Y+1, r24	; 0x01
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <LCD_displayCharacter+0x3ce>
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29f0:	e9 96       	adiw	r28, 0x39	; 57
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <LCD_displayString>:

/*
 * Description : Display the required string on the screen.
 */
void LCD_displayString( const char *Str )
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <LCD_displayString+0x6>
    2a08:	0f 92       	push	r0
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	9b 83       	std	Y+3, r25	; 0x03
    2a10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a12:	19 82       	std	Y+1, r1	; 0x01
    2a14:	0e c0       	rjmp	.+28     	; 0x2a32 <LCD_displayString+0x30>
	while( Str[i] != '\0' )
	{
		LCD_displayCharacter( Str[i] );
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	28 2f       	mov	r18, r24
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	fc 01       	movw	r30, r24
    2a22:	e2 0f       	add	r30, r18
    2a24:	f3 1f       	adc	r31, r19
    2a26:	80 81       	ld	r24, Z
    2a28:	0e 94 0d 13 	call	0x261a	; 0x261a <LCD_displayCharacter>
		i++;
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	89 83       	std	Y+1, r24	; 0x01
 * Description : Display the required string on the screen.
 */
void LCD_displayString( const char *Str )
{
	uint8 i = 0;
	while( Str[i] != '\0' )
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	e2 0f       	add	r30, r18
    2a40:	f3 1f       	adc	r31, r19
    2a42:	80 81       	ld	r24, Z
    2a44:	88 23       	and	r24, r24
    2a46:	39 f7       	brne	.-50     	; 0x2a16 <LCD_displayString+0x14>
	{
		LCD_displayCharacter( Str[i] );
		i++;
	}
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <LCD_moveCursor>:

/*
 * Description : Move the cursor to a specified row and column on the screen.
 */
void LCD_moveCursor( uint8 row, uint8 col )
{
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <LCD_moveCursor+0x6>
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <LCD_moveCursor+0x8>
    2a5c:	0f 92       	push	r0
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	8a 83       	std	Y+2, r24	; 0x02
    2a64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch( row )
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	3d 83       	std	Y+5, r19	; 0x05
    2a6e:	2c 83       	std	Y+4, r18	; 0x04
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	9d 81       	ldd	r25, Y+5	; 0x05
    2a74:	81 30       	cpi	r24, 0x01	; 1
    2a76:	91 05       	cpc	r25, r1
    2a78:	c1 f0       	breq	.+48     	; 0x2aaa <LCD_moveCursor+0x56>
    2a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a7e:	22 30       	cpi	r18, 0x02	; 2
    2a80:	31 05       	cpc	r19, r1
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <LCD_moveCursor+0x3a>
    2a84:	8c 81       	ldd	r24, Y+4	; 0x04
    2a86:	9d 81       	ldd	r25, Y+5	; 0x05
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	61 f0       	breq	.+24     	; 0x2aa4 <LCD_moveCursor+0x50>
    2a8c:	19 c0       	rjmp	.+50     	; 0x2ac0 <LCD_moveCursor+0x6c>
    2a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a90:	3d 81       	ldd	r19, Y+5	; 0x05
    2a92:	22 30       	cpi	r18, 0x02	; 2
    2a94:	31 05       	cpc	r19, r1
    2a96:	69 f0       	breq	.+26     	; 0x2ab2 <LCD_moveCursor+0x5e>
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9c:	83 30       	cpi	r24, 0x03	; 3
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	61 f0       	breq	.+24     	; 0x2aba <LCD_moveCursor+0x66>
    2aa2:	0e c0       	rjmp	.+28     	; 0x2ac0 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	89 83       	std	Y+1, r24	; 0x01
    2aa8:	0b c0       	rjmp	.+22     	; 0x2ac0 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2aac:	80 5c       	subi	r24, 0xC0	; 192
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	07 c0       	rjmp	.+14     	; 0x2ac0 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	80 5f       	subi	r24, 0xF0	; 240
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	03 c0       	rjmp	.+6      	; 0x2ac0 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	80 5b       	subi	r24, 0xB0	; 176
    2abe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/*
	 * Set the MSB to 1 to move the cursor to the beginning of the 1st line, then or it with the required position.
	 */
	LCD_sendCommand( lcd_memory_address | LCD_SET_CURSOR_LOCATION );
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	80 68       	ori	r24, 0x80	; 128
    2ac4:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_sendCommand>
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <LCD_displayStringRowColumn>:

/*
 * Description : Display the required string in a specified row and column on the screen.
 */
void LCD_displayStringRowColumn( uint8 row,uint8 col, const char *Str )
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <LCD_displayStringRowColumn+0x6>
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <LCD_displayStringRowColumn+0x8>
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	6a 83       	std	Y+2, r22	; 0x02
    2ae8:	5c 83       	std	Y+4, r21	; 0x04
    2aea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor( row, col );
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	6a 81       	ldd	r22, Y+2	; 0x02
    2af0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_moveCursor>
	LCD_displayString( Str );
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>
}
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <LCD_intgerToString>:
/*
 * Description : Display the required decimal value on the screen.
 * LCD displays ascii only so we have to get the ascii of the numbers first.
 */
void LCD_intgerToString( int data )
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	62 97       	sbiw	r28, 0x12	; 18
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	9a 8b       	std	Y+18, r25	; 0x12
    2b20:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	/* Use itoa C function to convert the data to its corresponding ASCII value.
	 * 10 stands for decimal.
	 */
	itoa( data, buff, 10 );
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	9a 89       	ldd	r25, Y+18	; 0x12
    2b26:	9e 01       	movw	r18, r28
    2b28:	2f 5f       	subi	r18, 0xFF	; 255
    2b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2c:	b9 01       	movw	r22, r18
    2b2e:	4a e0       	ldi	r20, 0x0A	; 10
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	0e 94 c6 19 	call	0x338c	; 0x338c <itoa>
	LCD_displayString( buff ); /* Display the string */
    2b36:	ce 01       	movw	r24, r28
    2b38:	01 96       	adiw	r24, 0x01	; 1
    2b3a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_displayString>

}
    2b3e:	62 96       	adiw	r28, 0x12	; 18
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <LCD_clearScreen>:

/*
 * Description : Send the clear screen command.
 */
void LCD_clearScreen( void )
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand( LCD_CLEAR_COMMAND );
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_sendCommand>
}
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <__vector_9>:
 *
 ****************************************************************************************************************************************************/

/* Timer0 ISR for the overflow mode */
ISR( TIMER0_OVF_vect )
{
    2b64:	1f 92       	push	r1
    2b66:	0f 92       	push	r0
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	0f 92       	push	r0
    2b6c:	11 24       	eor	r1, r1
    2b6e:	2f 93       	push	r18
    2b70:	3f 93       	push	r19
    2b72:	4f 93       	push	r20
    2b74:	5f 93       	push	r21
    2b76:	6f 93       	push	r22
    2b78:	7f 93       	push	r23
    2b7a:	8f 93       	push	r24
    2b7c:	9f 93       	push	r25
    2b7e:	af 93       	push	r26
    2b80:	bf 93       	push	r27
    2b82:	ef 93       	push	r30
    2b84:	ff 93       	push	r31
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_OVF !=  NULL_PTR )
    2b8e:	80 91 49 01 	lds	r24, 0x0149
    2b92:	90 91 4a 01 	lds	r25, 0x014A
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	29 f0       	breq	.+10     	; 0x2ba4 <__vector_9+0x40>
	{
		(*TIMER0_OVF)();
    2b9a:	e0 91 49 01 	lds	r30, 0x0149
    2b9e:	f0 91 4a 01 	lds	r31, 0x014A
    2ba2:	09 95       	icall
	}
}
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	ff 91       	pop	r31
    2baa:	ef 91       	pop	r30
    2bac:	bf 91       	pop	r27
    2bae:	af 91       	pop	r26
    2bb0:	9f 91       	pop	r25
    2bb2:	8f 91       	pop	r24
    2bb4:	7f 91       	pop	r23
    2bb6:	6f 91       	pop	r22
    2bb8:	5f 91       	pop	r21
    2bba:	4f 91       	pop	r20
    2bbc:	3f 91       	pop	r19
    2bbe:	2f 91       	pop	r18
    2bc0:	0f 90       	pop	r0
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	0f 90       	pop	r0
    2bc6:	1f 90       	pop	r1
    2bc8:	18 95       	reti

00002bca <__vector_19>:

/* Timer0 ISR for the compare mode */
ISR( TIMER0_COMP_vect )
{
    2bca:	1f 92       	push	r1
    2bcc:	0f 92       	push	r0
    2bce:	0f b6       	in	r0, 0x3f	; 63
    2bd0:	0f 92       	push	r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	2f 93       	push	r18
    2bd6:	3f 93       	push	r19
    2bd8:	4f 93       	push	r20
    2bda:	5f 93       	push	r21
    2bdc:	6f 93       	push	r22
    2bde:	7f 93       	push	r23
    2be0:	8f 93       	push	r24
    2be2:	9f 93       	push	r25
    2be4:	af 93       	push	r26
    2be6:	bf 93       	push	r27
    2be8:	ef 93       	push	r30
    2bea:	ff 93       	push	r31
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
	if( TIMER0_COMP !=  NULL_PTR )
    2bf4:	80 91 47 01 	lds	r24, 0x0147
    2bf8:	90 91 48 01 	lds	r25, 0x0148
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	29 f0       	breq	.+10     	; 0x2c0a <__vector_19+0x40>
	{
		(*TIMER0_COMP)();
    2c00:	e0 91 47 01 	lds	r30, 0x0147
    2c04:	f0 91 48 01 	lds	r31, 0x0148
    2c08:	09 95       	icall
	}
}
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	ff 91       	pop	r31
    2c10:	ef 91       	pop	r30
    2c12:	bf 91       	pop	r27
    2c14:	af 91       	pop	r26
    2c16:	9f 91       	pop	r25
    2c18:	8f 91       	pop	r24
    2c1a:	7f 91       	pop	r23
    2c1c:	6f 91       	pop	r22
    2c1e:	5f 91       	pop	r21
    2c20:	4f 91       	pop	r20
    2c22:	3f 91       	pop	r19
    2c24:	2f 91       	pop	r18
    2c26:	0f 90       	pop	r0
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	0f 90       	pop	r0
    2c2c:	1f 90       	pop	r1
    2c2e:	18 95       	reti

00002c30 <__vector_8>:

/* Timer1 ISR for the overflow mode */
ISR( TIMER1_OVF_vect )
{
    2c30:	1f 92       	push	r1
    2c32:	0f 92       	push	r0
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	0f 92       	push	r0
    2c38:	11 24       	eor	r1, r1
    2c3a:	2f 93       	push	r18
    2c3c:	3f 93       	push	r19
    2c3e:	4f 93       	push	r20
    2c40:	5f 93       	push	r21
    2c42:	6f 93       	push	r22
    2c44:	7f 93       	push	r23
    2c46:	8f 93       	push	r24
    2c48:	9f 93       	push	r25
    2c4a:	af 93       	push	r26
    2c4c:	bf 93       	push	r27
    2c4e:	ef 93       	push	r30
    2c50:	ff 93       	push	r31
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
	if( TIMER1_OVF !=  NULL_PTR )
    2c5a:	80 91 4d 01 	lds	r24, 0x014D
    2c5e:	90 91 4e 01 	lds	r25, 0x014E
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	29 f0       	breq	.+10     	; 0x2c70 <__vector_8+0x40>
	{
		(*TIMER1_OVF)();
    2c66:	e0 91 4d 01 	lds	r30, 0x014D
    2c6a:	f0 91 4e 01 	lds	r31, 0x014E
    2c6e:	09 95       	icall
	}
}
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	ff 91       	pop	r31
    2c76:	ef 91       	pop	r30
    2c78:	bf 91       	pop	r27
    2c7a:	af 91       	pop	r26
    2c7c:	9f 91       	pop	r25
    2c7e:	8f 91       	pop	r24
    2c80:	7f 91       	pop	r23
    2c82:	6f 91       	pop	r22
    2c84:	5f 91       	pop	r21
    2c86:	4f 91       	pop	r20
    2c88:	3f 91       	pop	r19
    2c8a:	2f 91       	pop	r18
    2c8c:	0f 90       	pop	r0
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	0f 90       	pop	r0
    2c92:	1f 90       	pop	r1
    2c94:	18 95       	reti

00002c96 <__vector_6>:

/* Timer0 ISR for the compare mode */
ISR( TIMER1_COMPA_vect )
{
    2c96:	1f 92       	push	r1
    2c98:	0f 92       	push	r0
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	0f 92       	push	r0
    2c9e:	11 24       	eor	r1, r1
    2ca0:	2f 93       	push	r18
    2ca2:	3f 93       	push	r19
    2ca4:	4f 93       	push	r20
    2ca6:	5f 93       	push	r21
    2ca8:	6f 93       	push	r22
    2caa:	7f 93       	push	r23
    2cac:	8f 93       	push	r24
    2cae:	9f 93       	push	r25
    2cb0:	af 93       	push	r26
    2cb2:	bf 93       	push	r27
    2cb4:	ef 93       	push	r30
    2cb6:	ff 93       	push	r31
    2cb8:	df 93       	push	r29
    2cba:	cf 93       	push	r28
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
	if( TIMER1_COMP !=  NULL_PTR )
    2cc0:	80 91 4b 01 	lds	r24, 0x014B
    2cc4:	90 91 4c 01 	lds	r25, 0x014C
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	29 f0       	breq	.+10     	; 0x2cd6 <__vector_6+0x40>
	{
		(*TIMER1_COMP)();
    2ccc:	e0 91 4b 01 	lds	r30, 0x014B
    2cd0:	f0 91 4c 01 	lds	r31, 0x014C
    2cd4:	09 95       	icall
	}
}
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	ff 91       	pop	r31
    2cdc:	ef 91       	pop	r30
    2cde:	bf 91       	pop	r27
    2ce0:	af 91       	pop	r26
    2ce2:	9f 91       	pop	r25
    2ce4:	8f 91       	pop	r24
    2ce6:	7f 91       	pop	r23
    2ce8:	6f 91       	pop	r22
    2cea:	5f 91       	pop	r21
    2cec:	4f 91       	pop	r20
    2cee:	3f 91       	pop	r19
    2cf0:	2f 91       	pop	r18
    2cf2:	0f 90       	pop	r0
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	0f 90       	pop	r0
    2cf8:	1f 90       	pop	r1
    2cfa:	18 95       	reti

00002cfc <__vector_4>:

/* Timer2 ISR for the overflow mode */
ISR( TIMER2_OVF_vect )
{
    2cfc:	1f 92       	push	r1
    2cfe:	0f 92       	push	r0
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	0f 92       	push	r0
    2d04:	11 24       	eor	r1, r1
    2d06:	2f 93       	push	r18
    2d08:	3f 93       	push	r19
    2d0a:	4f 93       	push	r20
    2d0c:	5f 93       	push	r21
    2d0e:	6f 93       	push	r22
    2d10:	7f 93       	push	r23
    2d12:	8f 93       	push	r24
    2d14:	9f 93       	push	r25
    2d16:	af 93       	push	r26
    2d18:	bf 93       	push	r27
    2d1a:	ef 93       	push	r30
    2d1c:	ff 93       	push	r31
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
	if( TIMER2_OVF !=  NULL_PTR )
    2d26:	80 91 51 01 	lds	r24, 0x0151
    2d2a:	90 91 52 01 	lds	r25, 0x0152
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	29 f0       	breq	.+10     	; 0x2d3c <__vector_4+0x40>
	{
		(*TIMER2_OVF)();
    2d32:	e0 91 51 01 	lds	r30, 0x0151
    2d36:	f0 91 52 01 	lds	r31, 0x0152
    2d3a:	09 95       	icall
	}
}
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	ff 91       	pop	r31
    2d42:	ef 91       	pop	r30
    2d44:	bf 91       	pop	r27
    2d46:	af 91       	pop	r26
    2d48:	9f 91       	pop	r25
    2d4a:	8f 91       	pop	r24
    2d4c:	7f 91       	pop	r23
    2d4e:	6f 91       	pop	r22
    2d50:	5f 91       	pop	r21
    2d52:	4f 91       	pop	r20
    2d54:	3f 91       	pop	r19
    2d56:	2f 91       	pop	r18
    2d58:	0f 90       	pop	r0
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	0f 90       	pop	r0
    2d5e:	1f 90       	pop	r1
    2d60:	18 95       	reti

00002d62 <__vector_3>:

/* Timer2 ISR for the compare mode */
ISR( TIMER2_COMP_vect )
{
    2d62:	1f 92       	push	r1
    2d64:	0f 92       	push	r0
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	0f 92       	push	r0
    2d6a:	11 24       	eor	r1, r1
    2d6c:	2f 93       	push	r18
    2d6e:	3f 93       	push	r19
    2d70:	4f 93       	push	r20
    2d72:	5f 93       	push	r21
    2d74:	6f 93       	push	r22
    2d76:	7f 93       	push	r23
    2d78:	8f 93       	push	r24
    2d7a:	9f 93       	push	r25
    2d7c:	af 93       	push	r26
    2d7e:	bf 93       	push	r27
    2d80:	ef 93       	push	r30
    2d82:	ff 93       	push	r31
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
	if( TIMER2_COMP !=  NULL_PTR )
    2d8c:	80 91 4f 01 	lds	r24, 0x014F
    2d90:	90 91 50 01 	lds	r25, 0x0150
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	29 f0       	breq	.+10     	; 0x2da2 <__vector_3+0x40>
	{
		(*TIMER2_COMP)();
    2d98:	e0 91 4f 01 	lds	r30, 0x014F
    2d9c:	f0 91 50 01 	lds	r31, 0x0150
    2da0:	09 95       	icall
	}
}
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	ff 91       	pop	r31
    2da8:	ef 91       	pop	r30
    2daa:	bf 91       	pop	r27
    2dac:	af 91       	pop	r26
    2dae:	9f 91       	pop	r25
    2db0:	8f 91       	pop	r24
    2db2:	7f 91       	pop	r23
    2db4:	6f 91       	pop	r22
    2db6:	5f 91       	pop	r21
    2db8:	4f 91       	pop	r20
    2dba:	3f 91       	pop	r19
    2dbc:	2f 91       	pop	r18
    2dbe:	0f 90       	pop	r0
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	0f 90       	pop	r0
    2dc4:	1f 90       	pop	r1
    2dc6:	18 95       	reti

00002dc8 <TIMER_setCallBack>:
 *
 ****************************************************************************************************************************************************/

/* Function used by the ISR to call the call-back function in main */
void TIMER_setCallBack( void( *Timer_ptr )( void ), Timer_ID id, Timer_Mode mode )
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	00 d0       	rcall	.+0      	; 0x2dce <TIMER_setCallBack+0x6>
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <TIMER_setCallBack+0x8>
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <TIMER_setCallBack+0xa>
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62
    2dd6:	9a 83       	std	Y+2, r25	; 0x02
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	6b 83       	std	Y+3, r22	; 0x03
    2ddc:	4c 83       	std	Y+4, r20	; 0x04
	switch( id )
    2dde:	8b 81       	ldd	r24, Y+3	; 0x03
    2de0:	28 2f       	mov	r18, r24
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	3e 83       	std	Y+6, r19	; 0x06
    2de6:	2d 83       	std	Y+5, r18	; 0x05
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	31 f0       	breq	.+12     	; 0x2dfc <TIMER_setCallBack+0x34>
    2df0:	2d 81       	ldd	r18, Y+5	; 0x05
    2df2:	3e 81       	ldd	r19, Y+6	; 0x06
    2df4:	21 30       	cpi	r18, 0x01	; 1
    2df6:	31 05       	cpc	r19, r1
    2df8:	a9 f0       	breq	.+42     	; 0x2e24 <TIMER_setCallBack+0x5c>
    2dfa:	27 c0       	rjmp	.+78     	; 0x2e4a <TIMER_setCallBack+0x82>
	{
	case TIMER0:
		if( mode == NORMAL )
    2dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfe:	88 23       	and	r24, r24
    2e00:	39 f4       	brne	.+14     	; 0x2e10 <TIMER_setCallBack+0x48>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER0_OVF = Timer_ptr;
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	9a 81       	ldd	r25, Y+2	; 0x02
    2e06:	90 93 4a 01 	sts	0x014A, r25
    2e0a:	80 93 49 01 	sts	0x0149, r24
    2e0e:	1d c0       	rjmp	.+58     	; 0x2e4a <TIMER_setCallBack+0x82>
		}
		else if( mode == COMP )
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	81 30       	cpi	r24, 0x01	; 1
    2e14:	d1 f4       	brne	.+52     	; 0x2e4a <TIMER_setCallBack+0x82>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER0_COMP = Timer_ptr;
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	90 93 48 01 	sts	0x0148, r25
    2e1e:	80 93 47 01 	sts	0x0147, r24
    2e22:	13 c0       	rjmp	.+38     	; 0x2e4a <TIMER_setCallBack+0x82>
		}
		break;
	case TIMER1:
		if( mode == NORMAL )
    2e24:	8c 81       	ldd	r24, Y+4	; 0x04
    2e26:	88 23       	and	r24, r24
    2e28:	39 f4       	brne	.+14     	; 0x2e38 <TIMER_setCallBack+0x70>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER1_OVF = Timer_ptr;
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2e:	90 93 4e 01 	sts	0x014E, r25
    2e32:	80 93 4d 01 	sts	0x014D, r24
    2e36:	09 c0       	rjmp	.+18     	; 0x2e4a <TIMER_setCallBack+0x82>
		}
		else if( mode == COMP )
    2e38:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	31 f4       	brne	.+12     	; 0x2e4a <TIMER_setCallBack+0x82>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER1_COMP = Timer_ptr;
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	90 93 4c 01 	sts	0x014C, r25
    2e46:	80 93 4b 01 	sts	0x014B, r24
		}
		break;
	}
	if( ( id ) == TIMER0 )
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	88 23       	and	r24, r24
    2e4e:	b1 f0       	breq	.+44     	; 0x2e7c <TIMER_setCallBack+0xb4>
	{

	}
	else if( ( id ) == TIMER2 )
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	82 30       	cpi	r24, 0x02	; 2
    2e54:	99 f4       	brne	.+38     	; 0x2e7c <TIMER_setCallBack+0xb4>
	{
		if( ( mode ) == NORMAL )
    2e56:	8c 81       	ldd	r24, Y+4	; 0x04
    2e58:	88 23       	and	r24, r24
    2e5a:	39 f4       	brne	.+14     	; 0x2e6a <TIMER_setCallBack+0xa2>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER2_OVF = Timer_ptr;
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	90 93 52 01 	sts	0x0152, r25
    2e64:	80 93 51 01 	sts	0x0151, r24
    2e68:	09 c0       	rjmp	.+18     	; 0x2e7c <TIMER_setCallBack+0xb4>
		}
		else if( ( mode ) == COMP )
    2e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	31 f4       	brne	.+12     	; 0x2e7c <TIMER_setCallBack+0xb4>
		{
			/* Save the address of the Call back function in its global pointer */
			TIMER2_COMP = Timer_ptr;
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	90 93 50 01 	sts	0x0150, r25
    2e78:	80 93 4f 01 	sts	0x014F, r24
		}
	}
}
    2e7c:	26 96       	adiw	r28, 0x06	; 6
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <Timer_Init>:
/*
 * Timer0 initial function:
 * NB: Set
 */
void Timer_Init( const Timer_Config *ConfigPtr )
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <Timer_Init+0x6>
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <Timer_Init+0x8>
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	switch( ConfigPtr -> id )
    2e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea2:	84 81       	ldd	r24, Z+4	; 0x04
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	3c 83       	std	Y+4, r19	; 0x04
    2eaa:	2b 83       	std	Y+3, r18	; 0x03
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb0:	81 30       	cpi	r24, 0x01	; 1
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <Timer_Init+0x2a>
    2eb6:	48 c0       	rjmp	.+144    	; 0x2f48 <Timer_Init+0xba>
    2eb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eba:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebc:	22 30       	cpi	r18, 0x02	; 2
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <Timer_Init+0x36>
    2ec2:	89 c0       	rjmp	.+274    	; 0x2fd6 <Timer_Init+0x148>
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	09 f0       	breq	.+2      	; 0x2ece <Timer_Init+0x40>
    2ecc:	bf c0       	rjmp	.+382    	; 0x304c <Timer_Init+0x1be>
	{
	case TIMER0:
		/* Set Timer initial value */
		TCNT0 = ( ConfigPtr -> init_value );
    2ece:	a2 e5       	ldi	r26, 0x52	; 82
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * (1) to get normal mode: shift zero for 3 times (do nothing). To get compare mode: shift 1 for 3 times.
		 * (2) Configure the pre-scaler.
		 * (3) Enable FOC0 to choose a non-PWM mode.
		 */
		TCCR0 = ( ( ConfigPtr -> mode ) << 3 ) | ( ConfigPtr -> prescaler ) | ( 1 << FOC0 );
    2edc:	a3 e5       	ldi	r26, 0x53	; 83
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	88 0f       	add	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	98 2f       	mov	r25, r24
    2ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    2efa:	fa 81       	ldd	r31, Y+2	; 0x02
    2efc:	81 81       	ldd	r24, Z+1	; 0x01
    2efe:	89 2b       	or	r24, r25
    2f00:	80 68       	ori	r24, 0x80	; 128
    2f02:	8c 93       	st	X, r24
		if( ( ConfigPtr -> mode ) == NORMAL )
    2f04:	e9 81       	ldd	r30, Y+1	; 0x01
    2f06:	fa 81       	ldd	r31, Y+2	; 0x02
    2f08:	80 81       	ld	r24, Z
    2f0a:	88 23       	and	r24, r24
    2f0c:	41 f4       	brne	.+16     	; 0x2f1e <Timer_Init+0x90>
		{
			/* Enable Timer0 Overflow Interrupt */
			SET_BIT( TIMSK, TOIE0 );
    2f0e:	a9 e5       	ldi	r26, 0x59	; 89
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e9 e5       	ldi	r30, 0x59	; 89
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	81 60       	ori	r24, 0x01	; 1
    2f1a:	8c 93       	st	X, r24
    2f1c:	97 c0       	rjmp	.+302    	; 0x304c <Timer_Init+0x1be>
		}
		else if( ( ConfigPtr -> mode ) == COMP )
    2f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f20:	fa 81       	ldd	r31, Y+2	; 0x02
    2f22:	80 81       	ld	r24, Z
    2f24:	81 30       	cpi	r24, 0x01	; 1
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <Timer_Init+0x9c>
    2f28:	91 c0       	rjmp	.+290    	; 0x304c <Timer_Init+0x1be>
		{
			/* Enable Timer0 compare Interrupt */
			SET_BIT( TIMSK, OCIE0 );
    2f2a:	a9 e5       	ldi	r26, 0x59	; 89
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e9 e5       	ldi	r30, 0x59	; 89
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	82 60       	ori	r24, 0x02	; 2
    2f36:	8c 93       	st	X, r24
			/* Set Compare Value */
			OCR0  = ( ConfigPtr -> comp_value );
    2f38:	ac e5       	ldi	r26, 0x5C	; 92
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f40:	85 81       	ldd	r24, Z+5	; 0x05
    2f42:	96 81       	ldd	r25, Z+6	; 0x06
    2f44:	8c 93       	st	X, r24
    2f46:	82 c0       	rjmp	.+260    	; 0x304c <Timer_Init+0x1be>
		}
		break;
	case TIMER1:
		/* Set Timer initial value */
		TCNT1 = ( ConfigPtr -> init_value );
    2f48:	ac e4       	ldi	r26, 0x4C	; 76
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f50:	82 81       	ldd	r24, Z+2	; 0x02
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	11 96       	adiw	r26, 0x01	; 1
    2f56:	9c 93       	st	X, r25
    2f58:	8e 93       	st	-X, r24
		/* Enable FOC1A to choose a non-PWM mode. */
		SET_BIT( TCCR1A, FOC1A );
    2f5a:	af e4       	ldi	r26, 0x4F	; 79
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	ef e4       	ldi	r30, 0x4F	; 79
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	88 60       	ori	r24, 0x08	; 8
    2f66:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * (1) to get normal mode: shift zero for 3 times (do nothing). To get compare mode: shift 1 for 3 times.
		 * (2) Configure the pre-scaler.
		 */
		TCCR1B = ( ( ConfigPtr -> mode ) << 3 ) | ( ConfigPtr -> prescaler );
    2f68:	ae e4       	ldi	r26, 0x4E	; 78
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f70:	80 81       	ld	r24, Z
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	88 0f       	add	r24, r24
    2f7c:	99 1f       	adc	r25, r25
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	98 2f       	mov	r25, r24
    2f84:	e9 81       	ldd	r30, Y+1	; 0x01
    2f86:	fa 81       	ldd	r31, Y+2	; 0x02
    2f88:	81 81       	ldd	r24, Z+1	; 0x01
    2f8a:	89 2b       	or	r24, r25
    2f8c:	8c 93       	st	X, r24
		if( ( ConfigPtr -> mode ) == NORMAL )
    2f8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f90:	fa 81       	ldd	r31, Y+2	; 0x02
    2f92:	80 81       	ld	r24, Z
    2f94:	88 23       	and	r24, r24
    2f96:	41 f4       	brne	.+16     	; 0x2fa8 <Timer_Init+0x11a>
		{
			/* Enable Timer1 Overflow Interrupt */
			SET_BIT( TIMSK, TOIE1 );
    2f98:	a9 e5       	ldi	r26, 0x59	; 89
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e9 e5       	ldi	r30, 0x59	; 89
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	84 60       	ori	r24, 0x04	; 4
    2fa4:	8c 93       	st	X, r24
    2fa6:	52 c0       	rjmp	.+164    	; 0x304c <Timer_Init+0x1be>
		}
		else if( ( ConfigPtr -> mode ) == COMP )
    2fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    2faa:	fa 81       	ldd	r31, Y+2	; 0x02
    2fac:	80 81       	ld	r24, Z
    2fae:	81 30       	cpi	r24, 0x01	; 1
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <Timer_Init+0x126>
    2fb2:	4c c0       	rjmp	.+152    	; 0x304c <Timer_Init+0x1be>
		{
			/* Enable Timer1 compare Interrupt */
			SET_BIT( TIMSK, OCIE1A );
    2fb4:	a9 e5       	ldi	r26, 0x59	; 89
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e9 e5       	ldi	r30, 0x59	; 89
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 61       	ori	r24, 0x10	; 16
    2fc0:	8c 93       	st	X, r24
			/* Set Compare Value */
			OCR1A  = ( ConfigPtr -> comp_value );
    2fc2:	aa e4       	ldi	r26, 0x4A	; 74
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fca:	85 81       	ldd	r24, Z+5	; 0x05
    2fcc:	96 81       	ldd	r25, Z+6	; 0x06
    2fce:	11 96       	adiw	r26, 0x01	; 1
    2fd0:	9c 93       	st	X, r25
    2fd2:	8e 93       	st	-X, r24
    2fd4:	3b c0       	rjmp	.+118    	; 0x304c <Timer_Init+0x1be>
		}
		break;
	case TIMER2:
		/* Set Timer initial value */
		TCNT2 = ( ConfigPtr -> init_value );
    2fd6:	a4 e4       	ldi	r26, 0x44	; 68
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e9 81       	ldd	r30, Y+1	; 0x01
    2fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	93 81       	ldd	r25, Z+3	; 0x03
    2fe2:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * (1) to get normal mode: shift zero for 3 times (do nothing). To get compare mode: shift 1 for 3 times.
		 * (2) Configure the pre-scaler.
		 * (3) Enable FOC2 to choose a non-PWM mode.
		 */
		TCCR2 = ( ( ConfigPtr -> mode ) << 3 ) | ( ConfigPtr -> prescaler ) | ( 1 << FOC0 );
    2fe4:	a5 e4       	ldi	r26, 0x45	; 69
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fea:	fa 81       	ldd	r31, Y+2	; 0x02
    2fec:	80 81       	ld	r24, Z
    2fee:	88 2f       	mov	r24, r24
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	98 2f       	mov	r25, r24
    3000:	e9 81       	ldd	r30, Y+1	; 0x01
    3002:	fa 81       	ldd	r31, Y+2	; 0x02
    3004:	81 81       	ldd	r24, Z+1	; 0x01
    3006:	89 2b       	or	r24, r25
    3008:	80 68       	ori	r24, 0x80	; 128
    300a:	8c 93       	st	X, r24
		if( ( ConfigPtr -> mode ) == NORMAL )
    300c:	e9 81       	ldd	r30, Y+1	; 0x01
    300e:	fa 81       	ldd	r31, Y+2	; 0x02
    3010:	80 81       	ld	r24, Z
    3012:	88 23       	and	r24, r24
    3014:	41 f4       	brne	.+16     	; 0x3026 <Timer_Init+0x198>
		{
			/* Enable Timer0 Overflow Interrupt */
			SET_BIT( TIMSK, TOIE2 );
    3016:	a9 e5       	ldi	r26, 0x59	; 89
    3018:	b0 e0       	ldi	r27, 0x00	; 0
    301a:	e9 e5       	ldi	r30, 0x59	; 89
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	80 64       	ori	r24, 0x40	; 64
    3022:	8c 93       	st	X, r24
    3024:	13 c0       	rjmp	.+38     	; 0x304c <Timer_Init+0x1be>
		}
		else if( ( ConfigPtr -> mode ) == COMP )
    3026:	e9 81       	ldd	r30, Y+1	; 0x01
    3028:	fa 81       	ldd	r31, Y+2	; 0x02
    302a:	80 81       	ld	r24, Z
    302c:	81 30       	cpi	r24, 0x01	; 1
    302e:	71 f4       	brne	.+28     	; 0x304c <Timer_Init+0x1be>
		{
			/* Enable Timer0 compare Interrupt */
			SET_BIT( TIMSK, OCIE2 );
    3030:	a9 e5       	ldi	r26, 0x59	; 89
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	e9 e5       	ldi	r30, 0x59	; 89
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	80 68       	ori	r24, 0x80	; 128
    303c:	8c 93       	st	X, r24
			/* Set Compare Value */
			OCR2  = ( ConfigPtr -> comp_value );
    303e:	a3 e4       	ldi	r26, 0x43	; 67
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	e9 81       	ldd	r30, Y+1	; 0x01
    3044:	fa 81       	ldd	r31, Y+2	; 0x02
    3046:	85 81       	ldd	r24, Z+5	; 0x05
    3048:	96 81       	ldd	r25, Z+6	; 0x06
    304a:	8c 93       	st	X, r24
		}
		break;
	}
}
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <TIMER_intDeInit>:

void TIMER_intDeInit( Timer_ID id )
{
    305a:	df 93       	push	r29
    305c:	cf 93       	push	r28
    305e:	00 d0       	rcall	.+0      	; 0x3060 <TIMER_intDeInit+0x6>
    3060:	0f 92       	push	r0
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	89 83       	std	Y+1, r24	; 0x01
	switch( id )
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	3b 83       	std	Y+3, r19	; 0x03
    3070:	2a 83       	std	Y+2, r18	; 0x02
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	91 05       	cpc	r25, r1
    307a:	89 f0       	breq	.+34     	; 0x309e <TIMER_intDeInit+0x44>
    307c:	2a 81       	ldd	r18, Y+2	; 0x02
    307e:	3b 81       	ldd	r19, Y+3	; 0x03
    3080:	22 30       	cpi	r18, 0x02	; 2
    3082:	31 05       	cpc	r19, r1
    3084:	a1 f0       	breq	.+40     	; 0x30ae <TIMER_intDeInit+0x54>
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	00 97       	sbiw	r24, 0x00	; 0
    308c:	b9 f4       	brne	.+46     	; 0x30bc <TIMER_intDeInit+0x62>
	{
	case TIMER0:
		/* Clear Timer0 Interrupts */
		TIMSK &= ~( 0x03 );
    308e:	a9 e5       	ldi	r26, 0x59	; 89
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	e9 e5       	ldi	r30, 0x59	; 89
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	8c 7f       	andi	r24, 0xFC	; 252
    309a:	8c 93       	st	X, r24
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <TIMER_intDeInit+0x62>
		break;
	case TIMER1:
		/* Clear Timer0 Overflow Interrupt */
		TIMSK &= ~( 0x3C );
    309e:	a9 e5       	ldi	r26, 0x59	; 89
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e9 e5       	ldi	r30, 0x59	; 89
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	83 7c       	andi	r24, 0xC3	; 195
    30aa:	8c 93       	st	X, r24
    30ac:	07 c0       	rjmp	.+14     	; 0x30bc <TIMER_intDeInit+0x62>
		break;
	case TIMER2:
		/* Clear Timer0 Overflow Interrupt */
		TIMSK &= ~( 0xC0 );
    30ae:	a9 e5       	ldi	r26, 0x59	; 89
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	e9 e5       	ldi	r30, 0x59	; 89
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	8f 73       	andi	r24, 0x3F	; 63
    30ba:	8c 93       	st	X, r24
		break;
	}
}
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	0f 90       	pop	r0
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <UART_init>:

/*
 * Description: Initialize the UART.
 */
void UART_init( const UART_ConfigType *Config_Ptr )
{
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <UART_init+0x6>
    30ce:	00 d0       	rcall	.+0      	; 0x30d0 <UART_init+0x8>
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	9c 83       	std	Y+4, r25	; 0x04
    30d6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0;
    30d8:	1a 82       	std	Y+2, r1	; 0x02
    30da:	19 82       	std	Y+1, r1	; 0x01
	/* Enable the double transmission speed */
	UCSRA |= ( 1 << U2X );
    30dc:	ab e2       	ldi	r26, 0x2B	; 43
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	eb e2       	ldi	r30, 0x2B	; 43
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	82 60       	ori	r24, 0x02	; 2
    30e8:	8c 93       	st	X, r24
	/* Enable the transmitter and receiver */
	UCSRB |= ( 1 << TXEN ) | ( 1 << RXEN );
    30ea:	aa e2       	ldi	r26, 0x2A	; 42
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	ea e2       	ldi	r30, 0x2A	; 42
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	88 61       	ori	r24, 0x18	; 24
    30f6:	8c 93       	st	X, r24
	 * (1) Enable writing in the UCSRC register.
	 * (2) Configure the parity bit (Disable, even, odd).
	 * (3) Configure the stop bits (1 or 2).
	 * (4) Configure the character size.
	 */
	UCSRC |= ( 1 << URSEL ) | ( ( Config_Ptr -> parity ) << 4 ) | ( ( Config_Ptr -> stop ) << 3 ) | ( ( Config_Ptr -> size ) << 1 );
    30f8:	a0 e4       	ldi	r26, 0x40	; 64
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e0 e4       	ldi	r30, 0x40	; 64
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	38 2f       	mov	r19, r24
    3104:	eb 81       	ldd	r30, Y+3	; 0x03
    3106:	fc 81       	ldd	r31, Y+4	; 0x04
    3108:	84 81       	ldd	r24, Z+4	; 0x04
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	82 95       	swap	r24
    3110:	92 95       	swap	r25
    3112:	90 7f       	andi	r25, 0xF0	; 240
    3114:	98 27       	eor	r25, r24
    3116:	80 7f       	andi	r24, 0xF0	; 240
    3118:	98 27       	eor	r25, r24
    311a:	28 2f       	mov	r18, r24
    311c:	20 68       	ori	r18, 0x80	; 128
    311e:	eb 81       	ldd	r30, Y+3	; 0x03
    3120:	fc 81       	ldd	r31, Y+4	; 0x04
    3122:	85 81       	ldd	r24, Z+5	; 0x05
    3124:	88 2f       	mov	r24, r24
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	28 2b       	or	r18, r24
    3136:	eb 81       	ldd	r30, Y+3	; 0x03
    3138:	fc 81       	ldd	r31, Y+4	; 0x04
    313a:	86 81       	ldd	r24, Z+6	; 0x06
    313c:	88 2f       	mov	r24, r24
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	82 2b       	or	r24, r18
    3146:	83 2b       	or	r24, r19
    3148:	8c 93       	st	X, r24
	/* Calculate the UBRR register value in the double speed mode. */
	UBRR_value = ( uint16 ) ( ( ( F_CPU / ( ( Config_Ptr -> baud_rate ) * 8UL ) ) ) - 1 );
    314a:	eb 81       	ldd	r30, Y+3	; 0x03
    314c:	fc 81       	ldd	r31, Y+4	; 0x04
    314e:	80 81       	ld	r24, Z
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	a2 81       	ldd	r26, Z+2	; 0x02
    3154:	b3 81       	ldd	r27, Z+3	; 0x03
    3156:	88 0f       	add	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	aa 1f       	adc	r26, r26
    315c:	bb 1f       	adc	r27, r27
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	aa 1f       	adc	r26, r26
    3164:	bb 1f       	adc	r27, r27
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	aa 1f       	adc	r26, r26
    316c:	bb 1f       	adc	r27, r27
    316e:	9c 01       	movw	r18, r24
    3170:	ad 01       	movw	r20, r26
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	92 e1       	ldi	r25, 0x12	; 18
    3176:	aa e7       	ldi	r26, 0x7A	; 122
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	bc 01       	movw	r22, r24
    317c:	cd 01       	movw	r24, r26
    317e:	0e 94 6d 19 	call	0x32da	; 0x32da <__udivmodsi4>
    3182:	da 01       	movw	r26, r20
    3184:	c9 01       	movw	r24, r18
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	9a 83       	std	Y+2, r25	; 0x02
    318a:	89 83       	std	Y+1, r24	; 0x01
	/*Assign the UBRR value correctly in the UBRRH and UBRRL registers by adding the 8_LSB to UBRRL and 4-MSB in UBRRH. */
	UBRRL = UBRR_value;
    318c:	e9 e2       	ldi	r30, 0x29	; 41
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	80 83       	st	Z, r24
	UBRRH = ( UBRR_value >> 4 );
    3194:	e0 e4       	ldi	r30, 0x40	; 64
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	92 95       	swap	r25
    319e:	82 95       	swap	r24
    31a0:	8f 70       	andi	r24, 0x0F	; 15
    31a2:	89 27       	eor	r24, r25
    31a4:	9f 70       	andi	r25, 0x0F	; 15
    31a6:	89 27       	eor	r24, r25
    31a8:	80 83       	st	Z, r24
}
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <UART_sendByte>:

/*
 * Description: Send a byte to the receiver.
 */
void UART_sendByte( const uint8 data )
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	0f 92       	push	r0
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the UDR register is empty (the receiver have received the data). */
	while( BIT_IS_CLEAR( UCSRA, UDRE ) );
    31c4:	eb e2       	ldi	r30, 0x2B	; 43
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	88 2f       	mov	r24, r24
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	80 72       	andi	r24, 0x20	; 32
    31d0:	90 70       	andi	r25, 0x00	; 0
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	b9 f3       	breq	.-18     	; 0x31c4 <UART_sendByte+0xc>
	/* Send the data to the UDRR register to get read by the receiver. */
	UDR = data;
    31d6:	ec e2       	ldi	r30, 0x2C	; 44
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	80 83       	st	Z, r24
}
    31de:	0f 90       	pop	r0
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <UART_receiveByte>:

/*
 * Description: Receive a byte from the transmitter.
 */
uint8 UART_receiveByte( void )
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
	/* This flag is set, when there is data to be received. */
	while( BIT_IS_CLEAR( UCSRA, RXC ) );
    31ee:	eb e2       	ldi	r30, 0x2B	; 43
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	88 23       	and	r24, r24
    31f6:	dc f7       	brge	.-10     	; 0x31ee <UART_receiveByte+0x8>
	/* Read the UDR data. The RXC flag is cleared automatically */
	return UDR;
    31f8:	ec e2       	ldi	r30, 0x2C	; 44
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
}
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <UART_sendString>:

/*
 * Description: Send a string to the receiver.
 */
void UART_sendString( const uint8 *Str )
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	00 d0       	rcall	.+0      	; 0x320a <UART_sendString+0x6>
    320a:	0f 92       	push	r0
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	9b 83       	std	Y+3, r25	; 0x03
    3212:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3214:	19 82       	std	Y+1, r1	; 0x01
    3216:	0e c0       	rjmp	.+28     	; 0x3234 <UART_sendString+0x30>
	/* Send the whole string */
	while ( Str[i] != '\0' )
	{
	UART_sendByte( Str[i] );
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	9b 81       	ldd	r25, Y+3	; 0x03
    3222:	fc 01       	movw	r30, r24
    3224:	e2 0f       	add	r30, r18
    3226:	f3 1f       	adc	r31, r19
    3228:	80 81       	ld	r24, Z
    322a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <UART_sendByte>
	i++;
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	8f 5f       	subi	r24, 0xFF	; 255
    3232:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString( const uint8 *Str )
{
	uint8 i = 0;
	/* Send the whole string */
	while ( Str[i] != '\0' )
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	28 2f       	mov	r18, r24
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	9b 81       	ldd	r25, Y+3	; 0x03
    323e:	fc 01       	movw	r30, r24
    3240:	e2 0f       	add	r30, r18
    3242:	f3 1f       	adc	r31, r19
    3244:	80 81       	ld	r24, Z
    3246:	88 23       	and	r24, r24
    3248:	39 f7       	brne	.-50     	; 0x3218 <UART_sendString+0x14>
	{
	UART_sendByte( Str[i] );
	i++;
	}
}
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	0f 90       	pop	r0
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <UART_receiveString>:

/*
 * Description: Receive a string from the transmitter.
 */
void UART_receiveString( uint8 *Str )
{
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	00 d0       	rcall	.+0      	; 0x3260 <UART_receiveString+0xa>
    3260:	0f 92       	push	r0
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	9b 83       	std	Y+3, r25	; 0x03
    3268:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    326a:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte to save time if we have only 1 character*/
	Str[i] = UART_receiveByte;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	28 2f       	mov	r18, r24
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	9b 81       	ldd	r25, Y+3	; 0x03
    3276:	fc 01       	movw	r30, r24
    3278:	e2 0f       	add	r30, r18
    327a:	f3 1f       	adc	r31, r19
    327c:	83 ef       	ldi	r24, 0xF3	; 243
    327e:	98 e1       	ldi	r25, 0x18	; 24
    3280:	80 83       	st	Z, r24
    3282:	0f c0       	rjmp	.+30     	; 0x32a2 <UART_receiveString+0x4c>
	/* Receive the whole string until '#' */
	while(Str[i] != '#')
	{
		i++;
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	8f 5f       	subi	r24, 0xFF	; 255
    3288:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	8c 01       	movw	r16, r24
    3296:	02 0f       	add	r16, r18
    3298:	13 1f       	adc	r17, r19
    329a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <UART_receiveByte>
    329e:	f8 01       	movw	r30, r16
    32a0:	80 83       	st	Z, r24
{
	uint8 i = 0;
	/* Receive the first byte to save time if we have only 1 character*/
	Str[i] = UART_receiveByte;
	/* Receive the whole string until '#' */
	while(Str[i] != '#')
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	28 2f       	mov	r18, r24
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	9b 81       	ldd	r25, Y+3	; 0x03
    32ac:	fc 01       	movw	r30, r24
    32ae:	e2 0f       	add	r30, r18
    32b0:	f3 1f       	adc	r31, r19
    32b2:	80 81       	ld	r24, Z
    32b4:	83 32       	cpi	r24, 0x23	; 35
    32b6:	31 f7       	brne	.-52     	; 0x3284 <UART_receiveString+0x2e>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	/* After receiving the whole string, replace the extra '#' by null */
	Str[i] = '\0';
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	28 2f       	mov	r18, r24
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	9b 81       	ldd	r25, Y+3	; 0x03
    32c2:	fc 01       	movw	r30, r24
    32c4:	e2 0f       	add	r30, r18
    32c6:	f3 1f       	adc	r31, r19
    32c8:	10 82       	st	Z, r1
}
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	08 95       	ret

000032da <__udivmodsi4>:
    32da:	a1 e2       	ldi	r26, 0x21	; 33
    32dc:	1a 2e       	mov	r1, r26
    32de:	aa 1b       	sub	r26, r26
    32e0:	bb 1b       	sub	r27, r27
    32e2:	fd 01       	movw	r30, r26
    32e4:	0d c0       	rjmp	.+26     	; 0x3300 <__udivmodsi4_ep>

000032e6 <__udivmodsi4_loop>:
    32e6:	aa 1f       	adc	r26, r26
    32e8:	bb 1f       	adc	r27, r27
    32ea:	ee 1f       	adc	r30, r30
    32ec:	ff 1f       	adc	r31, r31
    32ee:	a2 17       	cp	r26, r18
    32f0:	b3 07       	cpc	r27, r19
    32f2:	e4 07       	cpc	r30, r20
    32f4:	f5 07       	cpc	r31, r21
    32f6:	20 f0       	brcs	.+8      	; 0x3300 <__udivmodsi4_ep>
    32f8:	a2 1b       	sub	r26, r18
    32fa:	b3 0b       	sbc	r27, r19
    32fc:	e4 0b       	sbc	r30, r20
    32fe:	f5 0b       	sbc	r31, r21

00003300 <__udivmodsi4_ep>:
    3300:	66 1f       	adc	r22, r22
    3302:	77 1f       	adc	r23, r23
    3304:	88 1f       	adc	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	1a 94       	dec	r1
    330a:	69 f7       	brne	.-38     	; 0x32e6 <__udivmodsi4_loop>
    330c:	60 95       	com	r22
    330e:	70 95       	com	r23
    3310:	80 95       	com	r24
    3312:	90 95       	com	r25
    3314:	9b 01       	movw	r18, r22
    3316:	ac 01       	movw	r20, r24
    3318:	bd 01       	movw	r22, r26
    331a:	cf 01       	movw	r24, r30
    331c:	08 95       	ret

0000331e <__prologue_saves__>:
    331e:	2f 92       	push	r2
    3320:	3f 92       	push	r3
    3322:	4f 92       	push	r4
    3324:	5f 92       	push	r5
    3326:	6f 92       	push	r6
    3328:	7f 92       	push	r7
    332a:	8f 92       	push	r8
    332c:	9f 92       	push	r9
    332e:	af 92       	push	r10
    3330:	bf 92       	push	r11
    3332:	cf 92       	push	r12
    3334:	df 92       	push	r13
    3336:	ef 92       	push	r14
    3338:	ff 92       	push	r15
    333a:	0f 93       	push	r16
    333c:	1f 93       	push	r17
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	ca 1b       	sub	r28, r26
    3348:	db 0b       	sbc	r29, r27
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	09 94       	ijmp

00003356 <__epilogue_restores__>:
    3356:	2a 88       	ldd	r2, Y+18	; 0x12
    3358:	39 88       	ldd	r3, Y+17	; 0x11
    335a:	48 88       	ldd	r4, Y+16	; 0x10
    335c:	5f 84       	ldd	r5, Y+15	; 0x0f
    335e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3360:	7d 84       	ldd	r7, Y+13	; 0x0d
    3362:	8c 84       	ldd	r8, Y+12	; 0x0c
    3364:	9b 84       	ldd	r9, Y+11	; 0x0b
    3366:	aa 84       	ldd	r10, Y+10	; 0x0a
    3368:	b9 84       	ldd	r11, Y+9	; 0x09
    336a:	c8 84       	ldd	r12, Y+8	; 0x08
    336c:	df 80       	ldd	r13, Y+7	; 0x07
    336e:	ee 80       	ldd	r14, Y+6	; 0x06
    3370:	fd 80       	ldd	r15, Y+5	; 0x05
    3372:	0c 81       	ldd	r16, Y+4	; 0x04
    3374:	1b 81       	ldd	r17, Y+3	; 0x03
    3376:	aa 81       	ldd	r26, Y+2	; 0x02
    3378:	b9 81       	ldd	r27, Y+1	; 0x01
    337a:	ce 0f       	add	r28, r30
    337c:	d1 1d       	adc	r29, r1
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	ed 01       	movw	r28, r26
    338a:	08 95       	ret

0000338c <itoa>:
    338c:	fb 01       	movw	r30, r22
    338e:	9f 01       	movw	r18, r30
    3390:	e8 94       	clt
    3392:	42 30       	cpi	r20, 0x02	; 2
    3394:	c4 f0       	brlt	.+48     	; 0x33c6 <itoa+0x3a>
    3396:	45 32       	cpi	r20, 0x25	; 37
    3398:	b4 f4       	brge	.+44     	; 0x33c6 <itoa+0x3a>
    339a:	4a 30       	cpi	r20, 0x0A	; 10
    339c:	29 f4       	brne	.+10     	; 0x33a8 <itoa+0x1c>
    339e:	97 fb       	bst	r25, 7
    33a0:	1e f4       	brtc	.+6      	; 0x33a8 <itoa+0x1c>
    33a2:	90 95       	com	r25
    33a4:	81 95       	neg	r24
    33a6:	9f 4f       	sbci	r25, 0xFF	; 255
    33a8:	64 2f       	mov	r22, r20
    33aa:	77 27       	eor	r23, r23
    33ac:	0e 94 f7 19 	call	0x33ee	; 0x33ee <__udivmodhi4>
    33b0:	80 5d       	subi	r24, 0xD0	; 208
    33b2:	8a 33       	cpi	r24, 0x3A	; 58
    33b4:	0c f0       	brlt	.+2      	; 0x33b8 <itoa+0x2c>
    33b6:	89 5d       	subi	r24, 0xD9	; 217
    33b8:	81 93       	st	Z+, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	a1 f7       	brne	.-24     	; 0x33a8 <itoa+0x1c>
    33c0:	16 f4       	brtc	.+4      	; 0x33c6 <itoa+0x3a>
    33c2:	5d e2       	ldi	r21, 0x2D	; 45
    33c4:	51 93       	st	Z+, r21
    33c6:	10 82       	st	Z, r1
    33c8:	c9 01       	movw	r24, r18
    33ca:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <strrev>

000033ce <strrev>:
    33ce:	dc 01       	movw	r26, r24
    33d0:	fc 01       	movw	r30, r24
    33d2:	67 2f       	mov	r22, r23
    33d4:	71 91       	ld	r23, Z+
    33d6:	77 23       	and	r23, r23
    33d8:	e1 f7       	brne	.-8      	; 0x33d2 <strrev+0x4>
    33da:	32 97       	sbiw	r30, 0x02	; 2
    33dc:	04 c0       	rjmp	.+8      	; 0x33e6 <strrev+0x18>
    33de:	7c 91       	ld	r23, X
    33e0:	6d 93       	st	X+, r22
    33e2:	70 83       	st	Z, r23
    33e4:	62 91       	ld	r22, -Z
    33e6:	ae 17       	cp	r26, r30
    33e8:	bf 07       	cpc	r27, r31
    33ea:	c8 f3       	brcs	.-14     	; 0x33de <strrev+0x10>
    33ec:	08 95       	ret

000033ee <__udivmodhi4>:
    33ee:	aa 1b       	sub	r26, r26
    33f0:	bb 1b       	sub	r27, r27
    33f2:	51 e1       	ldi	r21, 0x11	; 17
    33f4:	07 c0       	rjmp	.+14     	; 0x3404 <__udivmodhi4_ep>

000033f6 <__udivmodhi4_loop>:
    33f6:	aa 1f       	adc	r26, r26
    33f8:	bb 1f       	adc	r27, r27
    33fa:	a6 17       	cp	r26, r22
    33fc:	b7 07       	cpc	r27, r23
    33fe:	10 f0       	brcs	.+4      	; 0x3404 <__udivmodhi4_ep>
    3400:	a6 1b       	sub	r26, r22
    3402:	b7 0b       	sbc	r27, r23

00003404 <__udivmodhi4_ep>:
    3404:	88 1f       	adc	r24, r24
    3406:	99 1f       	adc	r25, r25
    3408:	5a 95       	dec	r21
    340a:	a9 f7       	brne	.-22     	; 0x33f6 <__udivmodhi4_loop>
    340c:	80 95       	com	r24
    340e:	90 95       	com	r25
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	08 95       	ret

00003416 <_exit>:
    3416:	f8 94       	cli

00003418 <__stop_program>:
    3418:	ff cf       	rjmp	.-2      	; 0x3418 <__stop_program>
